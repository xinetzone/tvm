# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# xinetzone <735613050@qq.com>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-10 21:32+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: xinetzone <735613050@qq.com>, 2022\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../docs/faq.rst:20
msgid "Frequently Asked Questions"
msgstr "常见问题"

#: ../../docs/faq.rst:24
msgid "How to Install"
msgstr "如何安装"

#: ../../docs/faq.rst:25
msgid "See :ref:`installation`."
msgstr "阅读 :ref:`installation`"

#: ../../docs/faq.rst:29
msgid "How to add a new Hardware Backend"
msgstr "如何添加一个新的硬件后端"

#: ../../docs/faq.rst:31
msgid ""
"If the hardware backend has LLVM support, then we can directly generate "
"the code by setting the correct target triple as in "
":py:mod:`~tvm.target`."
msgstr ""
"如果硬件后端有 LLVM 支持，那么我们可以通过设置正确的目标三要素，如 :py:mod:`~tvm.target` 直接生成代码。"

#: ../../docs/faq.rst:33
msgid ""
"If the target hardware is a GPU, try to use the cuda, opencl or vulkan "
"backend."
msgstr ""
"如果目标硬件是 GPU，尽量使用 cuda、opencl 或 vulkan 后端。"

#: ../../docs/faq.rst:34
msgid ""
"If the target hardware is a special accelerator, checkout :ref:`vta-"
"index` and :ref:`relay-bring-your-own-codegen`."
msgstr ""
"如果目标硬件是一个特殊的加速器，签出 :ref:`vta-index` 和 :ref:`relay-bring-your-own-codegen`。"

#: ../../docs/faq.rst:36
msgid ""
"For all of the above cases, You may want to add target specific "
"optimization templates using AutoTVM, see :ref:`tutorials-autotvm-sec`."
msgstr ""
"对于上述所有情况，你可能想使用 AutoTVM 添加目标特定的优化模板，见 :ref:`tutorials-autotvm-sec`。"

#: ../../docs/faq.rst:38
msgid ""
"Besides using LLVM's vectorization, we can also embed micro-kernels to "
"leverage hardware intrinsics, see :ref:`tutorials-tensorize`."
msgstr ""
"除了使用 LLVM 的矢量化，我们还可以嵌入微内核来利用硬件本征，见 :ref:`tutorials-tensorize`。"

#: ../../docs/faq.rst:43
msgid "TVM's relation to Other IR/DSL Projects"
msgstr "TVM 与其他 IR/DSL 项目的关系"

#: ../../docs/faq.rst:44
msgid ""
"There are usually two levels of abstractions of IR in the deep learning "
"systems. TensorFlow's XLA and Intel's ngraph both use a computation graph"
" representation. This representation is high level, and can be helpful to"
" perform generic optimizations such as memory reuse, layout "
"transformation and automatic differentiation."
msgstr ""
"在深度学习系统中，通常有两个层次的 IR 抽象。"
"TensorFlow 的 XLA 和英特尔的 ngraph 都使用计算图表示。"
"这种表示法是高水平的，可以帮助进行通用优化，如内存重用、布局转换和自动区分"。

#: ../../docs/faq.rst:49
msgid ""
"TVM adopts a low-level representation, that explicitly express the choice"
" of memory layout, parallelization pattern, locality and hardware "
"primitives etc. This level of IR is closer to directly target hardwares. "
"The low-level IR adopts ideas from existing image processing languages "
"like Halide, darkroom and loop transformation tools like loopy and "
"polyhedra-based analysis. We specifically focus on expressing deep "
"learning workloads (e.g. recurrence), optimization for different hardware"
" backends and embedding with frameworks to provide end-to-end compilation"
" stack."
msgstr ""
"TVM 采用了一种低级别的表示方法，明确表达了对内存布局、并行化模式、位置性和硬件基元等的选择。"
"这一层次的 IR 更接近于直接的目标硬件。"
"低级别的 IR 采用了现有的图像处理语言的想法，如 Halide、darkroom 和循环转换工具，"
"如 loopy 和基于多面体的分析。"
"我们特别关注表达深度学习的工作负载（如递归），为不同的硬件后端进行优化，并与框架嵌入，以提供端到端的编译栈。"

#: ../../docs/faq.rst:60
msgid "TVM's relation to libDNN, cuDNN"
msgstr "TVM 与 libDNN、cuDNN 的关系"

#: ../../docs/faq.rst:61
msgid ""
"TVM can incorporate these libraries as external calls. One goal of TVM is"
" to be able to generate high-performing kernels. We will evolve TVM an "
"incremental manner as we learn from the techniques of manual kernel "
"crafting and add these as primitives in DSL. See also top for recipes of "
"operators in TVM."
msgstr ""
"TVM 可以将这些库作为外部调用纳入。TVM 的一个目标是能够生成高性能的内核。"
"我们将以渐进的方式发展 TVM，因为我们从手工制作内核的技术中学习，并将这些技术作为基元加入 DSL 中。"
"TVM 中运算符的配方也见顶部。"

#: ../../docs/faq.rst:68
msgid "Security"
msgstr "安全"

#: ../../docs/faq.rst:69
msgid "See :ref:`dev-security`"
msgstr "参阅：:ref:`dev-security`"
