# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-05 09:32+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../doc/docs/deep_dive/tensor_ir/abstraction.rst:21
msgid "Tensor Program Abstraction"
msgstr "张量程序抽象"

#: ../../doc/docs/deep_dive/tensor_ir/abstraction.rst:22
msgid ""
"Before we dive into the details of TensorIR, let's first introduce what "
"is a primitive tensor function. Primitive tensor functions are functions "
"that correspond to a single \"unit\" of computational operation. For "
"example, a convolution operation can be a primitive tensor function, and "
"a fused convolution + relu operation can also be a primitive tensor "
"function. Usually, a typical abstraction for primitive tensor function "
"implementation contains the following elements: multi-dimensional "
"buffers, loop nests that drive the tensor computations, and finally, the "
"compute statements themselves."
msgstr ""
"在深入了解 TensorIR 的细节之前，我们首先来介绍一下什么是“元张量函数”（primitive tensor function）。"
"元张量函数是对应于单个计算运算“单元”的函数。例如，卷积算子可以是元张量函数，而融合的卷积+ReLU算子也可以是元张量函数。"
"通常，典型的元张量函数实现包含以下元素：多维缓冲区、驱动张量计算的循环嵌套，以及最后的计算语句本身。"

#: ../../doc/docs/deep_dive/tensor_ir/abstraction.rst:46
msgid "Key Elements of Tensor Programs"
msgstr "张量程序的关键元素"

#: ../../doc/docs/deep_dive/tensor_ir/abstraction.rst:48
msgid ""
"The demonstrated primitive tensor function calculates the element-wise "
"sum of two vectors. The function:"
msgstr ""
"所展示的元张量函数计算了两个向量的元素级的和。该函数："

#: ../../doc/docs/deep_dive/tensor_ir/abstraction.rst:51
msgid ""
"Accepts three **multi-dimensional buffers** as parameters, and generates "
"one **multi-dimensional buffer** as output."
msgstr ""
"接受三个 **多维缓冲区** 作为参数，并生成 **多维缓冲区** 作为输出。"

#: ../../doc/docs/deep_dive/tensor_ir/abstraction.rst:53
msgid ""
"Incorporates a solitary **loop nest** ``i`` that facilitates the "
"computation."
msgstr ""
"包含单独的 **循环嵌套** ``i``，用于促进计算。"

#: ../../doc/docs/deep_dive/tensor_ir/abstraction.rst:54
msgid ""
"Features a singular **compute statement** that calculates the element-"
"wise sum of the two vectors."
msgstr ""
"具有独特的 **计算语句**，用于计算两个向量的元素级和。"

#: ../../doc/docs/deep_dive/tensor_ir/abstraction.rst:58
msgid "Extra Structure in TensorIR"
msgstr "TensorIR 中的额外结构"

#: ../../doc/docs/deep_dive/tensor_ir/abstraction.rst:59
msgid ""
"Crucially, we are unable to execute arbitrary transformations on the "
"program, as certain computations rely on the loop's sequence. "
"Fortunately, the majority of primitive tensor functions we focus on "
"possess favorable properties, such as independence among loop iterations."
" For instance, the aforementioned program includes block and iteration "
"annotations:"
msgstr ""
"关键的是，我们无法对程序执行任意的转换，因为某些计算依赖于循环的顺序。"
"幸运的是，我们关注的大多数元张量函数具有有利的特性，例如循环迭代之间的独立性。例如，上述程序包含块和迭代注解："

#: ../../doc/docs/deep_dive/tensor_ir/abstraction.rst:64
msgid ""
"The **block annotation** ``with T.block(\"C\")`` signifies that the block"
" is the fundamental computation unit designated for scheduling. A block "
"may encompass a single computation statement, multiple computation "
"statements with loops, or opaque intrinsics such as Tensor Core "
"instructions."
msgstr ""
"**块注解** ``with T.block("C")`` 表示该块是指定调度的基本计算单元。"
"一个块可以包含单个计算语句、带有循环的多个计算语句，或不透明的内部函数，例如张量核心指令。"

#: ../../doc/docs/deep_dive/tensor_ir/abstraction.rst:68
msgid ""
"The **iteration annotation** ``T.axis.spatial``, indicating that variable"
" ``vi`` is mapped to ``i``, and all iterations are independent."
msgstr ""
"**迭代注解** ``T.axis.spatial``，表示变量 ``vi`` 被映射到 ``i``，并且所有迭代都是独立的。"

#: ../../doc/docs/deep_dive/tensor_ir/abstraction.rst:71
msgid ""
"While this information isn't crucial for *executing* the specific "
"program, it proves useful when transforming the program. Consequently, we"
" can confidently parallelize or reorder loops associated with ``vi``, "
"provided we traverse all the index elements from 0 to 128."
msgstr ""
"虽然这些信息对于 *执行* 特定程序并不重要，但在变换程序时却非常有用。"
"因此，我们可以自信地并行化或重新排序与 ``vi`` 相关的循环，只要我们遍历所有从 0 到 128 的索引元素。"
