# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-05 09:32+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../doc/docs/reference/api/python/tir/analysis.rst:19
msgid "tvm.tir.analysis"
msgstr ""

#: of tvm.tir.analysis.analysis:1
msgid "Wrapping existing analysis utils."
msgstr ""

#: of tvm.tir.analysis.analysis.OOBChecker:1
msgid "Detect out of bounds memory access in arrays."
msgstr ""

#: of tvm.tir.analysis.analysis.OOBChecker:4
#: tvm.tir.analysis.analysis.apply_prim_func_arg_and_result_memory_constraints:24
#: tvm.tir.analysis.analysis.calculate_allocated_bytes:10
#: tvm.tir.analysis.analysis.calculate_constant_bytes:12
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:12
#: tvm.tir.analysis.analysis.detect_buffer_access_lca:12
#: tvm.tir.analysis.analysis.estimate_tir_flops:9
#: tvm.tir.analysis.analysis.expr_deep_equal:12
#: tvm.tir.analysis.analysis.find_anchor_block:20
#: tvm.tir.analysis.analysis.get_block_access_region:13
#: tvm.tir.analysis.analysis.get_block_read_write_region:13
#: tvm.tir.analysis.analysis.get_prim_func_arg_and_result_memory_constraints:16
#: tvm.tir.analysis.analysis.get_vtcm_compaction_passes:5
#: tvm.tir.analysis.analysis.undefined_vars:12
#: tvm.tir.analysis.analysis.verify_gpu_code:12
#: tvm.tir.analysis.analysis.verify_memory:9
#: tvm.tir.analysis.analysis.verify_ssa:9
#: tvm.tir.analysis.analysis.verify_well_formed:13
msgid "Returns"
msgstr ""

#: of tvm.tir.analysis.analysis.OOBChecker:5
msgid "fpass"
msgstr ""

#: of tvm.tir.analysis.analysis.OOBChecker:-1
msgid "tvm.transform.Pass"
msgstr ""

#: of tvm.tir.analysis.analysis.OOBChecker:6
msgid "The result pass"
msgstr ""

#: of
#: tvm.tir.analysis.analysis.apply_prim_func_arg_and_result_memory_constraints:1
msgid ""
"Returns func written to capture the memory (aka storage) scope "
"constraints for each of the func's parameters given by "
"arg_and_result_memory_scopes. However, arg_and_result_memory_scopes "
"should be w.r.t. the func's representation as a Relay Function of "
"relay_func_type before lowering and conversion to DPS."
msgstr ""

#: of
#: tvm.tir.analysis.analysis.apply_prim_func_arg_and_result_memory_constraints:6
#: tvm.tir.analysis.analysis.get_prim_func_arg_and_result_memory_constraints:5
msgid "Visible for testing."
msgstr ""

#: of
#: tvm.tir.analysis.analysis.apply_prim_func_arg_and_result_memory_constraints:8
msgid ""
"CAUTION: This is experimental. The resulting PrimFunc may not have fully "
"accounted for all new memory scopes."
msgstr ""

#: of
#: tvm.tir.analysis.analysis.apply_prim_func_arg_and_result_memory_constraints:12
#: tvm.tir.analysis.analysis.calculate_allocated_bytes:4
#: tvm.tir.analysis.analysis.calculate_constant_bytes:5
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:5
#: tvm.tir.analysis.analysis.detect_buffer_access_lca:7
#: tvm.tir.analysis.analysis.estimate_tir_flops:4
#: tvm.tir.analysis.analysis.expr_deep_equal:4
#: tvm.tir.analysis.analysis.find_anchor_block:16
#: tvm.tir.analysis.analysis.get_block_access_region:5
#: tvm.tir.analysis.analysis.get_block_read_write_region:5
#: tvm.tir.analysis.analysis.get_prim_func_arg_and_result_memory_constraints:8
#: tvm.tir.analysis.analysis.undefined_vars:4
#: tvm.tir.analysis.analysis.verify_gpu_code:4
#: tvm.tir.analysis.analysis.verify_memory:4
#: tvm.tir.analysis.analysis.verify_ssa:4
#: tvm.tir.analysis.analysis.verify_well_formed:5
msgid "Parameters"
msgstr ""

#: of
#: tvm.tir.analysis.analysis.apply_prim_func_arg_and_result_memory_constraints:13
#: tvm.tir.analysis.analysis.calculate_constant_bytes:6
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:6
#: tvm.tir.analysis.analysis.detect_buffer_access_lca:8
#: tvm.tir.analysis.analysis.get_prim_func_arg_and_result_memory_constraints:9
#: tvm.tir.analysis.analysis.verify_gpu_code:5
#: tvm.tir.analysis.analysis.verify_memory:5
#: tvm.tir.analysis.analysis.verify_ssa:5
msgid "func: tvm.tir.PrimFunc"
msgstr ""

#: of
#: tvm.tir.analysis.analysis.apply_prim_func_arg_and_result_memory_constraints:14
#: tvm.tir.analysis.analysis.get_prim_func_arg_and_result_memory_constraints:10
msgid "The function to retrieve constraints from."
msgstr ""

#: of
#: tvm.tir.analysis.analysis.apply_prim_func_arg_and_result_memory_constraints:16
#: tvm.tir.analysis.analysis.get_prim_func_arg_and_result_memory_constraints:12
msgid "relay_func_type: tvm.relay.FuncType"
msgstr ""

#: of
#: tvm.tir.analysis.analysis.apply_prim_func_arg_and_result_memory_constraints:17
#: tvm.tir.analysis.analysis.get_prim_func_arg_and_result_memory_constraints:13
msgid "The type of the Relay Function from which the func was derived."
msgstr ""

#: of
#: tvm.tir.analysis.analysis.apply_prim_func_arg_and_result_memory_constraints:19
msgid "arg_and_result_memory_scopes: Array[AnyStr]"
msgstr ""

#: of
#: tvm.tir.analysis.analysis.apply_prim_func_arg_and_result_memory_constraints:20
msgid ""
"Memory constraints for funcs args and result in Relay form. The empty "
"string denotes 'no constraint'."
msgstr ""

#: of
#: tvm.tir.analysis.analysis.apply_prim_func_arg_and_result_memory_constraints:25
msgid "result: tvm.tir.PrimFunc"
msgstr ""

#: of
#: tvm.tir.analysis.analysis.apply_prim_func_arg_and_result_memory_constraints:26
msgid "The rewritten func."
msgstr ""

#: ../../doc/docs/reference/api/python/tir/analysis.rst of
#: tvm.tir.analysis.analysis.assert_pure_function
#: tvm.tir.analysis.analysis.is_pure_function
msgid "参数"
msgstr ""

#: ../../doc/docs/reference/api/python/tir/analysis.rst of
#: tvm.tir.analysis.analysis.assert_pure_function
#: tvm.tir.analysis.analysis.is_pure_function
msgid "返回类型"
msgstr ""

#: of tvm.tir.analysis.analysis.assert_pure_function:1
msgid "Asserts that the function is a pure function"
msgstr ""

#: of tvm.tir.analysis.analysis.calculate_allocated_bytes:1
msgid "Calculate allocated memory per memory scope required by TIR PrimFuncs."
msgstr ""

#: of tvm.tir.analysis.analysis.calculate_allocated_bytes:5
msgid "func_or_mod: Union[PrimFunc, IRModule]"
msgstr ""

#: of tvm.tir.analysis.analysis.calculate_allocated_bytes:6
msgid ""
"The function or module to be detected. If a module is passed, allocated "
"memory is calculated for all PrimFuncs inside the module"
msgstr ""

#: of tvm.tir.analysis.analysis.calculate_allocated_bytes:11
#: tvm.tir.analysis.analysis.calculate_constant_bytes:13
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:13
#: tvm.tir.analysis.analysis.detect_buffer_access_lca:13
#: tvm.tir.analysis.analysis.expr_deep_equal:13
#: tvm.tir.analysis.analysis.get_block_access_region:14
#: tvm.tir.analysis.analysis.get_block_read_write_region:14
#: tvm.tir.analysis.analysis.get_vtcm_compaction_passes:6
#: tvm.tir.analysis.analysis.undefined_vars:13
#: tvm.tir.analysis.analysis.verify_gpu_code:13
#: tvm.tir.analysis.analysis.verify_memory:10
#: tvm.tir.analysis.analysis.verify_ssa:10
msgid "result"
msgstr ""

#: of tvm.tir.analysis.analysis.calculate_allocated_bytes:-1
msgid "Union[Dict[str, int], Dict[str, Dict[str, int]]]"
msgstr ""

#: of tvm.tir.analysis.analysis.calculate_allocated_bytes:12
msgid ""
"Allocated memory size per scope in bytes for each function in the "
"IRModule returned as a dict with function names as keys and a dict of "
"allocated sizes as values. If a single PrimFunc is passed, the function "
"name is returned as \"main\""
msgstr ""

#: of tvm.tir.analysis.analysis.calculate_constant_bytes:1
msgid ""
"Calculate the constant size in bytes needed by the TIR allocates inside "
"the TIR PrimFunc."
msgstr ""

#: of tvm.tir.analysis.analysis.calculate_constant_bytes:7
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:7
#: tvm.tir.analysis.analysis.detect_buffer_access_lca:9
msgid "The function to be detected."
msgstr ""

#: of tvm.tir.analysis.analysis.calculate_constant_bytes:8
msgid "constant_byte_alignment"
msgstr ""

#: of tvm.tir.analysis.analysis.calculate_constant_bytes:-1
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:-1
msgid "int"
msgstr ""

#: of tvm.tir.analysis.analysis.calculate_constant_bytes:9
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:9
msgid "The byte alignment required for each tensor"
msgstr ""

#: of tvm.tir.analysis.analysis.calculate_constant_bytes:14
#: tvm.tir.analysis.analysis.calculate_workspace_bytes:14
msgid "Workspace size in bytes."
msgstr ""

#: of tvm.tir.analysis.analysis.calculate_workspace_bytes:1
msgid ""
"Calculate the workspace size in bytes needed by the TIR allocates inside "
"the TIR PrimFunc."
msgstr ""

#: of tvm.tir.analysis.analysis.calculate_workspace_bytes:8
msgid "workspace_byte_alignment"
msgstr ""

#: of tvm.tir.analysis.analysis.detect_buffer_access_lca:1
msgid ""
"Detect the lowest common ancestor(LCA) of buffer access, including both "
"high-level access (BufferLoad, BufferStore) and low-level access "
"(BufferLoad, BufferStore and opaque access). The LCA may be a For loop or"
" a Block."
msgstr ""

#: of tvm.tir.analysis.analysis.detect_buffer_access_lca:-1
msgid "Dict[Buffer, Stmt]"
msgstr ""

#: of tvm.tir.analysis.analysis.detect_buffer_access_lca:14
msgid "Map from buffer to the LCA of all access to it."
msgstr ""

#: of tvm.tir.analysis.analysis.estimate_tir_flops:1
msgid "Estimate the FLOPs of a TIR fragment."
msgstr ""

#: of tvm.tir.analysis.analysis.estimate_tir_flops:5
msgid "stmt_or_mod: Union[Stmt, IRModule]"
msgstr ""

#: of tvm.tir.analysis.analysis.estimate_tir_flops:6
msgid "The TIR fragment or IRModule to be estimated."
msgstr ""

#: of tvm.tir.analysis.analysis.estimate_tir_flops:10
msgid "flops: float"
msgstr ""

#: of tvm.tir.analysis.analysis.estimate_tir_flops:11
msgid "The estimated FLOPs."
msgstr ""

#: of tvm.tir.analysis.analysis.expr_deep_equal:1
msgid "Deeply compare two nested expressions."
msgstr ""

#: of tvm.tir.analysis.analysis.expr_deep_equal:5
msgid "lhs"
msgstr ""

#: of tvm.tir.analysis.analysis.expr_deep_equal:-1
msgid "PrimExpr"
msgstr ""

#: of tvm.tir.analysis.analysis.expr_deep_equal:6
msgid "The left operand."
msgstr ""

#: of tvm.tir.analysis.analysis.expr_deep_equal:8
msgid "rhs"
msgstr ""

#: of tvm.tir.analysis.analysis.expr_deep_equal:9
msgid "The right operand."
msgstr ""

#: of tvm.tir.analysis.analysis.expr_deep_equal:-1
#: tvm.tir.analysis.analysis.verify_gpu_code:-1
#: tvm.tir.analysis.analysis.verify_memory:-1
#: tvm.tir.analysis.analysis.verify_ssa:-1
msgid "bool"
msgstr ""

#: of tvm.tir.analysis.analysis.expr_deep_equal:14
msgid "The comparison result"
msgstr ""

#: of tvm.tir.analysis.analysis.expr_deep_equal:17
msgid "Note"
msgstr ""

#: of tvm.tir.analysis.analysis.expr_deep_equal:19
msgid ""
"This function does not remap variable bindings, it will not return true "
"for (let x = 1 in x + 1) vs (let y = 1 in y + 1), unless x.same_as(y). "
"Use py:func:`tvm.ir.structural_equal` to handle structural variable "
"remapping."
msgstr ""

#: of tvm.tir.analysis.analysis.expr_deep_equal:23
msgid ""
"Due to the restriction of not remapping variables, this function can run "
"faster than StructuralEqual and can be used as a utility function during "
"arithmetic simplifications."
msgstr ""

#: of tvm.tir.analysis.analysis.expr_deep_equal:27
msgid ""
"Always consider py:func:`tvm.ir.structural_equal` first, which handles "
"the structural remapping."
msgstr ""

#: of tvm.tir.analysis.analysis.expr_deep_equal:31
msgid "See Also"
msgstr ""

#: of tvm.tir.analysis.analysis.expr_deep_equal:32
msgid "tvm.ir.structural_equal"
msgstr ""

#: of tvm.tir.analysis.analysis.find_anchor_block:1
msgid "Find the \"anchor block\" of the given module."
msgstr ""

#: of tvm.tir.analysis.analysis.find_anchor_block:3
msgid ""
"We define the anchor block to be the block with (1) an init statement and"
" (2) having the biggest flops count. The latter condition is only used "
"when there are multiple blocks with an init statement."
msgstr ""

#: of tvm.tir.analysis.analysis.find_anchor_block:7
msgid ""
"For example, if the input module is conv2d + fused spatial blocks, conv2d"
" is the anchor block. The input module may not contain more than one such"
" block. For example, a module having two conv2d is not allowed as an "
"input."
msgstr ""

#: of tvm.tir.analysis.analysis.find_anchor_block:11
msgid ""
"However, a module created from winograd convolution has multiple blocks "
"with an init statement (input transform, batched GEMM, and output "
"transform). We use the second condition, the flops count, to determine "
"that the batched GEMM block is the anchor block."
msgstr ""

#: of tvm.tir.analysis.analysis.find_anchor_block:17
msgid "mod: tvm.ir.IRModule"
msgstr ""

#: of tvm.tir.analysis.analysis.find_anchor_block:18
msgid "The input TIR module."
msgstr ""

#: of tvm.tir.analysis.analysis.find_anchor_block:21
msgid "anchor_block: Block"
msgstr ""

#: of tvm.tir.analysis.analysis.find_anchor_block:22
msgid "The anchor block if found, None otherwise."
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_access_region:1
msgid "Detect which regions of tensors in this block are read or written to."
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_access_region:2
msgid "Regions are sorted by order of appearance in the AST."
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_access_region:6
#: tvm.tir.analysis.analysis.get_block_read_write_region:6
msgid "block: tvm.tir.Block"
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_access_region:7
#: tvm.tir.analysis.analysis.get_block_read_write_region:7
msgid "The block in which we are detecting read/write regions."
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_access_region:9
#: tvm.tir.analysis.analysis.get_block_read_write_region:9
msgid "buffer_var_map"
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_access_region:-1
#: tvm.tir.analysis.analysis.get_block_read_write_region:-1
msgid "Dict[Var, Buffer]"
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_access_region:10
#: tvm.tir.analysis.analysis.get_block_read_write_region:10
msgid ""
"The outside buffers which may access the block. Mapping from buffer var "
"to the buffer"
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_access_region:-1
#: tvm.tir.analysis.analysis.get_block_read_write_region:-1
msgid "List[List[BufferRegion]]"
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_access_region:15
msgid "Array of access regions. There are three arrays of BufferRegion:"
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_access_region:16
msgid "first: read regions"
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_access_region:17
msgid "second: write regions"
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_access_region:18
msgid "third: opaque regions"
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_read_write_region:1
msgid "Auto detect the block read/write region according to its body stmt."
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_read_write_region:2
msgid "An opaque access will be counted as both a read and a write access"
msgstr ""

#: of tvm.tir.analysis.analysis.get_block_read_write_region:15
msgid ""
"An array only consisting of the read regions and write regions of the "
"input block"
msgstr ""

#: of
#: tvm.tir.analysis.analysis.get_prim_func_arg_and_result_memory_constraints:1
msgid ""
"Returns the memory (aka storage) scope constraints for all the arguments "
"and result of func. However the result will be w.r.t. the func's "
"representation as a Relay Function of relay_func_type before lowering and"
" conversion to DPS."
msgstr ""

#: of
#: tvm.tir.analysis.analysis.get_prim_func_arg_and_result_memory_constraints:17
msgid "result: List[AnyStr]"
msgstr ""

#: of
#: tvm.tir.analysis.analysis.get_prim_func_arg_and_result_memory_constraints:18
msgid ""
"Memory scope constraints for funcs args and result in Relay form. The "
"empty string denotes 'no constraint'."
msgstr ""

#: of tvm.tir.analysis.analysis.get_vtcm_compaction_passes:1
msgid ""
"Utility function to get the list of lowering passes to be applied to "
"calculate the compacted VTCM allocation size"
msgstr ""

#: of tvm.tir.analysis.analysis.get_vtcm_compaction_passes:-1
msgid "List[tvm.transform.Pass]"
msgstr ""

#: of tvm.tir.analysis.analysis.get_vtcm_compaction_passes:7
msgid "returns list of passes"
msgstr ""

#: of tvm.tir.analysis.analysis.is_pure_function:1
msgid "Checks if the function is a pure function"
msgstr ""

#: of tvm.tir.analysis.analysis.undefined_vars:1
msgid "Find undefined vars in a TIR statement or expression."
msgstr ""

#: of tvm.tir.analysis.analysis.undefined_vars:5
msgid "node: Union[Stmt, PrimExpr]"
msgstr ""

#: of tvm.tir.analysis.analysis.undefined_vars:6
msgid "The TIR statement or expression to be checked."
msgstr ""

#: of tvm.tir.analysis.analysis.undefined_vars:8
msgid "defs: Optional[List[Var]]"
msgstr ""

#: of tvm.tir.analysis.analysis.undefined_vars:9
msgid "The vars that is defined"
msgstr ""

#: of tvm.tir.analysis.analysis.undefined_vars:-1
msgid "List[Var]"
msgstr ""

#: of tvm.tir.analysis.analysis.undefined_vars:14
msgid "The undefined vars."
msgstr ""

#: of tvm.tir.analysis.analysis.verify_gpu_code:1
msgid "Verify if module contains illegal host side direct memory access."
msgstr ""

#: of tvm.tir.analysis.analysis.verify_gpu_code:6
#: tvm.tir.analysis.analysis.verify_memory:6
#: tvm.tir.analysis.analysis.verify_ssa:6
msgid "The module to be verified."
msgstr ""

#: of tvm.tir.analysis.analysis.verify_gpu_code:8
msgid "constraints"
msgstr ""

#: of tvm.tir.analysis.analysis.verify_gpu_code:-1
msgid "Dict[str, int]"
msgstr ""

#: of tvm.tir.analysis.analysis.verify_gpu_code:9
msgid "The attribute constraints."
msgstr ""

#: of tvm.tir.analysis.analysis.verify_gpu_code:14
#: tvm.tir.analysis.analysis.verify_memory:11
#: tvm.tir.analysis.analysis.verify_ssa:11
msgid "The result of verification."
msgstr ""

#: of tvm.tir.analysis.analysis.verify_memory:1
msgid "Verify if func contains illegal host side direct memory access."
msgstr ""

#: of tvm.tir.analysis.analysis.verify_ssa:1
msgid "Verify if the func is in SSA form."
msgstr ""

#: of tvm.tir.analysis.analysis.verify_well_formed:1
msgid "Verify if the given TIR is well-formed. The verification includes:"
msgstr ""

#: of tvm.tir.analysis.analysis.verify_well_formed:2
msgid "Check if expressions not contain vars that is defined outside the block."
msgstr ""

#: of tvm.tir.analysis.analysis.verify_well_formed:6
msgid "obj: Union[tvm.tir.PrimFunc, tvm.ir.IRModule]"
msgstr ""

#: of tvm.tir.analysis.analysis.verify_well_formed:7
msgid "The function or module to be verified."
msgstr ""

#: of tvm.tir.analysis.analysis.verify_well_formed:9
msgid "assert_mode: bool"
msgstr ""

#: of tvm.tir.analysis.analysis.verify_well_formed:10
msgid "The indicator if it raises an error when the function is not well-formed."
msgstr ""

#: of tvm.tir.analysis.analysis.verify_well_formed:14
msgid "result: bool"
msgstr ""

#: of tvm.tir.analysis.analysis.verify_well_formed:15
msgid "Whether it is a well-formed TIR function."
msgstr ""

