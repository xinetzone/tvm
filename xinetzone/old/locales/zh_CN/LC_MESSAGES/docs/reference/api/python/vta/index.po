# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-01-20 16:06+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../doc/docs/reference/api/python/vta/index.rst:19
msgid "vta"
msgstr ""

#: ../../doc/docs/reference/api/python/vta/index.rst:21
msgid "This document contains the python API to VTA compiler toolchain."
msgstr "这个文档包含 python API 到 VTA 编译器工具链。"

#: of vta:1
msgid "VTA Package is a TVM backend extension to support VTA hardware."
msgstr ""

#: of vta:3
msgid ""
"Besides the compiler toolchain, it also includes utility functions to "
"configure the hardware environment and access remote device through RPC."
msgstr ""

#: ../../doc/docs/reference/api/python/vta/index.rst:26
msgid "Hardware Information"
msgstr "硬件信息"

#: of vta.environment.Environment:1
#, fuzzy
msgid "Hardware configuration object."
msgstr "硬件信息"

#: of vta.environment.Environment:3
msgid ""
"This object contains all the information needed for compiling to a "
"specific VTA backend."
msgstr ""

#: of vta.build_module.build_config:4 vta.environment.Environment:7
#: vta.rpc_client.program_fpga:4 vta.rpc_client.reconfig_runtime:4
msgid "Parameters"
msgstr ""

#: of vta.environment.Environment:9
msgid "cfg"
msgstr ""

#: of vta.environment.Environment:-1
msgid "dict of str to value."
msgstr ""

#: of vta.environment.Environment:9
msgid "The configuration parameters."
msgstr ""

#: of vta.build_module.build_config:17 vta.environment.Environment:12
msgid "Example"
msgstr ""

#: of vta.environment.get_env:1
msgid "Get the current VTA Environment."
msgstr ""

#: of vta.build_module.build_config:12 vta.environment.get_env:4
msgid "Returns"
msgstr ""

#: of vta.environment.get_env:5
msgid "env"
msgstr ""

#: of vta.environment.get_env:-1
msgid "Environment"
msgstr ""

#: of vta.environment.get_env:6
msgid "The current environment."
msgstr ""

#: ../../doc/docs/reference/api/python/vta/index.rst:32
msgid "RPC Utilities"
msgstr ""

#: of vta.rpc_client.reconfig_runtime:1
msgid "Reconfigure remote runtime based on current hardware spec."
msgstr ""

#: of vta.rpc_client.program_fpga:6 vta.rpc_client.reconfig_runtime:5
msgid "remote"
msgstr ""

#: of vta.rpc_client.program_fpga:-1 vta.rpc_client.reconfig_runtime:-1
msgid "RPCSession"
msgstr ""

#: of vta.rpc_client.program_fpga:6 vta.rpc_client.reconfig_runtime:6
msgid "The TVM RPC session"
msgstr ""

#: of vta.rpc_client.program_fpga:1
msgid "Upload and program bistream"
msgstr ""

#: of vta.rpc_client.program_fpga:8
msgid "bitstream"
msgstr ""

#: of vta.rpc_client.program_fpga:-1
msgid "str, optional"
msgstr ""

#: of vta.rpc_client.program_fpga:9
msgid ""
"Path to a local bistream file. If unset, tries to download from cache "
"server."
msgstr ""

#: ../../doc/docs/reference/api/python/vta/index.rst:39
msgid "Compiler API"
msgstr ""

#: ../../doc/docs/reference/api/python/vta/index.rst:40
msgid ""
"We program VTA using TVM, so the compiler API in vta package is only a "
"thin wrapper to provide VTA specific extensions."
msgstr ""

#: of vta.build_module.build_config:1
msgid "Build a build config for VTA."
msgstr ""

#: of vta.build_module.build_config:6
msgid "debug_flag"
msgstr ""

#: of vta.build_module.build_config:-1
msgid "int"
msgstr ""

#: of vta.build_module.build_config:6
msgid "The dbeug flag to be passed."
msgstr ""

#: of vta.build_module.build_config:9
msgid "kwargs"
msgstr ""

#: of vta.build_module.build_config:-1
msgid "dict"
msgstr ""

#: of vta.build_module.build_config:9
msgid "Additional configurations."
msgstr ""

#: of vta.build_module.build_config:14
msgid "build_config: tvm.transform.PassContext"
msgstr ""

#: of vta.build_module.build_config:14
msgid "The build config that can be used in TVM."
msgstr ""

#: of vta.build_module.build:1
msgid "Thin wrapper of tvm.build"
msgstr ""

#: of vta.build_module.build:3 vta.build_module.lower:3
msgid ""
"This wrapper automatically applies VTA's build_config if there is no user"
" specified build_config in context."
msgstr ""

#: of vta.build_module.build:7 vta.build_module.lower:7
msgid "See Also"
msgstr ""

#: of vta.build_module.build:8
msgid "tvm.build : The original TVM's build function"
msgstr ""

#: of vta.build_module.lower:1
msgid "Thin wrapper of tvm.lower"
msgstr ""

#: of vta.build_module.lower:8
msgid "tvm.lower : The original TVM's lower function"
msgstr ""

#~ msgid "VTA Package is a TVM backend extension to support VTA hardware."
#~ msgstr "VTA Package 是 TVM 后端扩展，支持 VTA 硬件。"

#~ msgid ""
#~ "Besides the compiler toolchain, it also"
#~ " includes utility functions to configure"
#~ " the hardware environment and access "
#~ "remote device through RPC."
#~ msgstr "除了编译器工具链，它还包括配置硬件环境和通过 RPC 访问远程设备的实用函数。"

#~ msgid "Hardware configuration object."
#~ msgstr "硬件配置对象"

#~ msgid ""
#~ "This object contains all the information"
#~ " needed for compiling to a specific"
#~ " VTA backend."
#~ msgstr "该对象包含编译到特定 VTA 后端所需的所有信息。"

#~ msgid "参数"
#~ msgstr ""

#~ msgid "The configuration parameters."
#~ msgstr "配置的参数。"

#~ msgid "示例"
#~ msgstr ""

#~ msgid "Get the current VTA Environment."
#~ msgstr "获得当前 VTA Environment。"

#~ msgid "返回"
#~ msgstr ""

#~ msgid "**env** -- The current environment."
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid "Reconfigure remote runtime based on current hardware spec."
#~ msgstr "基于当前硬件 spec 重新配置远程运行时。"

#~ msgid "The TVM RPC session"
#~ msgstr "TVM RPC 会话"

#~ msgid "Upload and program bistream"
#~ msgstr ""

#~ msgid ""
#~ "Path to a local bistream file. If"
#~ " unset, tries to download from cache"
#~ " server."
#~ msgstr ""

#~ msgid "Build a build config for VTA."
#~ msgstr ""

#~ msgid "The dbeug flag to be passed."
#~ msgstr ""

#~ msgid "Additional configurations."
#~ msgstr ""

#~ msgid "**build_config** -- The build config that can be used in TVM."
#~ msgstr ""

#~ msgid "Thin wrapper of tvm.build"
#~ msgstr ""

#~ msgid ""
#~ "This wrapper automatically applies VTA's "
#~ "build_config if there is no user "
#~ "specified build_config in context."
#~ msgstr ""

#~ msgid ":obj:`tvm.build`"
#~ msgstr ""

#~ msgid "The original TVM's build function"
#~ msgstr ""

#~ msgid "Thin wrapper of tvm.lower"
#~ msgstr ""

#~ msgid ":obj:`tvm.lower`"
#~ msgstr ""

#~ msgid "The original TVM's lower function"
#~ msgstr ""

#~ msgid "Parameters"
#~ msgstr ""

#~ msgid "Example"
#~ msgstr ""

#~ msgid "Returns"
#~ msgstr ""

#~ msgid "See Also"
#~ msgstr ""

#~ msgid "cfg"
#~ msgstr ""

#~ msgid "dict of str to value."
#~ msgstr "str 到 value 的 dict。"

#~ msgid "env"
#~ msgstr ""

#~ msgid "Environment"
#~ msgstr ""

#~ msgid "The current environment."
#~ msgstr "当前环境。"

#~ msgid "remote"
#~ msgstr ""

#~ msgid "RPCSession"
#~ msgstr ""

#~ msgid "bitstream"
#~ msgstr ""

#~ msgid "str, optional"
#~ msgstr ""

#~ msgid "debug_flag"
#~ msgstr ""

#~ msgid "int"
#~ msgstr ""

#~ msgid "kwargs"
#~ msgstr ""

#~ msgid "dict"
#~ msgstr ""

#~ msgid "build_config: tvm.transform.PassContext"
#~ msgstr ""

#~ msgid "The build config that can be used in TVM."
#~ msgstr ""

#~ msgid "tvm.build : The original TVM's build function"
#~ msgstr ""

#~ msgid "tvm.lower : The original TVM's lower function"
#~ msgstr ""

