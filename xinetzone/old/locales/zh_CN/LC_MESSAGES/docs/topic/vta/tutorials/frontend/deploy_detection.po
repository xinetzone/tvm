# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-09 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:10002
msgid "在 VTA 上部署预训练的 Darknet 视觉检测模型"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:10004
msgid "**原作者**: [Hua Jiang](https://github.com/huajsj)"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:10006
msgid ""
"本教程提供了端到端 demo，关于如何在 VTA 加速器设计上运行 Darknet YoloV3-tiny inference "
"来执行图像检测任务。它展示了 Relay 作为前端编译器，它可以执行量化（VTA 只支持 int8/32 推理）和 graph "
"packing（为了在 core 中支持张量），从而为硬件目标 massage 计算图（compute graph）。"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:10008
msgid "安装依赖"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:10010
msgid "要在 `tvm` 中使用 `autotvm` 包，需要安装一些额外的依赖项。（如果你使用 python2，将 \"3\" 改为 \"2\"）："
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:10016
msgid "带有 Darknet 解析的 YOLO-V3-tiny Model 依赖于 CFFI 和 CV2 库，需要在执行此脚本前安装 CFFI 和 CV2。"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:10023
msgid "现在返回 python 代码。导入包。"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:30002
msgid "根据 Model 名称 下载 yolo net 配置文件，权重文件，darknet 库文件："
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:50002
msgid "下载 yolo 类别和 illustration 前端："
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:70002
msgid "定义平台和模型目标"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:70004
msgid "在 CPU 和VTA 上执行，并定义模型。"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:90002
msgid "获取执行远程"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:90004
msgid "当 target 为 'pynq' 或其他 FPGA 后端时，重新配置 FPGA 和运行时。否则，如果 target 为 'sim'，则在本地执行。"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:110002
msgid "构建推理 graph executor"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:110004
msgid "利用 Darknet 库加载下载视觉模型，并用 Relay 编译。编译步骤如下："
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:110006
msgid "从 Darknet 到 Relay 模块的前端翻译。"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:110007
msgid "应用 8 位量化：这里跳过第一个 conv 层和 dense 层，它们都将在 CPU 上的 fp32 中执行。"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:110008
msgid "执行 graph packing 以更改数据布局以进行张量化。"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:110009
msgid "执行常量折叠以减少算子的数量（例如，消除 batch norm 乘法）。"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:110010
msgid "执行 Relay 构建 object 文件。"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:110011
msgid "将 object 文件加载到远程（FPGA 设备）。"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:110012
msgid "生成 graph executor `m`。"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:130002
msgid "执行图像检测推理"
msgstr ""

#: ../../xin/docs/topic/vta/tutorials/frontend/deploy_detection.ipynb:130004
msgid "检测已下载的图像："
msgstr ""

#~ msgid "Define the platform and model targets."
#~ msgstr ""

#~ msgid "Execute on CPU vs. VTA, and define the model."
#~ msgstr ""

#~ msgid "Obtain an execution remote."
#~ msgstr ""

#~ msgid ""
#~ "When target is 'pynq' or other "
#~ "FPGA backend, reconfigure FPGA and "
#~ "runtime. Otherwise, if target is 'sim',"
#~ " execute locally."
#~ msgstr ""

#~ msgid "Build the inference graph executor."
#~ msgstr ""

#~ msgid ""
#~ "Using Darknet library load downloaded "
#~ "vision model and compile with Relay. "
#~ "The compilation steps are:"
#~ msgstr ""

#~ msgid "Front end translation from Darknet into Relay module."
#~ msgstr ""

#~ msgid ""
#~ "Apply 8-bit quantization: here we skip"
#~ " the first conv layer, and dense "
#~ "layer which will both be executed "
#~ "in fp32 on the CPU."
#~ msgstr ""

#~ msgid "Perform graph packing to alter the data layout for tensorization."
#~ msgstr ""

#~ msgid ""
#~ "Perform constant folding to reduce "
#~ "number of operators (e.g. eliminate "
#~ "batch norm multiply)."
#~ msgstr ""

#~ msgid "Perform relay build to object file."
#~ msgstr ""

#~ msgid "Load the object file onto remote (FPGA device)."
#~ msgstr ""

#~ msgid "Generate graph executor, `m`."
#~ msgstr ""

#~ msgid "Perform image detection inference."
#~ msgstr ""

#~ msgid "We run detect on an downloaded image Download test image"
#~ msgstr ""

