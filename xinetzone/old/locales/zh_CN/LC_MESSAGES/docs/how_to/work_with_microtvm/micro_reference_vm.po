# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-05-27 12:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:1
msgid "microTVM 参考虚拟机"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:3
msgid "**原作者**: `[Andrew Reusch](areusch@octoml.ai)"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:5
msgid ""
"本教程解释如何启动 microTVM 参考虚拟机（Reference Virtual "
"Machines）。您可以使用它们在真实的物理硬件上进行开发，而不需要单独安装 microTVM 依赖项。当试图重现 microTVM "
"的行为时，比如在提交 bug 报告时，这些也特别有用。"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:7
msgid ""
"microTVM 允许 TVM 在 bare-metal 微控制器上构建和执行模型。microTVM 的目标是兼容各种 SoC 和运行时环境（即 "
"bare-metal、RTOS 等）。然而，需要一些稳定的软件环境来允许开发人员共享和重现错误和结果。microTVM "
"参考虚拟机旨在提供这种环境。"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:9
msgid "它是如何工作的"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:11
msgid ""
"没有虚拟机存储在 TVM 存储库中——相反，存储在 ``apps/microtvm/reference-vm`` 中的文件描述了如何使用 "
"[Vagrant][Vagrant] VM 构建工具构建虚拟机。"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:13
msgid "参考虚拟机分为两部分："
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:15
msgid ""
"Vagrant Base Box，它包含该平台的所有稳定依赖项。构建脚本存储在 ``apps/microtvm/reference-"
"vm/<platform>/base-box`` 中。TVM 提交者在平台的 \"stable\" 依赖项发生变化时运行这些程序，生成的 Base"
" Box 存储在 [Vagrant Cloud][Vagrant Cloud] 中。"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:16
msgid ""
"每个工作区 VM，用户通常使用 Base Box 作为起点构建它。构建脚本存储在 ``apps/microtvm/reference-"
"vm/<platform>``（除了 ``base-box``）。"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:18
msgid "设置 VM"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:20
msgid "安装的先决条件"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:22
msgid "需要最少的先决条件集："
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:24
msgid "[Vagrant][Vagrant]"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:25
msgid ""
"支持的虚拟机管理程序（**VirtualBox**、**Parallels** 或 **VMWare "
"Fusion/Workstation**）。[VirtualBox](https://www.virtualbox.org) "
"是建议的免费管理程序，但请注意 [VirtualBox Extension Pack](VirtualBox Extension Pack)  "
"是正确的 USB 转发所必需的。如果使用 VirtualBox，也可以考虑安装 [vbguest](https://github.com"
"/dotless-de/vagrant-vbguest) 插件。"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:26
msgid ""
"如果您的系统管理程序需要，可以使用 [Vagrant "
"提供程序插件](https://github.com/hashicorp/vagrant/wiki/Available-Vagrant-"
"Plugins#providers)（VMWare 请参阅[此处](https://www.vagrantup.com/vmware)）。"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:28
msgid "首次 boot"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:30
msgid "第一次使用 RVM（reference VM） 时，您需要在本地创建该 box，然后提供它。"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:40
msgid ""
"This command will take a couple of minutes to run and will require 4 to "
"5GB of storage on your machine. It does the following:"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:43
msgid ""
"Downloads the [microTVM base "
"box](https://app.vagrantup.com/tlcpack/boxes/microtvm) and clones it to "
"form a new VM specific to this TVM directory."
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:44
msgid ""
"Mounts your TVM directory (and, if using ``git-subtree``, the original "
"``.git`` repo) into the VM."
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:46
msgid ""
"Builds TVM and installs a Python virtualenv with the dependencies "
"corresponding with your TVM build."
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:53
msgid "Connect Hardware to the VM"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:56
msgid ""
"Next, you need to configure USB passthrough to attach your physical "
"development board to the virtual machine (rather than directly to your "
"laptop's host OS)."
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:59
msgid ""
"It's suggested you setup a device filter, rather than doing a one-time "
"forward, because often the device may reboot during the programming "
"process and you may, at that time, need to enable forwarding again. It "
"may not be obvious to the end user when this occurs. Instructions to do "
"that:"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:63
msgid "[VirtualBox](https://www.virtualbox.org/manual/ch03.html#usb-support)"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:64
msgid "[Parallels](https://kb.parallels.com/122993)"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:65
msgid ""
"[VMWare Workstation](https://docs.vmware.com/en/VMware-Workstation-"
"Pro/15.0/com.vmware.ws.using.doc/GUID-E003456F-"
"EB94-4B53-9082-293D9617CB5A.html)"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:68
msgid "Rebuilding TVM inside the Reference VM"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:71
msgid ""
"After the first boot, you'll need to ensure you keep the build, in "
"``$TVM_HOME/build-microtvm-zephyr``, up-to-date when you modify the C++ "
"runtime or checkout a different revision. You can either re-provision the"
" machine (``vagrant provision`` in the same directory you ran ``vagrant "
"up`` before) or manually rebuild TVM yourself."
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:76
msgid ""
"Remember: the TVM ``.so`` built inside the VM is different from the one "
"you may use on your host machine. This is why it's built inside the "
"special directory ``build-microtvm-zephyr``."
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:79
msgid "Logging in to the VM"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:82
msgid ""
"The VM should be available to your host only with the hostname "
"``microtvm``. You can SSH to the VM as follows:"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:89
msgid ""
"Then ``cd`` to the same path used on your host machine for TVM. For "
"example, on Mac:"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:96
msgid "Running tests"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:99
msgid "Once the VM has been provisioned, tests can executed using ``poetry``:"
msgstr ""

#: ../../../xin/docs/how_to/work_with_microtvm/micro_reference_vm.md:106
msgid ""
"If you do not have physical hardware attached, but wish to run the tests "
"using the local QEMU emulator running within the VM, run the following "
"commands instead:"
msgstr ""

#~ msgid ""
#~ "Click :ref:`here "
#~ "<sphx_glr_download_how_to_work_with_microtvm_micro_reference_vm.py>`"
#~ " to download the full example code"
#~ msgstr ""

#~ msgid "microTVM Reference Virtual Machines"
#~ msgstr ""

#~ msgid "**Author**: `Andrew Reusch <areusch@octoml.ai>`_"
#~ msgstr ""

#~ msgid ""
#~ "This tutorial explains how to launch "
#~ "microTVM Reference Virtual Machines. You "
#~ "can use these to develop on real"
#~ " physical hardware without needing to "
#~ "individually install the microTVM "
#~ "dependencies. These are also particularly "
#~ "useful when trying to reproduce behavior"
#~ " with microTVM, such as when filing"
#~ " bug reports."
#~ msgstr ""

#~ msgid ""
#~ "microTVM is the effort to allow "
#~ "TVM to build and execute models on"
#~ " bare-metal microcontrollers. microTVM aims"
#~ " to be compatible with a wide "
#~ "variety of SoCs and runtime environments"
#~ " (i.e. bare metal, RTOS, etc). "
#~ "However, some stable software environment "
#~ "is needed to allow developers to "
#~ "share and reproduce bugs and results."
#~ " The microTVM Reference Virtual Machines"
#~ " are intended to provide that "
#~ "environment."
#~ msgstr ""

#~ msgid "How it works"
#~ msgstr ""

#~ msgid ""
#~ "No Virtual Machines are stored in "
#~ "the TVM repository--instead, the files"
#~ " stored in ``apps/microtvm/reference-vm`` "
#~ "describe how to build VMs to the"
#~ " Vagrant_ VM builder tool."
#~ msgstr ""

#~ msgid "The Reference VMs are split into two parts:"
#~ msgstr ""

#~ msgid ""
#~ "A Vagrant Base Box, which contains "
#~ "all of the stable dependencies for "
#~ "that platform. Build scripts are stored"
#~ " in ``apps/microtvm/reference-vm/<platform>/base-"
#~ "box``. TVM committers run these when "
#~ "a platform's \"stable\" dependencies change,"
#~ " and the generated base boxes are "
#~ "stored in `Vagrant Cloud`_."
#~ msgstr ""

#~ msgid ""
#~ "A per-workspace VM, which users "
#~ "normally build using the Base Box "
#~ "as a starting point. Build scripts "
#~ "are stored in ``apps/microtvm/reference-"
#~ "vm/<platform>`` (everything except ``base-"
#~ "box``)."
#~ msgstr ""

#~ msgid "Setting up the VM"
#~ msgstr ""

#~ msgid "Installing prerequisites"
#~ msgstr ""

#~ msgid "A minimal set of prerequisites are needed:"
#~ msgstr ""

#~ msgid "`Vagrant <https://vagrantup.com>`__"
#~ msgstr ""

#~ msgid ""
#~ "A supported Virtual Machine hypervisor "
#~ "(**VirtualBox**, **Parallels**, or **VMWare "
#~ "Fusion/Workstation**). `VirtualBox "
#~ "<https://www.virtualbox.org>`__ is a suggested "
#~ "free hypervisor, but please note that"
#~ " the `VirtualBox Extension Pack`_ is "
#~ "required for proper USB forwarding. If"
#~ " using VirtualBox, also consider installing"
#~ " the `vbguest <https://github.com/dotless-de"
#~ "/vagrant-vbguest>`_ plugin."
#~ msgstr ""

#~ msgid ""
#~ "If required for your hypervisor, the "
#~ "`Vagrant provider plugin "
#~ "<https://github.com/hashicorp/vagrant/wiki/Available-Vagrant-"
#~ "Plugins#providers>`__ (or see `here "
#~ "<https://www.vagrantup.com/vmware>`__ for VMWare)."
#~ msgstr ""

#~ msgid "First boot"
#~ msgstr ""

#~ msgid ""
#~ "The first time you use a reference"
#~ " VM, you need to create the box"
#~ " locally and then provision it."
#~ msgstr ""

#~ msgid ""
#~ "Downloads the `microTVM base box`_ and"
#~ " clones it to form a new VM "
#~ "specific to this TVM directory."
#~ msgstr ""

#~ msgid ""
#~ "`VirtualBox <https://www.virtualbox.org/manual/ch03.html#usb-"
#~ "support>`__"
#~ msgstr ""

#~ msgid "`Parallels <https://kb.parallels.com/122993>`__"
#~ msgstr ""

#~ msgid ""
#~ "`VMWare Workstation <https://docs.vmware.com/en/VMware-"
#~ "Workstation-Pro/15.0/com.vmware.ws.using.doc/GUID-"
#~ "E003456F-EB94-4B53-9082-293D9617CB5A.html>`__"
#~ msgstr ""

#~ msgid ""
#~ ":download:`Download Python source code: "
#~ "micro_reference_vm.py <micro_reference_vm.py>`"
#~ msgstr ""

#~ msgid ""
#~ ":download:`Download Jupyter notebook: "
#~ "micro_reference_vm.ipynb <micro_reference_vm.ipynb>`"
#~ msgstr ""

#~ msgid ""
#~ "`Gallery generated by Sphinx-Gallery "
#~ "<https://sphinx-gallery.github.io>`_"
#~ msgstr ""

