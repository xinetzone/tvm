# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-25 10:20+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:20002
msgid "1. microTVM CLI 工具"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:20003
msgid "**Author**: [Mehrdad Hessar](https://github.com/mehrdadh)"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:20005
msgid ""
"本教程介绍了如何为微型设备编译小模型，构建在 Zephyr 平台上执行此模型的程序，使用 `tvmc micro` "
"命令刷写程序并运行该模型。在开始本教程之前，您需要安装 Python 和 Zephyr 依赖项。"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:30002
msgid "安装 microTVM Python 依赖"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:30004
msgid "TVM 不包括用于 Python 串行通信的软件包，因此在使用 microTVM 之前，必须先安装。还需要 TFLite 来加载模型。"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:50002
msgid "安装 Zephyr"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:70002
msgid "使用 TVMC Micro"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:70004
msgid ""
"TVMC 是作为 TVM Python 软件包的一部分安装的命令行工具。访问此软件包取决于您的机器设置。在许多情况下，您可以直接使用 "
"``tvmc`` 命令。或者，如果您的 Python 路径中有 TVM 作为 Python 模块，您可以使用 ``python -m "
"tvm.driver.tvmc`` 命令访问此驱动程序。本教程将简单地使用名为 ``tvmc`` 的 TVMC 命令。"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:70008
msgid "要检查您的机器上是否安装了 TVMC 命令，您可以运行："
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:70014
msgid ""
"要为 MicroTVM 编译模型，使用 ``tvmc compile`` 子命令。此命令的输出将与  ``tvmc micro`` "
"子命令一起在接下来的步骤中使用。您可以使用以下命令检查 TVMC Micro 的可用性："
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:70020
msgid ""
"您可以使用 ``tvmc micro`` 执行的主要任务包括 ``create``、``build`` 和 "
"``flash``。要了解特定子命令下的选项，请使用 ``tvmc micro <subcommand> "
"--help``。在本教程中，我们将使用每个子命令。"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:80002
msgid "获取微模型"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:80004
msgid ""
"在本教程中，将使用 tflite micro 中的 Micro Speech 模型。Micro Speech "
"是一种深度可分离卷积层模型，用于识别语音中的关键词。"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:80006
msgid "在本教程中，将使用 tflite 格式的模型。"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:90002
msgid "将 TFLite 模型编译为模型库格式。"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:90004
msgid ""
"模型库格式（Model Library Format，简写为 MLF）是 TVM 为 micro 目标提供的输出格式。MLF 是 "
"tarball，其中包含 TVM 编译器输出的每个部分的文件，可以在 TVM 环境之外的 micro "
"目标上使用。了解更多关于“模型库格式”的信息，请参考 [](model_library_format)。"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:90006
msgid ""
"在这里，我们为 ``qemu_x86`` Zephyr板生成 MLF 文件。您可以选择使用 `aot` 或 `graph` "
"执行器类型来运行本教程，但我们建议在微小的 TVM 目标中使用 `aot`，因为 `aot` 使用静态内存分配的预先编译。要为 "
"``micro_speech`` tflite 模型生成 MLF 输出，请执行以下操作："
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:90019
msgid ""
"这将生成包含 TVM 编译器输出文件的 ``model.tar`` 文件。要针对不同的 Zephyr 设备运行此命令，您需要更新 "
"``target``。例如，对于 ``nrf5340dk_nrf5340_cpuapp`` 板，目标是 ``--target='c "
"-keys=cpu -model=nrf5340dk'``。"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:100002
msgid "使用模型库格式创建 Zephyr 项目。"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:100004
msgid ""
"为了生成 Zephyr 项目，使用 TVM Micro 子命令 ``create``。将 MLF 格式和项目路径传递给 ``create`` "
"子命令，以及项目选项。每个平台（Zephyr/Arduino）的项目选项在其项目 API 服务器文件中定义。要为不同的 Zephyr 板构建 "
"Zephyr 项目，请更改 ``zephyr_board`` 项目选项。要生成 Zephyr 项目，请运行："
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:100014
msgid ""
"这将为 ``qemu_x86`` Zephyr板生成 ``Host-Driven`` Zephyr 项目。在 Host-Driven "
"模板项目中，Graph 执行器将在主机上运行，并通过使用 RPC 机制向设备发出命令，在 Zephyr 设备上执行模型。阅读有关[Host-"
"Driven Execution](https://tvm.apache.org/docs/arch/microtvm_design.html"
"#host-driven-execution) 的更多信息。"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:100016
msgid "要获取有关TVMC Micro ``create`` 子命令的更多信息："
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:110002
msgid "使用 TVMC Micro 构建和 Flash Zephyr 项目"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:110004
msgid ""
"下一步是构建 Zephyr 项目，其中包括运行小型模型所生成的 TVM 代码、在主机驱动模式下运行模型的 Zephyr 模板代码以及 TVM "
"运行时源代码/头文件。要构建该项目："
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:110012
msgid "这将在 ``project`` 目录中构建项目，并在 ``project/build`` 下生成二进制文件。"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:110015
msgid ""
"接下来，我们将 Zephyr 二进制文件烧录(flash)到 Zephyr 设备上。对于 ``qemu_x86`` Zephyr "
"开发板，此步骤实际上不会执行任何操作，因为将使用 QEMU，但对于物理硬件，您需要执行此步骤。"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:120002
msgid "在 Micro Target 运行微模型"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:120004
msgid ""
"烧录设备后，编译的模型和 TVM RPC 服务器被编程到设备上。Zephyr 开发板正在等待主机打开通信通道。MicroTVM "
"设备通常使用串行通信（UART）进行通信。使用 TVMC 运行已烧录的模型，我们使用 ``tvmc run`` 子命令并传递 ``--device"
" micro`` 来指定设备类型。该命令将打开通信通道，在主机上使用 ``Graph Executor`` "
"设置输入值并在设备上运行完整模型。然后它从设备获取输出。"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_tvmc.ipynb:130002
msgid "具体来说，此命令将模型的输入设置为全为 1，并显示输出的四个值及其索引。"
msgstr ""

#~ msgid ""
#~ "Click :ref:`here "
#~ "<sphx_glr_download_how_to_work_with_microtvm_micro_tvmc.py>` to"
#~ " download the full example code"
#~ msgstr ""

#~ msgid "Executing a Tiny Model with TVMC Micro"
#~ msgstr ""

#~ msgid "**Author**: `Mehrdad Hessar <https://github.com/mehrdadh>`_"
#~ msgstr ""

#~ msgid ""
#~ "This tutorial explains how to compile"
#~ " a tiny model for a micro "
#~ "device, build a program on Zephyr "
#~ "platform to execute this model, flash"
#~ " the program and run the model "
#~ "all using `tvmc micro` command."
#~ msgstr ""

#~ msgid ""
#~ "This tutorial is explaining using TVMC"
#~ " Mirco on Zephyr platform. You need"
#~ " to install Zephyr dependencies before "
#~ "processing with this tutorial. Alternatively,"
#~ " you can run this tutorial in "
#~ "one of the following ways which "
#~ "has Zephyr depencencies already installed."
#~ msgstr ""

#~ msgid ""
#~ "Use `microTVM Reference Virtual Machines "
#~ "<https://tvm.apache.org/docs/how_to/work_with_microtvm/micro_reference_vm.html"
#~ "#sphx-glr-how-to-work-with-"
#~ "microtvm-micro-reference-vm-py>`_."
#~ msgstr ""

#~ msgid ""
#~ "Use QEMU docker image provided by "
#~ "TVM. Following these you will download"
#~ " and login to the docker image:"
#~ msgstr ""

#~ msgid ""
#~ "TVMC is a command-line tool which"
#~ " is installed as a part of TVM"
#~ " Python packages. Accessing this package"
#~ " varies based on your machine setup."
#~ " In many cases, you can use the"
#~ " ``tvmc`` command directly. Alternatively, "
#~ "if you have TVM as a Python "
#~ "module on your ``$PYTHONPATH``, you can"
#~ " access this driver with ``python -m"
#~ " tvm.driver.tvmc`` command. This tutorial "
#~ "will use TVMC command as ``tvmc`` "
#~ "for simplicity."
#~ msgstr ""

#~ msgid ""
#~ "To compile a model for microtvm we"
#~ " use ``tvmc compile`` subcommand. The "
#~ "output of this command is used in"
#~ " next steps with ``tvmc micro`` "
#~ "subcommands. You can check the "
#~ "availability of TVMC Micro using:"
#~ msgstr ""

#~ msgid ""
#~ "The main tasks that you can "
#~ "perform using ``tvmc micro`` are "
#~ "``create``, ``build`` and ``flash``. To "
#~ "read about specific options under a "
#~ "givern subcommand, use ``tvmc micro "
#~ "<subcommand> --help``. We will use each"
#~ " subcommand in this tutorial."
#~ msgstr ""

#~ msgid ""
#~ "For this tutorial, we will use "
#~ "Magic Wand model from tflite micro. "
#~ "Magic Wand is a Depthwise Convolution"
#~ " Layer model which recognizes gestures "
#~ "with an accelerometer."
#~ msgstr ""

#~ msgid ""
#~ "Model Library Format (MLF) is an "
#~ "output format that TVM provides for "
#~ "micro targets. MLF is a tarball "
#~ "containing a file for each piece "
#~ "of the TVM compiler output which "
#~ "can be used on micro targets "
#~ "outside TVM environment. Read more about"
#~ " `Model Library Format "
#~ "<https://tvm.apache.org/docs//arch/model_library_format.html>`_."
#~ msgstr ""

#~ msgid ""
#~ "Here, we generate a MLF file for"
#~ " ``qemu_x86`` Zephyr board. To generate "
#~ "MLF output for the ``magic_wand`` tflite"
#~ " model:"
#~ msgstr ""

#~ msgid ""
#~ "This will generate a ``model.tar`` file"
#~ " which contains TVM compiler output "
#~ "files. To run this command for a"
#~ " different Zephyr device, you need to"
#~ " update ``target``. For instance, for "
#~ "``nrf5340dk_nrf5340_cpuapp`` board the target "
#~ "is ``--target='c -keys=cpu -link-params=0 "
#~ "-model=nrf5340dk'``."
#~ msgstr ""

#~ msgid ""
#~ "To generate a Zephyr project we "
#~ "use TVM Micro subcommand ``create``. We"
#~ " pass the MLF format and the "
#~ "path for the project to ``create`` "
#~ "subcommand along with project options. "
#~ "Project options for each platform "
#~ "(Zephyr/Arduino) are defined in their "
#~ "Project API server file. To generate "
#~ "Zephyr project, run:"
#~ msgstr ""

#~ msgid ""
#~ "This will generate a ``Host-Driven`` "
#~ "Zephyr project for ``qemu_x86`` Zephyr "
#~ "board. In Host-Driven template project,"
#~ " the Graph Executor will run on "
#~ "host and perform the model execution "
#~ "on Zephyr device by issuing commands "
#~ "to the device using an RPC "
#~ "mechanism. Read more about `Host-Driven"
#~ " Execution "
#~ "<https://tvm.apache.org/docs/arch/microtvm_design.html#host-"
#~ "driven-execution>`_."
#~ msgstr ""

#~ msgid ""
#~ "Next step is to build the Zephyr"
#~ " project which includes TVM generated "
#~ "code for running the tiny model, "
#~ "Zephyr template code to run a "
#~ "model in Host-Driven mode and TVM"
#~ " runtime source/header files. To build "
#~ "the project:"
#~ msgstr ""

#~ msgid ""
#~ "This will build the project in "
#~ "``project`` directory and generates binary "
#~ "files under ``project/build``. To build "
#~ "Zephyr project for a different Zephyr"
#~ " board, change ``zephyr_board`` project "
#~ "option."
#~ msgstr ""

#~ msgid ""
#~ "Next, we flash the Zephyr binary "
#~ "file to Zephyr device. For ``qemu_x86``"
#~ " Zephyr board this step does not "
#~ "actually perform any action since QEMU"
#~ " will be used, however you need "
#~ "this step for physical hardware."
#~ msgstr ""

#~ msgid ""
#~ "After flashing the device, the compiled"
#~ " model and TVM RPC server are "
#~ "programmed on the device. The Zephyr "
#~ "board is waiting for host to open"
#~ " a communication channel. MicroTVM devices"
#~ " typicall communicate using a serial "
#~ "communication (UART). To run the flashed"
#~ " model on the device using TVMC, "
#~ "we use ``tvmc run`` subcommand and "
#~ "pass ``--device micro`` to specify the"
#~ " device type. This command will open"
#~ " a communication channel, set input "
#~ "values using ``Graph Executor`` on host"
#~ " and run full model on the "
#~ "device. Then it gets output from "
#~ "the device."
#~ msgstr ""

#~ msgid "1. microTVM CLI Tool"
#~ msgstr ""

#~ msgid ""
#~ "This tutorial explains how to compile"
#~ " a tiny model for a micro "
#~ "device, build a program on Zephyr "
#~ "platform to execute this model, flash"
#~ " the program and run the model "
#~ "all using `tvmc micro` command. You "
#~ "need to install python and Zephyr "
#~ "dependencies before processing with this "
#~ "tutorial."
#~ msgstr ""

#~ msgid "Install microTVM Python dependencies"
#~ msgstr ""

#~ msgid ""
#~ "TVM does not include a package for"
#~ " Python serial communication, so we "
#~ "must install one before using microTVM."
#~ " We will also need TFLite to "
#~ "load models."
#~ msgstr ""

#~ msgid "Install Zephyr"
#~ msgstr ""

#~ msgid "Using TVMC Micro"
#~ msgstr ""

#~ msgid ""
#~ "TVMC is a command-line tool which"
#~ " is installed as a part of TVM"
#~ " Python packages. Accessing this  package"
#~ " varies based on your machine setup."
#~ " In many cases, you can use the"
#~ " ``tvmc`` command directly.  Alternatively, "
#~ "if you have TVM as a Python "
#~ "module on your ``$PYTHONPATH``, you can"
#~ " access this  driver with ``python -m"
#~ " tvm.driver.tvmc`` command. This tutorial "
#~ "will use TVMC command as  ``tvmc`` "
#~ "for simplicity."
#~ msgstr ""

#~ msgid ""
#~ "To check if you have TVMC command"
#~ " installed on your machine, you can"
#~ " run:"
#~ msgstr ""

#~ msgid ""
#~ "To compile a model for microtvm we"
#~ " use ``tvmc compile`` subcommand. The "
#~ "output of this command  is used in"
#~ " next steps with ``tvmc micro`` "
#~ "subcommands. You can check the "
#~ "availability of TVMC Micro using:"
#~ msgstr ""

#~ msgid ""
#~ "The main tasks that you can "
#~ "perform using ``tvmc micro`` are "
#~ "``create``, ``build`` and ``flash``.  To "
#~ "read about specific options under a "
#~ "givern subcommand, use  ``tvmc micro "
#~ "<subcommand> --help``. We will use each"
#~ " subcommand in this tutorial."
#~ msgstr ""

#~ msgid "Obtain a Tiny Model"
#~ msgstr ""

#~ msgid ""
#~ "For this tutorial, we will use "
#~ "Micro Speech model from tflite micro."
#~ " Micro Speech is a  Depthwise "
#~ "Convolution Layer model to recognize "
#~ "keywords in speech."
#~ msgstr ""

#~ msgid "For this tutorial we will be using the model in tflite format."
#~ msgstr ""

#~ msgid "Compiling a TFLite model to a Model Library Format"
#~ msgstr ""

#~ msgid ""
#~ "Model Library Format (MLF) is an "
#~ "output format that TVM provides for "
#~ "micro targets. MLF is a tarball  "
#~ "containing a file for each piece "
#~ "of the TVM compiler output which "
#~ "can be used on micro targets "
#~ "outside  TVM environment. Read more "
#~ "about `Model Library Format "
#~ "<model_library_format>`."
#~ msgstr ""

#~ msgid ""
#~ "Here, we generate a MLF file for"
#~ " ``qemu_x86`` Zephyr board. You can "
#~ "chooses `aot` or `graph` executor type"
#~ "  to run this tutorial, however, we"
#~ " recommend to use `aot` for microTVM"
#~ " targets since `aot` uses ahead of"
#~ " time  compilation with static memory "
#~ "allocation. To generate MLF output for"
#~ " the ``micro_speech`` tflite model:"
#~ msgstr ""

#~ msgid ""
#~ "This will generate a ``model.tar`` file"
#~ " which contains TVM compiler output "
#~ "files. To run this command for  a"
#~ " different Zephyr device, you need to"
#~ " update ``target``. For instance, for "
#~ "``nrf5340dk_nrf5340_cpuapp`` board  the target "
#~ "is ``--target='c -keys=cpu -model=nrf5340dk'``."
#~ msgstr ""

#~ msgid "Create a Zephyr Project Using Model Library Format"
#~ msgstr ""

#~ msgid ""
#~ "To generate a Zephyr project we "
#~ "use TVM Micro subcommand ``create``. We"
#~ " pass the MLF format and the "
#~ "path  for the project to ``create`` "
#~ "subcommand along with project options. "
#~ "Project options for each  platform "
#~ "(Zephyr/Arduino) are defined in their "
#~ "Project API server file. To build  "
#~ "Zephyr project for a different Zephyr"
#~ " board, change ``zephyr_board`` project "
#~ "option.  To generate Zephyr project, "
#~ "run:"
#~ msgstr ""

#~ msgid ""
#~ "This will generate a ``Host-Driven`` "
#~ "Zephyr project for ``qemu_x86`` Zephyr "
#~ "board. In Host-Driven template project,"
#~ "  the Graph Executor will run on "
#~ "host and perform the model execution "
#~ "on Zephyr device by issuing commands "
#~ "to the  device using an RPC "
#~ "mechanism. Read more about [Host-Driven"
#~ " Execution](https://tvm.apache.org/docs/arch/microtvm_design.html"
#~ "#host-driven-execution)."
#~ msgstr ""

#~ msgid "To get more information about TVMC Micro ``create`` subcommand:"
#~ msgstr ""

#~ msgid "Build and Flash Zephyr Project Using TVMC Micro"
#~ msgstr ""

#~ msgid ""
#~ "Next step is to build the Zephyr"
#~ " project which includes TVM generated "
#~ "code for running the tiny model, "
#~ "Zephyr  template code to run a "
#~ "model in Host-Driven mode and TVM"
#~ " runtime source/header files. To build "
#~ "the project:"
#~ msgstr ""

#~ msgid ""
#~ "This will build the project in "
#~ "``project`` directory and generates binary "
#~ "files under ``project/build``."
#~ msgstr ""

#~ msgid ""
#~ "Next, we flash the Zephyr binary "
#~ "file to Zephyr device. For ``qemu_x86``"
#~ " Zephyr board this step does not  "
#~ "actually perform any action since QEMU"
#~ " will be used, however you need "
#~ "this step for physical hardware."
#~ msgstr ""

#~ msgid "Run Tiny Model on Micro Target"
#~ msgstr ""

#~ msgid ""
#~ "After flashing the device, the compiled"
#~ " model and TVM RPC server are "
#~ "programmed on the device.  The Zephyr"
#~ " board is waiting for host to "
#~ "open a communication channel. MicroTVM "
#~ "devices typicall communicate  using a "
#~ "serial communication (UART). To run the"
#~ " flashed model on the device using"
#~ " TVMC, we use ``tvmc run`` subcommand"
#~ "  and pass ``--device micro`` to "
#~ "specify the device type. This command"
#~ " will open a communication channel, "
#~ "set input  values using ``Graph "
#~ "Executor`` on host and run full "
#~ "model on the device. Then it gets"
#~ " output from the device."
#~ msgstr ""

#~ msgid ""
#~ "Specifically, this command sets the "
#~ "input of the model to all ones "
#~ "and shows the four values of the"
#~ " output with their indices."
#~ msgstr ""

