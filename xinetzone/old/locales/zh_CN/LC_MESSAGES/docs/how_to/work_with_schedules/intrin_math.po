# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-09 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:20003
msgid "Intrinsics and Math Functions"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:20004
msgid "**Author**: [Tianqi Chen](https://tqchen.github.io)"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:20006
msgid ""
"While TVM supports basic arithmetic operations. In many cases usually we "
"will need more complicated builtin functions. For example :code:`exp` to "
"take the exponential of the function."
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:20010
msgid ""
"These functions are target system dependent and may have different names "
"of different target platforms. In this tutorial, we will learn how we can"
" invoke these target specific functions, and how we can unify the "
"interface via TVM's intrinsic API."
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:40002
msgid "Direct Declare Extern Math Call"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:40003
msgid ""
"The most straight-forward way to call target specific function is via "
"extern function call construct in tvm. In the following example, we use "
":any:`tvm.tir.call_pure_extern` to call :code:`__expf` function, which is"
" only available under CUDA."
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:60002
msgid "Unified Intrinsic Call"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:60003
msgid ""
"The above code verifies that direct external call can be used to call "
"into device specific functions. However, the above way only works for "
"CUDA target with float type. Ideally, we want to write same code for any "
"device and any data type."
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:60008
msgid ""
"TVM intrinsic provides the user a mechanism to achieve this, and this is "
"the recommended way to solve the problem. The following code use te.exp "
"instead, which create an intrinsic call :py::func:`tvm.te.exp` to do the "
"exponential."
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:80002
msgid ""
"We can find that the code works for both CUDA and opencl. The same te.exp"
" can also be used for float64 data types."
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:100002
msgid "Intrinsic Lowering Rule"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:100003
msgid ""
"When :py:func:`tvm.te.exp` is called, TVM creates an intrinsic Call Expr."
" TVM uses transformation rules to transform the intrinsic call to device "
"specific extern calls."
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:100007
msgid ""
"TVM also allows user to customize the rules during runtime. The following"
" example customizes CUDA lowering rule for :code:`exp`."
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:120002
msgid ""
"Register the rule to TVM with override option to override existing rule. "
"Notice the difference between the printed code from previous one: our new"
" rule uses math function :code:`expf` instead of fast math version "
":code:`__expf`."
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:140002
msgid "Add Your Own Intrinsic"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:140003
msgid ""
"If there is an intrinsic that is not provided by TVM. User can easily add"
" new intrinsic by using the intrinsic rule system. The following example "
"add an intrinsic :code:`mylog` to the system."
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:160002
msgid "Summary"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:160003
msgid "TVM can call extern target dependent math function."
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:160004
msgid "Use intrinsic to defined a unified interface for the functions."
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:160005
msgid "For more intrinsics available in tvm, take a look at :any:`tvm.tir`"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/intrin_math.ipynb:160006
msgid "You can customize the intrinsic behavior by defining your own rules."
msgstr ""

#~ msgid ""
#~ ":download:`Download Python source code: "
#~ "intrin_math.py <intrin_math.py>`"
#~ msgstr ""

#~ msgid ""
#~ ":download:`Download Jupyter notebook: "
#~ "intrin_math.ipynb <intrin_math.ipynb>`"
#~ msgstr ""

#~ msgid ""
#~ "`Gallery generated by Sphinx-Gallery "
#~ "<https://sphinx-gallery.github.io>`_"
#~ msgstr ""

#~ msgid ""
#~ "Click :ref:`here "
#~ "<sphx_glr_download_how_to_work_with_schedules_intrin_math.py>` "
#~ "to download the full example code"
#~ msgstr ""

#~ msgid "**Author**: `Tianqi Chen <https://tqchen.github.io>`_"
#~ msgstr ""

#~ msgid ""
#~ "These functions are target system "
#~ "dependent and may have different names"
#~ " of different target platforms. In "
#~ "this tutorial, we will learn how "
#~ "we can invoke these target specific "
#~ "functions, and how we can unify "
#~ "the interface via tvm's intrinsic API."
#~ msgstr ""

