# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-09 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:10002
msgid "外部张量函数"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:10003
msgid "**原作者**: [Tianqi Chen](https://tqchen.github.io)"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:10005
msgid ""
"虽然 TVM 支持透明的代码生成，但有时将手动编写的代码合并到 pipeline 中也是有帮助的。例如，可能想要使用 cuDNN "
"来处理一些卷积核，并定义其余的阶段。"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:10007
msgid ""
"TVM本身就支持这些黑盒函数调用。具体来说，TVM 支持所有与 DLPack 兼容的张量函数。这意味着可以调用任何带有 POD "
"类型（pointer、int、float）或指向 DLTensor 的指针作为参数的函数。"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:10010
msgid "这里需要设定 cmake："
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:30002
msgid "使用 Extern 张量函数"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:30004
msgid ""
"在下面的例子中，使用 {any}`te.extern` 添加外部数组函数调用。在 extern "
"调用中，声明输出张量的形状。在第二个参数中，提供了输入列表。"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:30006
msgid "用户需要提供描述如何计算结果的函数。`compute` 函数接受输入的符号占位符列表和输出的符号占位符列表，并返回正在执行的语句。"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:30008
msgid ""
"在本例中，只需调用已注册的 TVM 函数，该函数调用 CBLAS 回调。TVM 不控制 extern "
"数组函数的内部，并将其视为黑盒。可以进一步混合可调度的 TVM 调用，为结果添加 bias 项。"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:50002
msgid "验证结果"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:50004
msgid "可以验证结果是否符合期望。"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:70002
msgid "封装 Extern Contrib"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:70004
msgid "TVM 还为有用的 extern 调用提供了 extern contrib 封装器，下面一行与前面的示例等价。"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:90002
msgid "Hook Python 函数作为 Extern"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:90004
msgid "因为可以在 TVM 中调用任何 PackedFunc。所以可以使用 extern 函数回调到 python。"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:90006
msgid ""
"下面的例子注册了 python 函数到 TVM 运行时系统，并使用它来完成计算的一个阶段。这使得 TVM "
"更加灵活。例如，可以插入前端回调来检查中间结果，或者将定制代码与 TVM 混合使用。"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:110002
msgid "小结"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:110004
msgid "TVM 通过 {any}`te.extern` 调用外部张量函数"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:110005
msgid "使用 contrib 包装的外部张量调用的简短语法糖。"
msgstr ""

#: ../../xin/docs/how_to/work_with_schedules/extern_op.ipynb:110006
msgid "可以将前端函数 hook 为外部张量回调函数。"
msgstr ""

#~ msgid ":download:`Download Python source code: extern_op.py <extern_op.py>`"
#~ msgstr ""

#~ msgid ""
#~ ":download:`Download Jupyter notebook: "
#~ "extern_op.ipynb <extern_op.ipynb>`"
#~ msgstr ""

#~ msgid ""
#~ "`Gallery generated by Sphinx-Gallery "
#~ "<https://sphinx-gallery.github.io>`_"
#~ msgstr ""

#~ msgid ""
#~ "Click :ref:`here "
#~ "<sphx_glr_download_how_to_work_with_schedules_extern_op.py>` to"
#~ " download the full example code"
#~ msgstr ""

#~ msgid "External Tensor Functions"
#~ msgstr ""

#~ msgid "**Author**: `Tianqi Chen <https://tqchen.github.io>`_"
#~ msgstr ""

#~ msgid ""
#~ "While TVM supports transparent code "
#~ "generation, sometimes it is also helpful"
#~ " to incorporate manual written code "
#~ "into the pipeline. For example, we "
#~ "might want to use cuDNN for some"
#~ " of the convolution kernels and "
#~ "define the rest of the stages."
#~ msgstr ""

#~ msgid ""
#~ "TVM supports these black box function"
#~ " calls natively. Specfically, TVM support"
#~ " all the tensor functions that are"
#~ " DLPack compatible. Which means we "
#~ "can call any function with POD "
#~ "types(pointer, int, float) or pointer to"
#~ " DLTensor as argument."
#~ msgstr ""

#~ msgid "Use Extern Tensor Function"
#~ msgstr ""

#~ msgid ""
#~ "In the example below, we use "
#~ ":any:`te.extern` to add an extern array"
#~ " function call. In the extern call,"
#~ " we declare the shape of output "
#~ "tensors. In the second argument we "
#~ "provide the list of inputs."
#~ msgstr ""

#~ msgid ""
#~ "User will need to provide a "
#~ "function describing how to compute the"
#~ " result. The compute function takes "
#~ "list of symbolic placeholder for the "
#~ "inputs, list of symbolic placeholder for"
#~ " the outputs and returns the "
#~ "executing statement."
#~ msgstr ""

#~ msgid ""
#~ "In this case we simply call a "
#~ "registered TVM function, which invokes a"
#~ " CBLAS call. TVM does not control "
#~ "internal of the extern array function"
#~ " and treats it as blackbox. We "
#~ "can further mix schedulable TVM calls"
#~ " that add a bias term to the"
#~ " result."
#~ msgstr ""

#~ msgid "Verify the Result"
#~ msgstr ""

#~ msgid "We can verify that the result matches what we expected."
#~ msgstr ""

#~ msgid "Extern Contrib Wrappers"
#~ msgstr ""

#~ msgid ""
#~ "TVM also provide extern contrib wrappers"
#~ " to useful extern calls, the "
#~ "following line is equivalent to the "
#~ "previous example."
#~ msgstr ""

#~ msgid "Hook Python Function as Extern"
#~ msgstr ""

#~ msgid ""
#~ "Since we can call into any "
#~ "PackedFunc in TVM. We can use the"
#~ " extern function to callback into "
#~ "python."
#~ msgstr ""

#~ msgid ""
#~ "The following example registers a python"
#~ " function into TVM runtime system and"
#~ " use it to complete one stage "
#~ "of the computation. This makes TVM "
#~ "much more flexible. For example, we "
#~ "can insert front-end callbacks to "
#~ "inspect the intermediate results or mix"
#~ " customized code with TVM."
#~ msgstr ""

#~ msgid "Summary"
#~ msgstr ""

#~ msgid "TVM calls extern tensor function via :any:`te.extern`"
#~ msgstr ""

#~ msgid "Use contrib wrappers for short sugars of extern tensor calls."
#~ msgstr ""

#~ msgid "We can hook front-end function as extern tensor callbacks."
#~ msgstr ""

