# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-09-05 09:32+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:19
msgid "Setup RPC System"
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:21
msgid ""
"Remote procedure call (RPC) is a very important and useful feature of "
"Apache TVM, it allows us to run compiled Neural Network (NN) models on "
"the real hardware without need to touch the remote device, the output "
"result will be passed back automatically through network."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:23
msgid ""
"By eliminating the manual work like, dumping input data to file, copying "
"the exported NN model to remote device, setuping the device user "
"environment, copying the output result to host development environment, "
"RPC improve the development efficiency extremely."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:25
msgid ""
"In addition, because only the execution part of the compiled NN model is "
"run on the remote device, all other parts are run on host development "
"environment, so any Python packages can be used to do the preprocess and "
"postprocess works."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:27
msgid "RPC is very helpful in below 2 situations"
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:29
msgid "**Hardware resources are limited**"
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:31
msgid ""
"RPC’s queue and resource management mechanism can make the hardware "
"devices serve many developers and test jobs to run the compiled NN models"
" correctly."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:33
msgid "**Early-stage end to end evaluation**"
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:35
msgid ""
"Except the compiled NN model, all other parts are executed on the host "
"development environment, so the complex preprocess or postprocess can be "
"implemented easily."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:39
msgid "Suggested Architecture"
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:41
msgid ""
"Apache TVM RPC contains 3 tools, RPC tracker, RPC proxy, and PRC server. "
"The RPC server is the necessary one, an RPC system can work correctly "
"without RPC proxy and RPC tracker. RPC proxy is needed when you can’t "
"access the RPC server directly. RPC tracker is strongly suggested to be "
"added in your RPC system, because it provides many useful features, e.g.,"
" queue capability, multiple RPC servers management, manage RPC server "
"through key instead of IP address."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:47
msgid ""
"As above figure shown, because there aren’t physical connection channels "
"between machine A and machine C, D, so we set up a RPC proxy on machine "
"B. The RPC tracker manage a request queue per RPC key, each user can "
"request an RPC server from RPC tracker by a RPC key at anytime, if there "
"is a idle RPC server with the same RPC key, then RPC tracker assign the "
"RPC server to the user, if there isn’t a idle RPC server for the moment, "
"the request will be put into the request queue of that RPC key, and check"
" for it later."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:51
msgid "Setup RPC Tracker and RPC Proxy"
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:53
msgid ""
"In general, RPC tracker and RPC proxy only need to be run on host "
"machine, e.g., development server or PC, they needn't depend on any "
"enironment of device machine, so the only work need to do for setting up "
"them is executing below commands on the corresponding machine after "
"installing Apache TVM according to the official document "
"`<https://tvm.apache.org/docs/install/index.html>`_."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:55
msgid "RPC Tracker"
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:62
msgid "RPC Proxy"
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:69
msgid ""
"Please modify the *RPC_TRACKER_IP*, *RPC_TRACKER_PORT*, *RPC_PROXY_IP*, "
"and the port numbers in above commands according to your concrete "
"environment, the option ``port-end`` can be used to avoid the service "
"start with an unexpected port number, which may cause other service can't"
" be connected correctly, this is important especially for auto testing "
"system."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:73
msgid "Setup RPC Server"
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:75
msgid ""
"In our community, there is multiple RPC server implementations, e.g., "
"``apps/android_rpc``, ``apps/cpp_rpc``, ``apps/ios_rpc``, below content "
"only focus on the Python version RPC server which is implemented by "
"``python/tvm/exec/rpc_server.py``, for the setup instruction of other "
"version RPC server please refer to the document of its corresponding "
"directory."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:77
msgid ""
"RPC server need to be run on device machine, and it usually will depend "
"on xPU driver, the enhanced TVM runtime with xPU support, and other "
"libraries, so please setup the dependent components first, e.g., install "
"the KMD driver, ensure the required dynamic libraries can be found from "
"environment variable ``LD_LIBRARY_PATH``."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:79
msgid ""
"If the required compilation environment can be setup on your device "
"machine, i.e., you needn't to do the cross compilation, then just follow "
"the instruction of "
"`<https://tvm.apache.org/docs/install/from_source.html>`_ to compile the "
"TVM runtime and directly jump to the step :ref:`launch-rpc-server`."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:82
msgid "1. Cross Compile TVM Runtime"
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:84
msgid ""
"We use CMake to manage the compile process, for cross compilation, CMake "
"need a toolchain file to get the required information, so you need to "
"prepare this file according to your device platform, below is a example "
"for the device machine which CPU is 64bit ARM architecture and the "
"operating system is Linux."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:100
msgid ""
"After executing commands like something below under the root directory of"
" TVM repository, the runtime will be cross compiled successfully, please "
"enable other needed options in file ``config.cmake`` according to your "
"concrete requirement."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:119
msgid "2. Pack and Deploy to Device Machine"
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:121
msgid ""
"Pack the Python version RPC server through the commands like something "
"below."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:129
msgid ""
"Then copy the compress package ``tvm_runtime.tar.gz`` to your concrete "
"device machine, and setting the environment variable ``PYTHONPATH`` "
"correctly through the commands like something below on your device "
"machine."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:140
msgid "3. Launch RPC Server"
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:142
msgid ""
"The RPC server can be launched on your device machine through the "
"commands like something below, please modify the *RPC_TRACKER_IP*, "
"*RPC_TRACKER_PORT*, *RPC_PROXY_IP*, *RPC_PROXY_PORT*, and *RPC_KEY* "
"according to your concrete environment."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:153
msgid "Validate RPC System"
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:159
msgid ""
"Through the above command, we can query all available RPC servers and the"
" queue status, if you have 3 RPC servers that connected to the RPC "
"tracker through RPC proxy, the output should be something like below."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:181
msgid "Troubleshooting"
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:184
msgid ""
"1. The lack of ``numpy`` on device machine caused the RPC server can't be"
" launched."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:186
msgid ""
"The package ``numpy`` is imported in some Python files which RPC server "
"dependent on, and eliminating the import relationship is difficult, for "
"some devices cross compiling ``numpy`` is very hard to do too."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:188
msgid ""
"But acturally the TVM runtime doesn't really dependent on ``numpy``, so a"
" very simple workaround is create a dummy ``numpy``, just need to copy "
"the below content into a file named ``numpy.py`` and place it into "
"directory like ``/usr/local/lib/python3.8/site-packages``."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:243
msgid ""
"2. The lack of ``cloudpickle`` on device machine caused the RPC server "
"can't be launched."
msgstr ""

#: ../../doc/docs/how_to/dev/setup_rpc_system.rst:245
msgid ""
"Because ``cloudpickle`` package is a pure Python package, so just copying"
" it from other machine to the directory like ``/usr/local/lib/python3.8"
"/site-packages`` of the device machine will resolve the problem."
msgstr ""

