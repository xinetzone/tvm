# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-09 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:10002
msgid "使用 Relay Visualizer 可视化 Relay"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:10004
msgid "**原作者**: [Chi-Wei Wang](https://github.com/chiwwang)"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:10006
msgid ""
"Relay IR 模块可以包含很多运算。尽管单个运算通常很容易理解，但将它们放在一起可能会导致复杂的、难以阅读的 "
"graph。随着优化传递（passes）的出现，情况可能会变得更糟。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:10008
msgid ""
"这个实用程序将 IR 模块可视化为节点和边。它定义了一组接口，包括 parser、plotter(renderer)、graph、node 和 "
"edges。 提供了默认 parser。用户可以实现自己的 renderer 来渲染 graph。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:10011
msgid ""
"在这里，使用 renderer 在文本形式中渲染 graph。它是轻量级的、类似 AST 的可视化工具，灵感来自 [clang ast-"
"dump](https://clang.llvm.org/docs/IntroductionToTheClangAST.html)。下面将介绍如何通过接口类实现定制的"
" parser 和 renderer。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:10013
msgid "更多细节见：{py:mod}`tvm.contrib.relay_viz`。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:30002
msgid "定义具有多个 `GlobalVar` 的 Relay IR 模块"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:30004
msgid "构建包含多个 `GlobalVar` 的示例 IR 模块。定义 `add` 函数，并在 `main` 函数中调用它。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:30006
msgid "创建 add 算子及其函数"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:50002
msgid "查看算子和函数："
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:80002
msgid "在终端上使用 Relay Visualizer 渲染 graph"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:80004
msgid "终端是类似 clang AST-dump 的文本形式显示 Relay IR 模块。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:80006
msgid "看到 ``main`` 和 ``AddFunc`` 函数。``AddFunc`` 在 ``main`` 函数中调用两次。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:100002
msgid "为感兴趣的 Relay 类型定制解析器"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:100004
msgid "有时想要强调感兴趣的信息，或者针对特定的用法以不同的方式分析事物。只要遵循接口，就可以提供定制的解析器。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:100006
msgid "这里演示如何自定义 ``relay.var`` 的解析器。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:100008
msgid "需要实现抽象接口 {py:class}`tvm.contrib.relay_viz.interface.VizParser`。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:120002
msgid "将解析器和感兴趣的渲染程序传递给可视化工具。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:120004
msgid "这里只是终端（terminal）渲染器。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:140002
msgid "定制 Graph 和 Plotter"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:140004
msgid ""
"除了解析器，还可以通过实现抽象类 {py:class}`tvm.contrib.relay_viz.interface.VizGraph` 和 "
"{py:class}`tvm.contrib.relay_viz.interface.Plotter` 来定制 graph 和渲染器。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:140006
msgid ""
"这里，重写了 ``terminal.py`` 中定义的 ``TermGraph``，以方便演示。在 ``AwesomeVar`` "
"上面添加了钩子，并让 ``TermPlotter`` 使用新类。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:160002
msgid "也可以渲染为："
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:180002
msgid "小结"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:180004
msgid "本教程演示了 Relay Visualizer 及其定制的用法。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:180006
msgid ""
"{py:class}`tvm.contrib.relay_viz.RelayVisualizer` 由定义在 ``interface.py`` "
"中的接口组成。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/using_relay_viz.ipynb:180008
msgid "它的目标是快速 look-then-fix 迭代。构造函数参数的目的是简单，而定制仍然可以通过一组接口类进行。"
msgstr ""

#~ msgid "构建包含多个 `GlobalVar` 的示例 IR 模块。定义 `add` 函数，并在 main 函数中调用它。"
#~ msgstr ""

