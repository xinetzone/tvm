# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-09 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:10002
msgid "构建图卷积网络"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:10004
msgid ""
"**原作者**: [Yulun Yao](https://yulunyao.io/)，[Chien-Yu "
"Lin](https://homes.cs.washington.edu/~cyulin/)"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:10006
msgid ""
"本文是介绍性教程，介绍如何使用 Relay 构建图卷积网络（Graph Convolutional Network，简称 "
"GCN）。在本教程中，将在 Cora 数据集上演示 GCN。Cora 数据集是图神经网络（Graph Neural Networks，简称 "
"GNN）和支持 GNN 训练和推理的框架的通用基准。直接从 DGL 库加载数据集，以便与 DGL 进行苹果对苹果的比较。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:10008
msgid "DGL 安装请参阅"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:10010
msgid "[DGL 文件](https://docs.dgl.ai/install/index.html)"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:10011
msgid "[PyTorch 安装指南](https://pytorch.org/get-started/locally/)"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:10013
msgid "用 PyTorch 后端在 DGL 中定义 GCN"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:10015
msgid ""
"[DGL 示例](https://github.com/dmlc/dgl/tree/master/examples/pytorch/gcn) "
"部分重用了上面示例中的代码。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:30002
msgid "定义加载数据集和评估准确性的函数"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:30004
msgid "你可以用你自己的数据集代替这一部分，这里我们从 DGL 加载数据："
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:50002
msgid "加载数据并设置模型参数"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:70002
msgid "设定 DGL-PyTorch 模型并获得黄金结果"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:70004
msgid ""
"被训练的 "
"[weights](https://github.com/dmlc/dgl/blob/master/examples/pytorch/gcn/train.py)。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:90002
msgid "运行 DGL 模型并测试其准确性"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:110002
msgid "在 Relay 中定义图卷积层"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:110004
msgid ""
"要在 TVM 上运行 GCN，首先需要实现 Graph Convolution Layer。可以参考 [在 DGL 中使用 MXNet 后端实现的"
" GraphConv "
"层](https://github.com/dmlc/dgl/blob/master/python/dgl/nn/mxnet/conv/graphconv.py)。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:110006
msgid ""
"该层定义如下运算，注意应用了两次转置来保持 sparse_dense "
"算子右手边的邻接矩阵，这个方法是临时的，在接下来的几周当有稀疏矩阵转置并且支持左稀疏算子的时候会更新。"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:110008
msgid ""
"\\mbox{GraphConv}(A, H, W)   = A * H * W\n"
"                            = ((H * W)^t * A^t)^t\n"
"                            = ((W^t * H^t) * A^t)^t"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:130002
msgid "准备 GraphConv 层中所需的参数"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:150002
msgid "把层放在一起"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:170002
msgid "使用 TVM 编译并运行"
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:170004
msgid "从 PyTorch 模型导出权重到 Python Dict："
msgstr ""

#: ../../xin/docs/how_to/work_with_relay/build_gcn.ipynb:190002
msgid "运行 TVM 模型，测试准确性并通过 DGL 验证"
msgstr ""

#~ msgid ":download:`Download Python source code: build_gcn.py <build_gcn.py>`"
#~ msgstr ""

#~ msgid ""
#~ ":download:`Download Jupyter notebook: "
#~ "build_gcn.ipynb <build_gcn.ipynb>`"
#~ msgstr ""

#~ msgid ""
#~ "`Gallery generated by Sphinx-Gallery "
#~ "<https://sphinx-gallery.github.io>`_"
#~ msgstr ""

#~ msgid ""
#~ "Click :ref:`here "
#~ "<sphx_glr_download_how_to_work_with_relay_build_gcn.py>` to "
#~ "download the full example code"
#~ msgstr ""

#~ msgid "Building a Graph Convolutional Network"
#~ msgstr ""

#~ msgid ""
#~ "**Author**: `Yulun Yao <https://yulunyao.io/>`_,"
#~ "             `Chien-Yu Lin "
#~ "<https://homes.cs.washington.edu/~cyulin/>`_"
#~ msgstr ""

#~ msgid ""
#~ "This article is an introductory tutorial"
#~ " to build a Graph Convolutional "
#~ "Network (GCN) with Relay. In this "
#~ "tutorial, we will run our GCN on"
#~ " Cora dataset to demonstrate. Cora "
#~ "dataset is a common benchmark for "
#~ "Graph Neural Networks (GNN) and "
#~ "frameworks that support GNN training and"
#~ " inference. We directly load the "
#~ "dataset from DGL library to do the"
#~ " apples to apples comparison against "
#~ "DGL."
#~ msgstr ""

#~ msgid ""
#~ "Please refer to DGL doc for DGL"
#~ " installation at "
#~ "https://docs.dgl.ai/install/index.html."
#~ msgstr ""

#~ msgid ""
#~ "Please refer to PyTorch guide for "
#~ "PyTorch installation at https://pytorch.org/get-"
#~ "started/locally/."
#~ msgstr ""

#~ msgid "Define GCN in DGL with PyTorch backend"
#~ msgstr ""

#~ msgid ""
#~ "DGL example: "
#~ "https://github.com/dmlc/dgl/tree/master/examples/pytorch/gcn "
#~ "This part reuses the code from the"
#~ " above example."
#~ msgstr ""

#~ msgid "Define the functions to load dataset and evaluate accuracy"
#~ msgstr ""

#~ msgid ""
#~ "You may substitute this part with "
#~ "your own dataset, here we load "
#~ "data from DGL"
#~ msgstr ""

#~ msgid "Load the data and set up model parameters"
#~ msgstr ""

#~ msgid "Set up the DGL-PyTorch model and get the golden results"
#~ msgstr ""

#~ msgid ""
#~ "The weights are trained with "
#~ "https://github.com/dmlc/dgl/blob/master/examples/pytorch/gcn/train.py"
#~ msgstr ""

#~ msgid "Run the DGL model and test for accuracy"
#~ msgstr ""

#~ msgid "Define Graph Convolution Layer in Relay"
#~ msgstr ""

#~ msgid ""
#~ "To run GCN on TVM, we first "
#~ "need to implement Graph Convolution "
#~ "Layer. You may refer to "
#~ "https://github.com/dmlc/dgl/blob/master/python/dgl/nn/mxnet/conv/graphconv.py"
#~ " for a GraphConv Layer implemented in"
#~ " DGL with MXNet Backend"
#~ msgstr ""

#~ msgid ""
#~ "The layer is defined with below "
#~ "operations, note that we apply two "
#~ "transposes to keep adjacency matrix on"
#~ " right hand side of sparse_dense "
#~ "operator, this method is temporary and"
#~ " will be updated in next few "
#~ "weeks when we have sparse matrix "
#~ "transpose and support for left sparse"
#~ " operator."
#~ msgstr ""

#~ msgid "Prepare the parameters needed in the GraphConv layers"
#~ msgstr ""

#~ msgid "Put layers together"
#~ msgstr ""

#~ msgid "Compile and run with TVM"
#~ msgstr ""

#~ msgid "Export the weigths from PyTorch model to Python Dict"
#~ msgstr ""

#~ msgid "Run the TVM model, test for accuracy and verify with DGL"
#~ msgstr ""

