# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-13 11:16+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../notebook/docs/arch/pass_infra.rst:21
msgid "Pass Infrastructure"
msgstr ""

#: ../../notebook/docs/arch/pass_infra.rst:23
msgid ""
"Both Relay and TVM IR contain a series of optimization passes which "
"improve performance metrics of models such as mean inference, memory "
"footprint, or power consumption for specific devices. There is a suite of"
" standard optimizations as well as machine learning-specific "
"optimizations including constant folding, dead code elimination, operator"
" layout alteration, operator fusion, buffer handling, and loop "
"transformation, etc. Each of these passes is structured as a ir-to-ir "
"transformation using the analysis result collected during and/or before "
"traversal."
msgstr ""
"Relay 和 TVM IR 都包含一系列优化传递，这些传递旨在改善模型的性能指标，例如针对特定设备的平均推理、内存占用或功耗。"
"有一套标准的优化以及机器学习特定的优化，包括常量折叠、死代码消除、算子布局改变、算子融合、缓冲区处理和循环转换等。"
"每个这些传递都是使用遍历期间和/或之前收集的分析结果构建的 IR-to-IR 转换。"

#: ../../notebook/docs/arch/pass_infra.rst:31
msgid ""
"However, as TVM evolves quickly, the need for a more systematic and "
"efficient way to manage these passes is becoming apparent. In addition, a"
" generic framework that manages the passes across different layers of the"
" TVM stack (e.g. Relay and tir) paves the way for developers to quickly "
"prototype and plug the implemented passes into the system."
msgstr ""
"然而，随着 TVM 的快速发展，更加系统和高效的方式来管理这些变换的需求变得愈发明显。"
"此外，一个能够跨 TVM 堆栈的不同层级（例如 Relay 和 tir）来管理变换的通用框架，为开发者快速原型化并将实现的变换插入到系统中铺平了道路。"

#: ../../notebook/docs/arch/pass_infra.rst:37
msgid ""
"This doc describes the design of such an infra that takes the advantage "
"of the way production compilers are used to manage the optimization "
"passes and the style modern deep learning frameworks adopted to build up "
"layers."
msgstr ""
"本文档描述了这样一个 infra 的设计，它利用了产品级编译器管理优化变换的方式以及现代深度学习框架采用的构建 layers 结构的风格。"

#: ../../notebook/docs/arch/pass_infra.rst:41
msgid ""
"For example, many existing production compilers, such as GCC and LLVM, "
"employ pass managers to effectively manage the execution of passes. "
"Initially managing passes is straightforward as the number of passes is "
"small, but mature compilers will contain hundreds of individual passes. "
"Often external users will want to have custom passes correctly scheduled "
"without having to modify a single handcrafted pass order."
msgstr ""
"例如，许多现有的生产编译器，如 GCC 和 LLVM，都采用变换的管理器来有效地管理变换的执行。"
"最初，当变换的数量较少时，管理变换是简单的，但成熟的编译器将包含数百个单独的变换。"
"通常，外部用户希望在不必修改单一手工定制的变换顺序的情况下，能够正确地调度自定义变换。"

#: ../../notebook/docs/arch/pass_infra.rst:48
msgid ""
"Similarly, modern deep learning frameworks, such as Pytorch and MXNet "
"Gluon, also have the tendency to enable pass-style layer construction "
"scheme through `Sequential`_ and `Block`_, respectively. With such "
"constructs, these modern frameworks are able to conveniently add "
"modules/layers to their containers and build up neural networks easily."
msgstr ""
"同样，现代深度学习框架，例如 Pytorch 和 MXNet Gluon，也倾向于通过 `Sequential`_ 和 `Block`_ 分别实现变换风格的层结构构建方案。"
"有了这样的构造，这些现代框架能够方便地将模块/层添加到它们的容器中，并轻松构建神经网络。"

#: ../../notebook/docs/arch/pass_infra.rst:54
msgid ""
"The design of the Relay pass infra is largely inspired by the "
"hierarchical pass manager used in LLVM and the block-style containers "
"used in the popular deep learning frameworks. The major goals of the pass"
" infra include:"
msgstr ""
"Relay pass infra 的设计在很大程度上受到了 LLVM 中使用的分层变换管理器和流行深度学习框架中使用的块式容器的启发。该变换 infra 的主要目标包括："

#: ../../notebook/docs/arch/pass_infra.rst:58
msgid ""
"enabling better programmatic orchestration of optimizations. This allows "
"users to flexibly customize and build their own optimization pipelines."
msgstr ""
"实现优化的更好的编程编排。这允许用户灵活地定制和构建他们自己的优化管道。"

#: ../../notebook/docs/arch/pass_infra.rst:61
msgid "providing a user-friendly way to debug optimization passes."
msgstr "提供一种用户友好的方式来调试优化变换。"

#: ../../notebook/docs/arch/pass_infra.rst:63
msgid ""
"alleviating developers from manually and respectively resolving the "
"dependencies between passes."
msgstr ""
"减轻开发者手动分别解决变换之间的依赖关系的负担。"

#: ../../notebook/docs/arch/pass_infra.rst:66
msgid ""
"simplifying the implementation of new passes for developers. For example,"
" we allow users to implement a pass in Python and let the pass infra "
"manipulate its execution."
msgstr ""
"简化开发者实现新传递的实现。例如，允许用户用 Python 实现传递，并让传递基础架构操纵其执行。"

#: ../../notebook/docs/arch/pass_infra.rst:71
msgid "The Design"
msgstr "设计方案"

#: ../../notebook/docs/arch/pass_infra.rst:73
msgid ""
"We focus on ease of extension for users, making it possible for users to "
"quickly add new passes without loss of backward compatibility. The design"
" contains both the backend and the frontend. The former implements the "
"main logic of the pass infra. The latter provides simple APIs for users "
"to interact with, i.e., allowing users to quickly create their own "
"optimization pipelines."
msgstr ""
"我们专注于为用户扩展的便利性，使用户能够快速添加新传递而不会失去向后兼容性。设计包括后端和前端。"
"前者实现了传递基础架构的主要逻辑。后者为用户提供简单的 API 进行交互，即，允许用户快速创建自己的优化流程。"

#: ../../notebook/docs/arch/pass_infra.rst:80
msgid "C++ Backend"
msgstr "C++ 后端"

#: ../../notebook/docs/arch/pass_infra.rst:82
msgid ""
"We provide a ``PassInfo`` object to contain the basic information needed "
"by a pass. ``name`` is the pass name, ``opt_level`` indicates at which "
"optimization level the pass will be enabled, and ``required`` represents "
"the passes that are required to execute a certain pass (see "
"`include/tvm/ir/transform.h`_ for more details). For example, during "
"registration of a pass (will be covered in later), the pass developers "
"can specify the name of the pass, the optimization level it will be "
"performed at, and/or the passes that are required. ``opt_level`` could be"
" used to help the pass infra identify if a certain pass needs to be "
"executed when running under a user-provided optimization level. The "
"``required`` field can be used by the pass infra to resolve pass "
"dependencies."
msgstr ""
"我们提供了一个 ``PassInfo`` 对象来包含一个传递所需的基本信息。"
"``name`` 是传递名称，``opt_level`` 表示在哪个优化级别上启用该传递，``required`` 代表执行某个传递所需的传递（更多细节参见 `include/tvm/ir/transform.h`_ ）。"
"例如，在注册传递过程中（稍后将介绍），传递开发人员可以指定传递的名称、将要执行的优化级别和/或所需的传递。"
"``opt_level`` 可以用来帮助传递基础架构识别在用户提供的优化级别下运行时是否需要执行某个传递。"
"``required`` 字段可以被传递基础架构用来解析传递依赖关系。"

#: ../../notebook/docs/arch/pass_infra.rst:102
#: ../../notebook/docs/arch/pass_infra.rst:552
msgid "PassContext"
msgstr ""

#: ../../notebook/docs/arch/pass_infra.rst:104
msgid ""
"``PassContext`` carries useful information for an optimization pass. For "
"example, it contains the error reporting system so optimization authors "
"can provide diagnostics about why an optimization fails. ``PassContext`` "
"is also designed to replace the old ``BuildConfig`` which was used to "
"help users configure the compilation options, including optimization "
"level and required/disabled passes, etc. For instance, we may have a "
"configuration which performs all passes at ``opt_level=3`` with some "
"disabled passes using ``disabled_pass=xx`` provided by ``PassContext``. "
"Now we could glob all passes at ``opt_level=3`` and exclude those in the "
"disabled pass list. ``PassContext`` also provides a way to instrument all"
" passes. See section :ref:`pass_instrument_cpp_backend`."
msgstr ""
"``PassContext`` 携带了优化传递所需的有用信息。例如，它包含了错误报告系统，因此优化作者可以提供关于优化失败的诊断信息。"
"``PassContext`` 还旨在取代旧的 ``BuildConfig``，后者曾用于帮助用户配置编译选项，包括优化级别和所需/禁用的传递等。"
"例如，我们可能有一个配置，它在 ``opt_level=3`` 执行所有传递，并使用 ``PassContext`` 提供的 ``disabled_pass=xx`` 禁用一些传递。"
"现在我们可以在 ``opt_level=3`` 获取所有传递，并排除那些在禁用传递列表中的传递。"
"``PassContext`` 还提供了一种对所有传递进行检测的方式。参见章节 :ref:`pass_instrument_cpp_backend`。"

#: ../../notebook/docs/arch/pass_infra.rst:115
msgid ""
"This class is designed for users to conveniently write the Python "
"``with`` syntax to perform optimizations under a certain configuration. "
"In addition, the users can obtain the context that is available within a "
"certain program scope in a thread-safe way through "
"``PassContext::Current()``, since a thread-local store "
"``PassContextThreadLocalStore`` is used to hold the created pass context "
"objects. Examples will be provided later to show how we can use both the "
"C++ and Python APIs to create a compilation pipeline using pass context."
msgstr ""
"这个类的设计是为了让用户能够方便地使用 Python 的 ``with`` 语法在特定配置下执行优化。"
"此外，用户可以通过 ``PassContext::Current()`` 以线程安全的方式获取特定程序范围内可用的上下文，因为一个线程局部存储 ``PassContextThreadLocalStore`` 被用来持有创建的传递上下文对象。"
"稍后将提供示例，展示我们如何使用 C++ 和 Python API 来使用传递上下文创建编译管道。"

#: ../../notebook/docs/arch/pass_infra.rst:170
msgid "Pass Constructs"
msgstr "传递构造"

#: ../../notebook/docs/arch/pass_infra.rst:172
msgid ""
"The pass infra is designed in a hierarchical manner, and it could work at"
" different granularities of Relay/tir programs. A pure virtual class "
"``PassNode`` is introduced to serve as the base of the different "
"optimization passes. This class contains several virtual methods that "
"must be implemented by the subclasses at the level of modules, functions,"
" or sequences of passes."
msgstr ""
"传递基础架构以分层的方式设计，它可以在不同的 Relay/TIR 程序粒度上工作。"
"引入了一个纯虚类 ``PassNode`` 来作为不同优化传递的基础。这个类包含了几个必须由模块、函数或传递序列级别的子类实现的虚拟方法。"

#: ../../notebook/docs/arch/pass_infra.rst:186
msgid ""
"The functor shows how a pass must be realized, i.e. it always works on a "
":py:class:`IRModule` under a certain context. All passes are designed in "
"a ``Module`` to ``Module`` manner. Therefore, optimizations governed by "
"the pass infra will always update the whole module."
msgstr ""
"函子展示了一个传递必须如何实现，即它总是在特定上下文下的 :py:class:`IRModule` 上工作。所有传递都以 ``Module`` 到 ``Module`` 的方式设计。"
"因此，由传递基础架构控制的优化将始终更新整个模块。"

#: ../../notebook/docs/arch/pass_infra.rst:191
msgid ""
"Several subclasses have been created to implement different types of "
"optimization passes, e.g., function-level passes, module-level passes, "
"and sequential passes.  Each subclass itself could act as a pass manager."
" For instance, they could collect the required passes and execute them or"
" build a dependency graph based on the given metadata. The full "
"definition of them can be found in `src/relay/ir/transform.cc`_ and "
"`src/ir/transform.cc`_."
msgstr ""
"已经创建了几个子类来实现不同类型的优化传递，例如函数级传递、模块级传递和序列传递。每个子类本身都可以作为一个传递管理器。"
"例如，它们可以收集所需的传递并执行它们，或者根据给定的元数据构建一个依赖图。它们的完整定义可以在 `src/relay/ir/transform.cc`_ 和 `src/ir/transform.cc`_ 中找到。"

#: ../../notebook/docs/arch/pass_infra.rst:199
msgid "Module-Level Passes"
msgstr "模块级传递"

#: ../../notebook/docs/arch/pass_infra.rst:201
msgid ""
"Module level passes are geared mainly for global and inter-procedural "
"optimizations (IPO), which are similar to the module pass used in LLVM. "
"Some typical passes in Relay that need the global picture of a module, "
"such as A-normal form conversion and lambda lifting, etc., fall into this"
" set. At this level, users can even add and/or delete functions in a "
"module. Note that all passes"
msgstr ""
"模块级传递主要针对全局和跨程序优化（inter-procedural optimizations，简称 IPO），这与 LLVM 中使用的模块传递类似。"
"Relay 中一些需要模块全局视图的典型传递，例如 A-normal 形式转换和 lambda 提升等，都属于这一类。"
"在这个级别，用户甚至可以在模块中添加和/或删除函数。请注意，所有传递"

#: ../../notebook/docs/arch/pass_infra.rst:217
msgid ""
"``pass_info`` maintains the information needed by a module-level pass. "
"``pass_func`` sketches the real optimization. For example, we may need to"
" perform dead code elimination on the module. We could implement the "
"algorithm in the ``pass_func`` and let it run on a module. It will then "
"remove the dead code including the unused functions in the module. Note "
"that this field is designed as a packed function, which enables the "
"implementation of the optimization in both C++ and Python."
msgstr ""
"``pass_info`` 维护了模块级传递所需的信息。``pass_func`` 概述了真正的优化。例如，我们可能需要对模块执行死代码消除。我们可以在 ``pass_func`` 中实现该算法，并让它在模块上运行。"
"然后，它将删除模块中的死代码，包括未使用的功能。请注意，此字段被设计为一个打包函数，它支持用 C++ 和 Python 实现优化。"

#: ../../notebook/docs/arch/pass_infra.rst:226
msgid "Function-Level Passes"
msgstr "函数级传递"

#: ../../notebook/docs/arch/pass_infra.rst:228
msgid ""
"Function-level passes are used to implement various intra-function level "
"optimizations for a given Relay/tir module. It fetches one function at a "
"time from the function list of a module for optimization and yields a "
"rewritten Relay ``Function`` or tir ``PrimFunc``. Most of passes can be "
"classified into this category, such as common subexpression elimination "
"and inference simplification in Relay as well as vectorization and "
"flattening storage in tir, etc."
msgstr ""
"函数级传递用于实现给定 Relay/TIR 模块的各种函数内级别优化。它一次从模块的函数列表中获取一个函数来进行优化，并产生一个重写的 Relay ``Function`` 或TIR ``PrimFunc``。"
"大多数传递都可以归入这一类，例如 Relay 中的公共子表达式消除和推理简化，以及 TIR 中的向量化和存储扁平化等。"

#: ../../notebook/docs/arch/pass_infra.rst:235
msgid ""
"Note that the scope of passes at this level is either a Relay function or"
" a tir primitive function. Therefore, we cannot add or delete a function "
"through these passes as they are not aware of the global information."
msgstr ""
"请注意，此级别的传递范围要么是 Relay 函数，要么是 TIR 原始函数。因此，我们不能通过这些传递来添加或删除函数，因为它们不了解全局信息。"

#: ../../notebook/docs/arch/pass_infra.rst:249
msgid ""
"``pass_info`` is identical to what we just described in the module pass. "
"``pass_func`` takes a function for optimization, it also needs a module "
"as we may use it for reporting errors. A function could be annotated with"
" \"SkipOptimization\" so that it will be ignored during optimization."
msgstr ""
"``pass_info`` 与我们刚才在模块传递中描述的完全相同。"
"``pass_func`` 接受一个函数进行优化，它也需要模块，因为我们可能需要用它来报告错误。一个函数可以用 \"SkipOptimization\" 进行注释，这样在优化过程中就会忽略它。"

#: ../../notebook/docs/arch/pass_infra.rst:255
msgid "Sequential Passes"
msgstr "Sequential 传递"

#: ../../notebook/docs/arch/pass_infra.rst:257
msgid ""
"``SequentialPass`` is similar to Pytorch ``nn.Sequential`` that contains "
"a host of passes for execution."
msgstr ""
"``SequentialPass`` 类似于 Pytorch 的 ``nn.Sequential``，包含一系列要执行的传递。"

#: ../../notebook/docs/arch/pass_infra.rst:270
msgid ""
"Only a few passes currently in Relay are put in this group. For example, "
"``FoldScaleAxis`` requires to dispatch ``ForwardFoldScaleAxis`` and "
"``BackwardFoldScaleAxis`` internally. In addition, "
"``BackwardFoldScaleAxis`` is recommended to be fulfilled first. This "
"pass, hence, is an ideal candidate for ``SequentialPass``."
msgstr ""
"目前，Relay 中只有少数几个传递被归入此类。例如，``FoldScaleAxis`` 需要在内部调度 ``ForwardFoldScaleAxis`` 和 ``BackwardFoldScaleAxis``。"
"此外，建议首先完成 ``BackwardFoldScaleAxis``。因此，这个传递是 ``SequentialPass`` 的理想候选。"

#: ../../notebook/docs/arch/pass_infra.rst:276
msgid ""
"The following code shows how individual passes in a sequential pass are "
"invoked. Essentially, we sequentially execute each pass in a sequential "
"pass using the order that they were appended to the pass list."
msgstr ""
"以下代码展示了如何在顺序传递中调用各个传递。本质上，我们按照它们被添加到传递列表的顺序，顺序地执行顺序传递中的每个传递。"

#: ../../notebook/docs/arch/pass_infra.rst:299
msgid ""
"Upon the invocation of a pass, we first check if this pass is enabled. "
"This is done by first checking if the pass is explicitly disabled by a "
"user, followed by inspecting if it is specified as a required pass by the"
" user. If it is still undetermined whether this pass is enabled, its "
"``opt_level`` will be checked. This pass will be enabled and therefore "
"executed only when its optimization level is not less than the configured"
" optimization level in the pass context."
msgstr ""
"在调用传递时，我们首先检查这个传递是否被启用。这首先通过检查用户是否明确禁用了该传递来实现，然后检查用户是否指定它为必需的传递。"
"如果仍无法确定该传递是否启用，将检查其 ``opt_level``。仅当其优化级别不小于传递上下文中配置的优化级别时，才会启用并执行该传递。"

#: ../../notebook/docs/arch/pass_infra.rst:306
msgid ""
"To execute the pass, we need first to retrieve the registered pass in the"
" TVM packed function registry using the pass name. This is possible "
"because every pass is registered with an API endpoint as we will show "
"later."
msgstr ""
"要执行传递，我们首先需要在 TVM 打包函数注册表中使用传递名称检索已注册的传递。这是可能的，因为每个传递都如我们将在后面展示的那样，使用 API 端点进行注册。"

#: ../../notebook/docs/arch/pass_infra.rst:321
msgid ""
"Some helper functions are provided to create each type of these "
"aforementioned passes. These helpers are also exposed to the Python "
"frontend for users to favorably use Python APIs to create a specific pass"
" object."
msgstr ""
"提供了一些辅助函数来创建上述每种类型的传递。这些辅助函数也暴露给 Python 前端，以便用户方便地使用 Python API 来创建特定的传递对象。"

#: ../../notebook/docs/arch/pass_infra.rst:348
msgid "Pass Registration"
msgstr "传递注册"

#: ../../notebook/docs/arch/pass_infra.rst:350
msgid ""
"We've covered the concept of different level of passes and the context "
"used for compilation. It would be interesting to see how easily users can"
" register a pass.  Let's take const folding as an example. This pass has "
"already been implemented to fold constants in a Relay function (found in "
"`src/relay/transforms/fold_constant.cc`_)."
msgstr ""
"我们已经介绍了不同级别的传递以及用于编译的上下文。"
"看看用户如何轻松注册一个传递会很有趣。让我们以常量折叠为例。"
"这个传递已经被实现来折叠Relay函数中的常量（在 `src/relay/transforms/fold_constant.cc`_ 中找到）。"

#: ../../notebook/docs/arch/pass_infra.rst:356
msgid "An API was provided to perform the ``Expr`` to ``Expr`` transformation."
msgstr "提供了一个API来执行 ``Expr`` 到 ``Expr`` 的转换。"

#: ../../notebook/docs/arch/pass_infra.rst:362
msgid ""
"In order to register this pass to the pass infra, we first need to decide"
" at which level this pass will be performed. As const folding happens on "
"individual functions, we should intuitively create a ``FunctionPass`` for"
" it through ``CreateFunctionPass``. The ``pass_func`` is returned as a "
"packed function that invokes the ``Expr`` to ``Expr`` API on each "
"function in a `IRModule`. ``{}`` indicates that no prerequisite is "
"required for this pass. Otherwise, the pass developer has to identify and"
" list them."
msgstr ""
"为了将这个传递注册到传递基础架构中，我们首先需要决定这个传递将在哪个级别执行。"
"由于常量折叠发生在单个函数上，我们应该直观地通过 ``CreateFunctionPass`` 为其创建一个 ``FunctionPass``。"
"``pass_func`` 作为一个打包函数返回，它在 ``IRModule`` 中的每个函数上调用 ``Expr`` 到 ``Expr`` 的API。``{}`` 表示这个传递不需要任何先决条件。"
"否则，传递开发者必须识别并列出它们。"

#: ../../notebook/docs/arch/pass_infra.rst:370
msgid ""
"Meanwhile, a pass API endpoint is registered with the name "
"``relay._transform.FoldConstant``. This pass, therefore, becomes an entry"
" in the registry that can be accessed by both C++ (e.g. the ``GetPass`` "
"above) and Python when needed."
msgstr ""
"同时，一个传递 API 端点以名称 ``relay._transform.FoldConstant`` 被注册。"
"因此，这个传递成为可以在需要时由 C++（例如上面的 ``GetPass`` ）和 Python 访问的注册表中的一个条目。"

#: ../../notebook/docs/arch/pass_infra.rst:392
msgid ""
"To allow other C++ modules to apply this pass, we declare a free function"
" in `include/tvm/relay/transform.h`_ as the following:"
msgstr ""
"为了允许其他C++模块应用这个传递，我们在 `include/tvm/relay/transform.h`_ 中声明了一个自由函数，如下所示："

#: ../../notebook/docs/arch/pass_infra.rst:402
#: ../../notebook/docs/arch/pass_infra.rst:682
msgid "Pass Instrument"
msgstr "传递工具"

#: ../../notebook/docs/arch/pass_infra.rst:404
msgid ""
"Pass Instrument is a mechanism to analyze the pass itself. For example, "
"we can use the infrastructure to know how much time and memory a pass "
"requires or how a pass can transform the IR module."
msgstr ""
"传递工具是一种分析传递本身的机制。例如，我们可以使用基础设施来了解一个传递需要多少时间和内存，或者一个传递如何转换 IR 模块。"

#: ../../notebook/docs/arch/pass_infra.rst:408
msgid "We introduce four instrument points in the life-cycle of ``PassContext``."
msgstr "我们在 ``PassContext`` 的生命周期中引入了四个测量点(instrument points)。"

#: ../../notebook/docs/arch/pass_infra.rst:417
msgid ""
"``InstrumentEnterPassContext`` is called immediately when entering the "
"scope of the ``PassContext`` instance."
msgstr ""
"``InstrumentEnterPassContext`` 在刚刚进入 ``PassContext`` 实例的范围时立即被调用。"

#: ../../notebook/docs/arch/pass_infra.rst:420
msgid ""
"``InstrumentExitPassContext`` is called when leaving the scope of "
"``PassContext``, or exceptions occur during the execution of passes. This"
" method is also called when instruments is being overriden by "
"``override_instruments`` in :py:class:`tvm.transform.PassContext`. See "
":ref:`pass_instrument_overriden`."
msgstr ""
"``InstrumentExitPassContext`` 在离开 ``PassContext`` 范围时被调用，或者在传递执行期间发生异常。"
"当 instrument 被 :py:class:`tvm.transform.PassContext` 中的 ``override_instruments`` 覆盖时，也会调用此方法。参见 :ref:`pass_instrument_overriden`。"

#: ../../notebook/docs/arch/pass_infra.rst:425
msgid ""
"``InstrumentBeforePass`` is called before execution. "
"``InstrumentAfterPass`` is called after execution if the pass should be "
"run. The behavior is like:"
msgstr ""
"``InstrumentBeforePass`` 在执行前被调用。``InstrumentAfterPass`` 在执行后被调用，如果传递应该运行的话。其行为如下："

#: ../../notebook/docs/arch/pass_infra.rst:436
msgid ""
"The ``PassInstrument`` interface allow you to run arbitrary code inside "
"above four methods. Multiple ``PassInstrument`` instances can be registed"
" into a single ``PassContext``. ``PassInstrument`` instances are called "
"sequentially in the order of ``instruments`` argument passed to "
"``PassContext``."
msgstr ""
"``PassInstrument`` 接口允许您在上述四个方法中运行任意代码。"
"多个 ``PassInstrument`` 实例可以注册到一个单一的 ``PassContext`` 中。``PassInstrument`` 实例将按照传递给 ``PassContext`` 的 ``instruments`` 参数的顺序依次被调用。"

#: ../../notebook/docs/arch/pass_infra.rst:441
msgid "``PassInstrument`` provides following interfaces:"
msgstr "``PassInstrument`` 提供以下接口："

#: ../../notebook/docs/arch/pass_infra.rst:465
msgid ""
"Python frontend are provided to implement ``PassInstrument`` quickly. See"
" :ref:`pass_instrument_py_frontend`."
msgstr ""
"Python 前端被提供来快速实现 ``PassInstrument``。参见 :ref:`pass_instrument_py_frontend`。"

#: ../../notebook/docs/arch/pass_infra.rst:467
msgid ""
"Within a ``PassContext``, the call sequence of a ``PassInstrument`` "
"instance is like:"
msgstr ""
"在 ``PassContext`` 中，一个 ``PassInstrument`` 实例的调用序列如下："

#: ../../notebook/docs/arch/pass_infra.rst:486
msgid ""
"Here is a brief introduction of relations between ``PassInstrument`` "
"interfaces and ``PassContext`` methods. See (`src/ir/transform.cc`_) for "
"more details."
msgstr ""
"这里是 ``PassInstrument`` 接口和 ``PassContext`` 方法之间关系的简要介绍。更多细节请参见（`src/ir/transform.cc`_）。"

#: ../../notebook/docs/arch/pass_infra.rst:489
msgid "``InstrumentEnterPassContext``"
msgstr ""

#: ../../notebook/docs/arch/pass_infra.rst:491
msgid ""
"``EnterPassContext()`` is executed in the order of ``instruments`` passed"
" to the ``PassContext``."
msgstr ""
"``EnterPassContext()`` 按照传递给 ``PassContext`` 的 ``instruments`` 的顺序执行。"

#: ../../notebook/docs/arch/pass_infra.rst:492
msgid ""
"When an exception raises, ``PassContext`` disable the pass "
"instrumentation by clearing all registered ``PassInstrument`` instances."
msgstr ""
"当发生异常时，``PassContext`` 通过清除所有已注册的 ``PassInstrument`` 实例来禁用传递检测。"

#: ../../notebook/docs/arch/pass_infra.rst:494
msgid ""
"Then ``PassContext`` execute ``ExitPassContext()`` method of each "
"``PassInstrument`` instances which successfully finished "
"``EnterPassContext()``"
msgstr ""
"然后，``PassContext`` 执行每个成功完成 ``ExitPassContext()`` 的 ``PassInstrument`` 实例的 ``EnterPassContext()`` 方法。"

#: ../../notebook/docs/arch/pass_infra.rst:496
msgid ""
"For example, if ``PassInstrument`` A, B, and C are registered to a "
"``PassContext`` and A finished ``EnterPassContext()`` while B throws an "
"exception, then C is never executed; ``ExitPassContext()`` of A is "
"executed."
msgstr ""
"例如，如果 ``PassInstrument`` A、B 和 C 注册到一个 ``PassContext``，并且 A 完成了 ``EnterPassContext()`` 而 B 抛出了一个异常，"
"那么 C 将永远不会执行；A 的 ``ExitPassContext()`` 将被执行。"

#: ../../notebook/docs/arch/pass_infra.rst:500
msgid "``InstrumentExitPassContext``"
msgstr ""

#: ../../notebook/docs/arch/pass_infra.rst:502
msgid ""
"``ExitPassContext()`` of each ``PassInstrument`` instances are executed "
"in the order of ``instruments`` passed to the ``PassContext``."
msgstr ""
"每个 ``PassInstrument`` 实例的 ``ExitPassContext()`` 按照传递给 ``PassContext`` 的 ``instruments`` 的顺序执行。"

#: ../../notebook/docs/arch/pass_infra.rst:504
msgid "While an exception occurs, ``instruments`` is cleared."
msgstr "当发生异常时，``instruments`` 被清除。"

#: ../../notebook/docs/arch/pass_infra.rst:505
msgid ""
"``PassInstrument`` Instances registered after the one throwing exceptions"
" do not execute ``ExitPassContext``."
msgstr ""
"在抛出异常的实例之后注册的 ``PassInstrument`` 实例不会执行 ``ExitPassContext``。"

#: ../../notebook/docs/arch/pass_infra.rst:507
msgid "``InstrumentBeforePass``"
msgstr ""

#: ../../notebook/docs/arch/pass_infra.rst:509
msgid "``ShouldRun`` is executed if the pass is not listed as a required pass."
msgstr "如果传递没有被列出为必需的传递，则执行 ``ShouldRun``。"

#: ../../notebook/docs/arch/pass_infra.rst:510
msgid ""
"``RunBeforePass`` is executed in the order of ``instruments`` if the pass"
" is not blocked by ``ShouldRun``."
msgstr ""
"如果传递没有被 ``ShouldRun`` 阻止，则按照 ``instruments`` 的顺序执行 ``RunBeforePass``。"

#: ../../notebook/docs/arch/pass_infra.rst:511
msgid ""
"Note that ``InstrumentBeforePass`` returns a boolean indicating whether "
"or not the pass should be run."
msgstr "注意，``InstrumentBeforePass`` 返回一个布尔值，表示是否应该运行传递。"

#: ../../notebook/docs/arch/pass_infra.rst:512
msgid ""
"When an exception occur, it is thrown immediately. We rely on Python "
"Context Manager to exit ``PassContext`` safely (meaning "
"``ExitPassContext`` of each instruments will be run. For C++, please "
"refer to `include/tvm/support/with.h`_.)"
msgstr ""
"当发生异常时，它会立即被抛出。我们依靠 Python 上下文管理器来安全退出 ``PassContext`` "
"（意味着每个仪器的 ``ExitPassContext`` 将被运行。对于 C++，请参考 `include/tvm/support/with.h`_。）"

#: ../../notebook/docs/arch/pass_infra.rst:516
msgid "``InstrumentAfterPass``"
msgstr ""

#: ../../notebook/docs/arch/pass_infra.rst:518
msgid ""
"``RunAfterPass`` is executed in the order of ``instruments`` passed to "
"the ``PassContext``."
msgstr "``RunAfterPass`` 按照传递给 ``PassContext`` 的 ``instruments`` 的顺序执行。"

#: ../../notebook/docs/arch/pass_infra.rst:519
msgid ""
"When an exception occur, it is thrown immediately. We rely on Python "
"Context Manager or ``With`` class(`include/tvm/support/with.h`_) to exit "
"``PassContext`` safely"
msgstr ""
"当发生异常时，它会立即被抛出。我们依靠 Python 上下文管理器或 ``With`` 类（`include/tvm/support/with.h`_）来安全退出 ``PassContext``。"

#: ../../notebook/docs/arch/pass_infra.rst:523
msgid "Built-in Instrument"
msgstr "内置检测工具"

#: ../../notebook/docs/arch/pass_infra.rst:525
msgid ""
"There are several built-in instruments. Those marked with *TODO* are not "
"implemented yet."
msgstr "有几个内置的检测工具。那些标有 *TODO* 的尚未实现。"

#: ../../notebook/docs/arch/pass_infra.rst:527
msgid "PassTimingInstrument (see `src/ir/instrument.cc`_)"
msgstr "PassTimingInstrument (见 `src/ir/instrument.cc`_)"

#: ../../notebook/docs/arch/pass_infra.rst:529
msgid "Profile the execution time of passes."
msgstr "分析传递的执行时间。"

#: ../../notebook/docs/arch/pass_infra.rst:531
msgid "PrintIRBefore(TODO)"
msgstr ""

#: ../../notebook/docs/arch/pass_infra.rst:533
msgid ""
"Print the IR module before the pass transforms it. "
":py:func:`tvm.transform.PrintIR` can also serve this purpose if we insert"
" it around passes. However, with the ``PassInstrument``, we don't need to"
" modify the sequence of passes."
msgstr ""
"在传递转换之前打印IR模块。如果我们在传递周围插入，:py:func:`tvm.transform.PrintIR` 也可以起到这个作用。"
"但是，使用 ``PassInstrument``，我们不需要修改传递的顺序。"

#: ../../notebook/docs/arch/pass_infra.rst:537
msgid "PrintAfter(TODO)"
msgstr ""

#: ../../notebook/docs/arch/pass_infra.rst:539
msgid "Print the IR module after the pass transforms it."
msgstr "在传递转换之后打印 IR 模块。"

#: ../../notebook/docs/arch/pass_infra.rst:542
msgid "Python Frontend"
msgstr "Python 前端"

#: ../../notebook/docs/arch/pass_infra.rst:544
msgid ""
"Only some simple APIs are needed for the frontend side. For example, we "
"can provide users the following APIs to create and execute a pass (full "
"implementation is provided in `python/tvm/relay/transform/transform.py`_ "
"and `python/tvm/ir/transform.py`_). The backend receives the information "
"and decides which function it should use to create a Pass object."
msgstr ""
"前端只需要一些简单的 API。例如，我们可以向用户提供以下 API 来创建和执行一个传递"
"（完整的实现在 `python/tvm/relay/transform/transform.py`_ 和 `python/tvm/ir/transform.py`_ 中提供）。"
"后端接收这些信息并决定应该使用哪个函数来创建一个 Pass 对象。"

#: ../../notebook/docs/arch/pass_infra.rst:554
msgid ""
"Python frontend provides a wrapper for the ``PassContext`` to enable the "
"``with`` syntax by overriding ``__enter__`` and ``__exit__``. A "
"``current`` static method is offered for users to get the context that is"
" in use under a certain scope."
msgstr ""
"Python前端为 ``PassContext`` 提供了一个包装器，通过覆盖 ``__enter__`` 和 ``__exit__`` 来启用 ``with`` 语法。"
"提供了一个 ``current`` 静态方法，供用户获取在特定范围内使用的上下文。"

#: ../../notebook/docs/arch/pass_infra.rst:575
msgid ""
"A ``PassContext`` is used to configure the compilation options, including"
" the optimization level and required/disabled passes. It can also take a "
"dictionary of configs so that different passes can conveniently fetch the"
" passed data, such as fallback device info and step/depth for loop "
"unrolling, etc. In order to enable fetching the required config, the key "
"must be registered through ``TVM_REGISTER_PASS_CONFIG_OPTION``. For "
"example, the following is used by the loop unrolling pass"
msgstr ""
"``PassContext`` 用于配置编译选项，包括优化级别以及必需或禁用的传递。"
"它还可以接收一个配置字典，以便不同的传递可以方便地获取传递的数据，如回退设备信息和循环展开的步长/深度等。"
"为了能够获取所需的配置，必须通过 ``TVM_REGISTER_PASS_CONFIG_OPTION`` 注册键。例如，以下代码被循环展开传递使用："

#: ../../notebook/docs/arch/pass_infra.rst:587
msgid "Please refer to `src/tir/transforms/unroll_loop.cc`_ for more details."
msgstr "请参阅 `src/tir/transforms/unroll_loop.cc`_ 了解细节。"

#: ../../notebook/docs/arch/pass_infra.rst:590
msgid "Pass Objects"
msgstr "Pass 对象"

#: ../../notebook/docs/arch/pass_infra.rst:592
msgid ""
"``Pass`` is the base class of all pass objects. All methods here are just"
" simple wrappers that were implemented in the backend. They are defined "
"for users to conveniently interact with the base class in Python. Only a "
"``__call__`` is defined in the pass base class to make the subclasses as "
"callable objects so that they can be invoked easily (e.g., "
"``pass_xx(arg)``) for execution."
msgstr ""
"``Pass`` 是所有传递对象的基类。这里的所有方法都只是后端实现的简单包装器。"
"它们被定义出来是为了让用户能够方便地在 Python 中与基类交互。"
"在传递基类中只定义了一个 ``__call__``，使得子类成为可调用的对象，从而可以轻松地被调用（例如，``pass_xx(arg)``）来执行。"

#: ../../notebook/docs/arch/pass_infra.rst:605
msgid ""
"Some auxiliary APIs are provided to enable easy creation of passes from "
"the Python frontend and to let the pass infra control the execution. For "
"example, ``module_pass``, ``function_pass``, and ``sequential`` are "
"provided to users so that they can customize their own pass or pass "
"pipeline."
msgstr ""
"提供了一些辅助 API，以便从 Python 前端轻松创建传递，并让传递基础设施控制执行。"
"例如，``module_pass``、``function_pass`` 和 ``sequential`` 被提供给了用户，以便他们可以自定义自己的传递或传递流水线。"

#: ../../notebook/docs/arch/pass_infra.rst:610
msgid ""
"For all the passes that are implemented in the C++ backend, we provide "
"corresponding Python APIs in `python/tvm/ir/transform.py`_ and "
"`python/tvm/relay/transform/transform.py`_, respectively. For instance, "
"const folding has a Python API like the following:"
msgstr ""
"对于在 C++ 后端中实现的所有传递，我们在 `python/tvm/ir/transform.py`_ 和 `python/tvm/relay/transform/transform.py`_ 中分别提供了相应的 Python API。"
"例如，常量折叠具有如下的 Python API："

#: ../../notebook/docs/arch/pass_infra.rst:620
msgid "Users can build a pass through decoration like the following:"
msgstr "用户可以通过如下装饰来构建一个传递："

#: ../../notebook/docs/arch/pass_infra.rst:638
msgid ""
"The ``transform`` function here adds an ``abs`` function to the input "
"module, but it could be any customized optimizations at the module level."
" After creating this ``module_pass``, users can apply it on any Relay "
"module. For example, we can build an empty module and apply this pass to "
"add an ``abs`` function."
msgstr ""
"这里的 ``transform`` 函数向输入模块添加了一个 ``abs`` 函数，但它也可以是任何自定义的模块级别优化。"
"创建这个 ``module_pass`` 后，用户可以将其应用于任何 Relay 模块。例如，我们可以构建一个空模块并应用这个传递来添加一个 ``abs`` 函数。"

#: ../../notebook/docs/arch/pass_infra.rst:649
msgid ""
"Correspondingly, we also offer such functionality for ``function_pass``. "
"For instance, an example function-level pass could be written as the "
"following:"
msgstr ""
"相应地，我们也为 ``function_pass`` 提供了此类功能。例如，可以编写一个如下的函数级别传递示例："

#: ../../notebook/docs/arch/pass_infra.rst:673
msgid ""
"Alternatively, users can also directly register a pass without using the "
"decorators and then invoke it. For more examples about how to customize "
"your own optimization pipeline and debug Relay and tir passes, please "
"refer to the `use pass infra`_ tutorial."
msgstr ""
"或者，用户也可以直接注册一个传递而不使用装饰器，然后调用它。关于如何自定义优化流水线以及调试 Relay 和 tir 传递的更多示例，请参阅 `use pass infra`_ 教程。"

#: ../../notebook/docs/arch/pass_infra.rst:684
msgid ""
"One can implement a ``PassInstrument`` by using the ``pass_instrument`` "
"decorator(`python/tvm/ir/instrument.py`_) on a class implementing "
"following methods. Note that it is recommended to use the "
"``pass_instrument`` decorator to implement ``PassInstrument``, instead of"
" overriding or subclassing."
msgstr ""
"可以通过在一个实现了以下方法的类上使用 ``pass_instrument`` 装饰器（`python/tvm/ir/instrument.py`_ ）来实现一个 ``PassInstrument``。"
"注意，推荐使用 ``pass_instrument`` 装饰器来实现 ``PassInstrument``，而不是覆盖或子类化。"

#: ../../notebook/docs/arch/pass_infra.rst:689
msgid "``enter_pass_ctx``"
msgstr ""

#: ../../notebook/docs/arch/pass_infra.rst:691
msgid "This method is run when entering ``PassContext``."
msgstr "此方法是在进入 ``PassContext`` 时运行的。"

#: ../../notebook/docs/arch/pass_infra.rst:693
msgid "``exit_pass_ctx``"
msgstr ""

#: ../../notebook/docs/arch/pass_infra.rst:695
msgid "This method is run when exiting ``PassContext``."
msgstr "此方法是在退出 ``PassContext`` 时运行的。"

#: ../../notebook/docs/arch/pass_infra.rst:697
msgid "``should_run``"
msgstr ""

#: ../../notebook/docs/arch/pass_infra.rst:699
msgid ""
"This method is run before a pass is executed, returning a boolean "
"indicating whether or not the pass should be run."
msgstr ""
"此方法在传递执行前运行，返回一个布尔值，表示是否应执行该传递。"

#: ../../notebook/docs/arch/pass_infra.rst:702
msgid "``run_before_pass``"
msgstr ""

#: ../../notebook/docs/arch/pass_infra.rst:704
msgid "If a pass should be run, this method is run just before pass execution."
msgstr "如果应该运行一个传递，那么在传递执行之前会立即运行此方法。"

#: ../../notebook/docs/arch/pass_infra.rst:706
msgid "``run_after_pass``"
msgstr ""

#: ../../notebook/docs/arch/pass_infra.rst:708
msgid "This method is run right after a pass has been executed."
msgstr "此方法在传递执行后立即运行。"

#: ../../notebook/docs/arch/pass_infra.rst:710
msgid ""
"``PassInstrument`` instances can be registered through ``instruments`` "
"argument in :py:class:`tvm.transform.PassContext`."
msgstr ""
"``PassInstrument`` 实例可以通过 :py:class:`tvm.transform.PassContext` 中的 ``instruments`` 参数进行注册。"

#: ../../notebook/docs/arch/pass_infra.rst:713
msgid ""
"`use pass instrument`_ tutorial provides examples for how to implement "
"``PassInstrument`` with Python APIs."
msgstr "`use pass instrument`_ 教程提供了如何使用 Python API 实现 ``PassInstrument`` 的示例。"

#: ../../notebook/docs/arch/pass_infra.rst:718
msgid "Override Instruments in Current PassContext"
msgstr "覆盖当前 PassContext 中的 Instruments"

#: ../../notebook/docs/arch/pass_infra.rst:720
msgid ""
"``override_instruments`` method is provided to override the "
"``instruments`` of current ``PassContext``. For example, if passes are "
"run without explicitly creating a new ``PassContext``, one can still "
"register ``PassInstrument`` into the global ``PassContext`` by:"
msgstr ""
"提供了 ``override_instruments`` 方法来覆盖当前 ``PassContext`` 的 ``instruments``。"
"例如，如果传递在没有显式创建新的 ``PassContext`` 的情况下运行，仍然可以通过以下方式将 ``PassInstrument`` 注册到全局 ``PassContext`` 中："

#: ../../notebook/docs/arch/pass_infra.rst:732
msgid ""
"Note that when ``override_instruments`` is called, the ``exit_pass_ctx`` "
"method of old ``PassInstrument`` instances are called. Then the "
"``enter_pass_ctx`` method of new ``PassInstrument`` are called."
msgstr ""
"注意，当调用 ``override_instruments`` 时，会调用旧的 ``PassInstrument``  实例的 ``exit_pass_ctx`` 方法。"
"然后，会调用新的 ``PassInstrument`` 的 ``enter_pass_ctx`` 方法。"
