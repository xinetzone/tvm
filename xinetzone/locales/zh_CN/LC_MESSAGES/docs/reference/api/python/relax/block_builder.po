# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-06-05 11:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../doc/docs/reference/api/python/relax/block_builder.rst:19
msgid "tvm.relax.block_builder"
msgstr ""

#~ msgid "Developer API of constructing Relax AST."
#~ msgstr ""

#~ msgid "A builder to build Relax IR for testing and dev."
#~ msgstr ""

#~ msgid "示例"
#~ msgstr ""

#~ msgid ""
#~ "BlockBuilder can also be used to "
#~ "construct neural networks with nn.Module "
#~ "API"
#~ msgstr ""

#~ msgid "Add a Relax function or a TIR PrimFunc to the IRModule being built."
#~ msgstr ""

#~ msgid "参数"
#~ msgstr ""

#~ msgid "The function to be added."
#~ msgstr ""

#~ msgid "The name of the function to be added."
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid "**gvar** -- The global var bound to the added function."
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid ""
#~ "Begin a new scope, with optional "
#~ "parameters that are visible within the"
#~ " scope."
#~ msgstr ""

#~ msgid "Parameters that are visible within the scope."
#~ msgstr ""

#~ msgid ""
#~ "This function should be called when "
#~ "new scope is introduced (function, seq)"
#~ " to properly track the variable "
#~ "availability and help the best effort"
#~ " deduction."
#~ msgstr ""

#~ msgid ""
#~ "Generate a call node according to "
#~ "the te function. This function converts"
#~ " arguments from relax expression to "
#~ "te tensor, The callback func should "
#~ "return a te tensor or a list "
#~ "of te tensors. Please see detailed "
#~ "example in emit_te"
#~ msgstr ""

#~ msgid "A function that returns a te tensor or a list of te tensors."
#~ msgstr ""

#~ msgid "arguments passed to the function."
#~ msgstr ""

#~ msgid ""
#~ "The keyword arguments passed to the "
#~ "function. Note that the following "
#~ "keyword args are reserved:      - "
#~ "'primfunc_name_hint' for passing name hint "
#~ "to the PrimFunc       that gets "
#~ "generated.     - 'primfunc_attrs' is reserved"
#~ " for passing func attributes to       "
#~ "be added to the PrimFunc that gets"
#~ " created."
#~ msgstr ""

#~ msgid ""
#~ "The keyword arguments passed to the "
#~ "function. Note that the following "
#~ "keyword args are reserved:"
#~ msgstr ""

#~ msgid ""
#~ "'primfunc_name_hint' for passing name hint "
#~ "to the PrimFunc that gets generated."
#~ msgstr ""

#~ msgid ""
#~ "'primfunc_attrs' is reserved for passing "
#~ "func attributes to be added to the"
#~ " PrimFunc that gets created."
#~ msgstr ""

#~ msgid "**ret** -- A newly created call node"
#~ msgstr ""

#~ msgid ""
#~ "Generate a call node according to "
#~ "the te function. This method will "
#~ "generate a call_tir_with_grad node, i.e. "
#~ "a call_tir node bound with a te"
#~ " gradient function (refered by "
#~ "te_grad_name)."
#~ msgstr ""

#~ msgid ""
#~ "The registered name of the te "
#~ "gradient function associated with the "
#~ "call_tir_with_grad node. Must be provided "
#~ "as a keyword argument."
#~ msgstr ""

#~ msgid ""
#~ "The keyword arguments passed to the "
#~ "te gradient function. Optionally provided "
#~ "as a keyword argument. Default: {}."
#~ msgstr ""

#~ msgid "Returns the current BlockBuilder."
#~ msgstr ""

#~ msgid "Check if the block being built is DataflowBlock or not."
#~ msgstr ""

#~ msgid ""
#~ "**ret** -- A boolean that indicates "
#~ "if the block being built is "
#~ "DataflowBlock or not."
#~ msgstr ""

#~ msgid "Annotate a Relax dataflow block."
#~ msgstr ""

#~ msgid "**ret** -- A DataflowScope for building a Relax dataflow block."
#~ msgstr ""

#~ msgid ""
#~ "Emit an expr. This infers the "
#~ "shape and type of the expr, create"
#~ " a variable, and bind the expr "
#~ "to the variable."
#~ msgstr ""

#~ msgid "The Expr to be emitted."
#~ msgstr ""

#~ msgid "Name hint for the bound variable."
#~ msgstr ""

#~ msgid "**ret** -- A newly created variable that gets bound to the input expr."
#~ msgstr ""

#~ msgid "Emit output for the function."
#~ msgstr ""

#~ msgid "The output of the current block/function."
#~ msgstr ""

#~ msgid ""
#~ "The parameters of the function to "
#~ "be built. If params is None, it"
#~ " means the params have been "
#~ "initialized in the function with scope."
#~ msgstr ""

#~ msgid "**gvar** -- A GlobalVar representing the function"
#~ msgstr ""

#~ msgid "Emit an already normalized binding."
#~ msgstr ""

#~ msgid "The binding to be emitted."
#~ msgstr ""

#~ msgid "Emit output for the current dataflow block or function."
#~ msgstr ""

#~ msgid "**ret** -- The return variable which gets bound to the output."
#~ msgstr ""

#~ msgid ""
#~ "Emit a call node according to the"
#~ " te function. This function converts "
#~ "arguments from relax expression to te"
#~ " tensor, The callback func should "
#~ "return a te tensor or a list "
#~ "of te tensors."
#~ msgstr ""

#~ msgid ""
#~ "The keyword arguments passed to the "
#~ "function. Note that the key "
#~ "\"primfunc_name_hint\" is reserved for passing"
#~ " name hint to the PrimFunc that "
#~ "gets generated."
#~ msgstr ""

#~ msgid "**ret** -- A newly created variable that gets bound to the call code."
#~ msgstr ""

#~ msgid "will result in TVMScript"
#~ msgstr ""

#~ msgid "End the current scope. Please see `begin_scope` for details"
#~ msgstr ""

#~ msgid "Finalize the building process and return the result IRModule."
#~ msgstr ""

#~ msgid ""
#~ "Possibly rename GlobalVars in the "
#~ "IRModule to ensure name uniqueness and"
#~ " the invariant: every public function "
#~ "has the same name as its "
#~ "\"global_symbol\" attribute."
#~ msgstr ""

#~ msgid ""
#~ "Note this method should be called "
#~ "only once at the end of the "
#~ "building process, since it may "
#~ "invalidate global vars previously returned "
#~ "by this builder. See also "
#~ "tvm.relax.transform.NormalizeGlobalVar."
#~ msgstr ""

#~ msgid "**ret** -- An IRModule with Relax and TIR functions being built."
#~ msgstr ""

#~ msgid "Annotate a Relax function."
#~ msgstr ""

#~ msgid "The name of the function"
#~ msgstr ""

#~ msgid ""
#~ "The parameters of the function. If "
#~ "params is None, it means deferring "
#~ "initialization of function parameters until"
#~ " emit_func_output."
#~ msgstr ""

#~ msgid "The function attrs"
#~ msgstr ""

#~ msgid "Whether the function is annotated as pure."
#~ msgstr ""

#~ msgid ""
#~ "Whether the function is annotated as "
#~ "private. If the function is private, "
#~ "it will not have a global symbol"
#~ " attribute. If it is not private "
#~ "and not an inner function, then it"
#~ " will have a global symbol attribute"
#~ " (mapped to the function's name)"
#~ msgstr ""

#~ msgid "**ret** -- A FunctionScope for building a Relax function node."
#~ msgstr ""

#~ msgid ""
#~ "Return intermediate IRModule. For the "
#~ "situation where the IRModule is needed"
#~ " in the middle of a building "
#~ "process."
#~ msgstr ""

#~ msgid "Generate a unique name with a specified prefix."
#~ msgstr ""

#~ msgid "The name prefix."
#~ msgstr ""

#~ msgid "**ret** -- The generated name."
#~ msgstr ""

#~ msgid "Lookup a var in the binding table."
#~ msgstr ""

#~ msgid "The input var."
#~ msgstr ""

#~ msgid "**expr** -- The Expr bound to the input var."
#~ msgstr ""

#~ msgid "Emit a MatchCast."
#~ msgstr ""

#~ msgid "The value of the MatchCast to be emitted."
#~ msgstr ""

#~ msgid "The struct info to be matched."
#~ msgstr ""

#~ msgid "The name of the match cast"
#~ msgstr ""

#~ msgid ""
#~ "**ret** -- A newly created variable "
#~ "that get bounds to be the casted"
#~ " result."
#~ msgstr ""

#~ msgid "Normalize an Expr to complete its shape and type."
#~ msgstr ""

#~ msgid "The input expr."
#~ msgstr ""

#~ msgid "**ret** -- The expr with normalized shape and type."
#~ msgstr ""

#~ msgid "Start a scope for unit-testing purposes."
#~ msgstr ""

#~ msgid "List of symbolic variables that are marked as defined in scope."
#~ msgstr ""

#~ msgid "**ret** -- A TestingScope to setup builder for emit and other purposes."
#~ msgstr ""

#~ msgid "The global var referring the function to be updated."
#~ msgstr ""

#~ msgid "The updated function."
#~ msgstr ""

#~ msgid "Auxiliary scope for Dataflow block"
#~ msgstr ""

#~ msgid "Auxiliary scope for function"
#~ msgstr ""

#~ msgid "Auxiliary scope for testing purposes"
#~ msgstr ""

