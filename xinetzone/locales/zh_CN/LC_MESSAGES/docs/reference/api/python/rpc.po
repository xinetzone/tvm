# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-13 12:27+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../notebook/docs/reference/api/python/rpc.rst:19
msgid "tvm.rpc"
msgstr ""

#: of tvm.rpc:1
msgid "Lightweight TVM RPC module."
msgstr ""

#: of tvm.rpc:3
msgid ""
"RPC enables connect to a remote server, upload and launch functions. This"
" is useful to for cross-compile and remote testing, The compiler stack "
"runs on local server, while we use RPC server to run on remote runtime "
"which don't have a compiler available."
msgstr ""

#: of tvm.rpc:8
msgid ""
"The test program compiles the program on local server, upload and run "
"remote RPC server, get the result back to verify correctness."
msgstr ""

#: of tvm.rpc:1
msgid "**Classes:**"
msgstr ""

#: of tvm.rpc:1:<autosummary>:1
msgid ":py:obj:`LocalSession <tvm.rpc.LocalSession>`\\ \\(\\)"
msgstr ""

#: of tvm.rpc.client.LocalSession:1 tvm.rpc:1:<autosummary>:1
msgid "RPCSession interface backed by local environment."
msgstr ""

#: of tvm.rpc:1:<autosummary>:1
msgid ":py:obj:`PopenSession <tvm.rpc.PopenSession>`\\ \\(binary\\)"
msgstr ""

#: of tvm.rpc.client.PopenSession:1 tvm.rpc:1:<autosummary>:1
msgid "RPCSession interface backed by popen."
msgstr ""

#: of tvm.rpc:1:<autosummary>:1
msgid ":py:obj:`RPCSession <tvm.rpc.RPCSession>`\\ \\(sess\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession:1 tvm.rpc:1:<autosummary>:1
msgid "RPC Client session module"
msgstr ""

#: of tvm.rpc:1:<autosummary>:1
msgid ""
":py:obj:`Server <tvm.rpc.Server>`\\ \\(\\[host\\, port\\, port\\_end\\, "
"is\\_proxy\\, ...\\]\\)"
msgstr ""

#: of tvm.rpc.server.Server:1 tvm.rpc:1:<autosummary>:1
msgid "Start RPC server on a separate process."
msgstr ""

#: of tvm.rpc:1:<autosummary>:1
msgid ":py:obj:`TrackerSession <tvm.rpc.TrackerSession>`\\ \\(addr\\)"
msgstr ""

#: of tvm.rpc.client.TrackerSession:1 tvm.rpc:1:<autosummary>:1
msgid "Tracker client session."
msgstr ""

#: of tvm.rpc:1
msgid "**Functions:**"
msgstr ""

#: of tvm.rpc.client.LocalSession:1:<autosummary>:1
msgid ""
":py:obj:`connect <tvm.rpc.connect>`\\ \\(url\\, port\\[\\, key\\, "
"session\\_timeout\\, ...\\]\\)"
msgstr ""

#: of tvm.rpc.client.LocalSession:1:<autosummary>:1 tvm.rpc.client.connect:1
msgid "Connect to RPC Server"
msgstr ""

#: of tvm.rpc.client.LocalSession:1:<autosummary>:1
msgid ":py:obj:`connect_tracker <tvm.rpc.connect_tracker>`\\ \\(url\\, port\\)"
msgstr ""

#: of tvm.rpc.client.LocalSession:1:<autosummary>:1
#: tvm.rpc.client.connect_tracker:1
msgid "Connect to a RPC tracker"
msgstr ""

#: of tvm.rpc.client.LocalSession:1:<autosummary>:1
msgid ""
":py:obj:`with_minrpc <tvm.rpc.with_minrpc>`\\ \\(compile\\_func\\[\\, "
"server\\, runtime\\]\\)"
msgstr ""

#: of tvm.rpc.client.LocalSession:1:<autosummary>:1
#: tvm.rpc.minrpc.with_minrpc:1
msgid "Attach the compiler function with minrpc related options."
msgstr ""

#: of tvm.rpc.client.LocalSession:3
msgid ""
"This class can be used to implement functions that need to be ran both "
"locally and remotely."
msgstr ""

#: of tvm.rpc.client.PopenSession:4 tvm.rpc.client.RPCSession.device:4
#: tvm.rpc.client.RPCSession.download:4
#: tvm.rpc.client.RPCSession.download_linked_module:4
#: tvm.rpc.client.RPCSession.get_function:4 tvm.rpc.client.RPCSession.listdir:4
#: tvm.rpc.client.RPCSession.load_module:4 tvm.rpc.client.RPCSession.remove:4
#: tvm.rpc.client.RPCSession.upload:4 tvm.rpc.client.TrackerSession:4
#: tvm.rpc.client.TrackerSession.request:4
#: tvm.rpc.client.TrackerSession.request_and_run:7 tvm.rpc.client.connect:4
#: tvm.rpc.client.connect_tracker:4 tvm.rpc.minrpc.with_minrpc:4
#: tvm.rpc.server.Server:8
msgid "Parameters"
msgstr ""

#: of tvm.rpc.client.PopenSession:5
msgid "binary"
msgstr ""

#: of tvm.rpc.client.PopenSession:-1
msgid "List[Union[str, bytes]]"
msgstr ""

#: of tvm.rpc.client.PopenSession:6
msgid "The binary to be executed."
msgstr ""

#: of tvm.rpc.client.RPCSession:3
msgid "Do not directly create the object, call connect"
msgstr ""

#: of tvm.rpc.client.RPCSession:1 tvm.rpc.client.TrackerSession:1
#: tvm.rpc.server.Server:1
msgid "**Methods:**"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`cl <tvm.rpc.RPCSession.cl>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1
#: tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid "Construct OpenCL device."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`cpu <tvm.rpc.RPCSession.cpu>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.cpu:1
msgid "Construct CPU device."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`cuda <tvm.rpc.RPCSession.cuda>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.cuda:1
msgid "Construct CUDA GPU device."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ""
":py:obj:`device <tvm.rpc.RPCSession.device>`\\ \\(dev\\_type\\[\\, "
"dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.device:1
msgid "Construct a remote device."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`download <tvm.rpc.RPCSession.download>`\\ \\(path\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.download:1
msgid "Download file from remote temp folder."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ""
":py:obj:`download_linked_module "
"<tvm.rpc.RPCSession.download_linked_module>`\\ \\(path\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.download_linked_module:1
msgid "Link a module in the remote and download it."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`ext_dev <tvm.rpc.RPCSession.ext_dev>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.ext_dev:1
msgid "Construct extension device."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`get_function <tvm.rpc.RPCSession.get_function>`\\ \\(name\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.get_function:1
msgid "Get function from the session."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`hexagon <tvm.rpc.RPCSession.hexagon>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.hexagon:1
msgid "Construct Hexagon device."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`listdir <tvm.rpc.RPCSession.listdir>`\\ \\(path\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.listdir:1
msgid "ls files from remote temp folder."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`load_module <tvm.rpc.RPCSession.load_module>`\\ \\(path\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.load_module:1
msgid "Load a remote module, the file need to be uploaded first."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`metal <tvm.rpc.RPCSession.metal>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.metal:1
msgid "Construct Metal device."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`remove <tvm.rpc.RPCSession.remove>`\\ \\(path\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.remove:1
msgid "Remove file from remote temp folder."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`rocm <tvm.rpc.RPCSession.rocm>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.rocm:1
msgid "Construct ROCm device."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`system_lib <tvm.rpc.RPCSession.system_lib>`\\ \\(\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.system_lib:1
msgid "Get system-wide library module."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`upload <tvm.rpc.RPCSession.upload>`\\ \\(data\\[\\, target\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.upload:1
msgid "Upload file to remote runtime temp folder"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`vulkan <tvm.rpc.RPCSession.vulkan>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.vulkan:1
msgid "Construct Vulkan device."
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
msgid ":py:obj:`webgpu <tvm.rpc.RPCSession.webgpu>`\\ \\(\\[dev\\_id\\]\\)"
msgstr ""

#: of tvm.rpc.client.RPCSession.cl:1:<autosummary>:1
#: tvm.rpc.client.RPCSession.webgpu:1
msgid "Construct WebGPU device."
msgstr ""

#: of tvm.rpc.client.RPCSession.device:5
msgid "dev_type: int or str"
msgstr ""

#: of tvm.rpc.client.RPCSession.device:7
msgid "dev_id: int, optional"
msgstr ""

#: of tvm.rpc.client.RPCSession.device:10 tvm.rpc.client.RPCSession.download:9
#: tvm.rpc.client.RPCSession.download_linked_module:9
#: tvm.rpc.client.RPCSession.get_function:9 tvm.rpc.client.RPCSession.listdir:9
#: tvm.rpc.client.RPCSession.load_module:9
#: tvm.rpc.client.RPCSession.system_lib:4 tvm.rpc.client.connect:28
#: tvm.rpc.client.connect_tracker:12 tvm.rpc.minrpc.with_minrpc:15
msgid "Returns"
msgstr ""

#: of tvm.rpc.client.RPCSession.device:11
msgid "dev: Device"
msgstr ""

#: of tvm.rpc.client.RPCSession.device:12
msgid "The corresponding encoded remote device."
msgstr ""

#: of tvm.rpc.client.RPCSession.download:6
#: tvm.rpc.client.RPCSession.download_linked_module:6
#: tvm.rpc.client.RPCSession.load_module:6
msgid "path"
msgstr ""

#: of tvm.rpc.client.RPCSession.download:-1
#: tvm.rpc.client.RPCSession.download_linked_module:-1
#: tvm.rpc.client.RPCSession.get_function:-1
#: tvm.rpc.client.RPCSession.load_module:-1
#: tvm.rpc.client.TrackerSession.request:-1
#: tvm.rpc.client.TrackerSession.request_and_run:-1 tvm.rpc.client.connect:-1
#: tvm.rpc.client.connect_tracker:-1 tvm.rpc.minrpc.with_minrpc:-1
#: tvm.rpc.server.Server:-1
msgid "str"
msgstr ""

#: of tvm.rpc.client.RPCSession.download:6
#: tvm.rpc.client.RPCSession.download_linked_module:6
#: tvm.rpc.client.RPCSession.listdir:6 tvm.rpc.client.RPCSession.load_module:6
#: tvm.rpc.client.RPCSession.remove:6
msgid "The relative location to remote temp folder."
msgstr ""

#: of tvm.rpc.client.RPCSession.download:10
#: tvm.rpc.client.RPCSession.download_linked_module:11
msgid "blob"
msgstr ""

#: of tvm.rpc.client.RPCSession.download:-1
#: tvm.rpc.client.RPCSession.download_linked_module:-1
msgid "bytearray"
msgstr ""

#: of tvm.rpc.client.RPCSession.download:11
#: tvm.rpc.client.RPCSession.download_linked_module:11
msgid "The result blob from the file."
msgstr ""

#: of tvm.rpc.client.RPCSession.download_linked_module:14
#: tvm.rpc.server.Server:52
msgid "Note"
msgstr ""

#: of tvm.rpc.client.RPCSession.download_linked_module:15
msgid ""
"This function can be helpful when a linker is not available on the local "
"client."
msgstr ""

#: of tvm.rpc.client.RPCSession.download_linked_module:19
#: tvm.rpc.client.connect:33
msgid "Examples"
msgstr ""

#: of tvm.rpc.client.RPCSession.get_function:6
msgid "name"
msgstr ""

#: of tvm.rpc.client.RPCSession.get_function:6
msgid "The name of the function"
msgstr ""

#: of tvm.rpc.client.RPCSession.get_function:10
msgid "f"
msgstr ""

#: of tvm.rpc.client.RPCSession.get_function:-1
msgid "Function"
msgstr ""

#: of tvm.rpc.client.RPCSession.get_function:11
msgid "The result function."
msgstr ""

#: of tvm.rpc.client.RPCSession.listdir:6 tvm.rpc.client.RPCSession.remove:5
msgid "path: str"
msgstr ""

#: of tvm.rpc.client.RPCSession.listdir:10
msgid "dirs: str"
msgstr ""

#: of tvm.rpc.client.RPCSession.listdir:11
msgid "The files in the given directory with split token ','."
msgstr ""

#: of tvm.rpc.client.RPCSession.load_module:10
msgid "m"
msgstr ""

#: of tvm.rpc.client.RPCSession.load_module:-1
msgid "Module"
msgstr ""

#: of tvm.rpc.client.RPCSession.load_module:11
msgid "The remote module containing remote function."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:6
msgid "module"
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:-1
msgid "runtime.Module"
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:6
msgid "The system-wide library module."
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:9
msgid "See Also"
msgstr ""

#: of tvm.rpc.client.RPCSession.system_lib:10
msgid "tvm.runtime.system_lib"
msgstr ""

#: of tvm.rpc.client.RPCSession.upload:6
msgid "data"
msgstr ""

#: of tvm.rpc.client.RPCSession.upload:-1
msgid "str or bytearray"
msgstr ""

#: of tvm.rpc.client.RPCSession.upload:6
msgid "The file name or binary in local to upload."
msgstr ""

#: of tvm.rpc.client.RPCSession.upload:8
msgid "target"
msgstr ""

#: of tvm.rpc.client.RPCSession.upload:-1 tvm.rpc.client.connect:-1
#: tvm.rpc.server.Server:-1
msgid "str, optional"
msgstr ""

#: of tvm.rpc.client.RPCSession.upload:9
msgid "The path in remote"
msgstr ""

#: of tvm.rpc.server.Server:3
msgid ""
"This is a simple python implementation based on multi-processing. It is "
"also possible to implement a similar C based server with TVM runtime "
"which does not depend on the python."
msgstr ""

#: of tvm.rpc.server.Server:10
msgid "host"
msgstr ""

#: of tvm.rpc.server.Server:10
msgid "The host url of the server."
msgstr ""

#: of tvm.rpc.client.connect:9 tvm.rpc.client.connect_tracker:9
#: tvm.rpc.server.Server:13
msgid "port"
msgstr ""

#: of tvm.rpc.client.connect:-1 tvm.rpc.client.connect_tracker:-1
#: tvm.rpc.server.Server:-1
msgid "int"
msgstr ""

#: of tvm.rpc.server.Server:13
msgid "The port to be bind to"
msgstr ""

#: of tvm.rpc.server.Server:16
msgid "port_end"
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:-1
#: tvm.rpc.client.TrackerSession.request_and_run:-1 tvm.rpc.server.Server:-1
msgid "int, optional"
msgstr ""

#: of tvm.rpc.server.Server:16
msgid "The end port to search"
msgstr ""

#: of tvm.rpc.server.Server:21
msgid "is_proxy"
msgstr ""

#: of tvm.rpc.server.Server:-1
msgid "bool, optional"
msgstr ""

#: of tvm.rpc.server.Server:19
msgid ""
"Whether the address specified is a proxy. If this is true, the host and "
"port actually corresponds to the address of the proxy server."
msgstr ""

#: of tvm.rpc.server.Server:25
msgid "tracker_addr: Tuple (str, int) , optional"
msgstr ""

#: of tvm.rpc.server.Server:24
msgid ""
"The address of RPC Tracker in tuple(host, ip) format. If is not None, the"
" server will register itself to the tracker."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:6
#: tvm.rpc.client.TrackerSession.request_and_run:9 tvm.rpc.client.connect:12
#: tvm.rpc.server.Server:28
msgid "key"
msgstr ""

#: of tvm.rpc.server.Server:28
msgid "The key used to identify the device type in tracker."
msgstr ""

#: of tvm.rpc.server.Server:31
msgid "load_library"
msgstr ""

#: of tvm.rpc.server.Server:31
msgid "List of additional libraries to be loaded during execution."
msgstr ""

#: of tvm.rpc.server.Server:34
msgid "custom_addr: str, optional"
msgstr ""

#: of tvm.rpc.server.Server:34
msgid "Custom IP Address to Report to RPC Tracker"
msgstr ""

#: of tvm.rpc.server.Server:37
msgid "silent: bool, optional"
msgstr ""

#: of tvm.rpc.server.Server:37
msgid "Whether run this server in silent mode."
msgstr ""

#: of tvm.rpc.server.Server:40
msgid "no_fork: bool, optional"
msgstr ""

#: of tvm.rpc.server.Server:40
msgid "Whether forbid fork in multiprocessing."
msgstr ""

#: of tvm.rpc.server.Server:43
msgid "server_init_callback: Callable, optional"
msgstr ""

#: of tvm.rpc.server.Server:43
msgid "Additional initialization function when starting the server."
msgstr ""

#: of tvm.rpc.server.Server:46
msgid "reuse_addr: bool, optional"
msgstr ""

#: of tvm.rpc.server.Server:46
msgid "Allows the kernel to reuse a local socket in TIME_WAIT state."
msgstr ""

#: of tvm.rpc.server.Server:49
msgid "timeout: float, optional"
msgstr ""

#: of tvm.rpc.server.Server:49
msgid "set a timeout for all operations on the socket"
msgstr ""

#: of tvm.rpc.server.Server:53
msgid ""
"The RPC server only sees functions in the tvm namespace. To bring "
"additional custom functions to the server env, you can use "
"server_init_callback."
msgstr ""

#: of tvm.rpc.server.Server.terminate:1:<autosummary>:1
msgid ":py:obj:`terminate <tvm.rpc.Server.terminate>`\\ \\(\\)"
msgstr ""

#: of tvm.rpc.server.Server.terminate:1
#: tvm.rpc.server.Server.terminate:1:<autosummary>:1
msgid "Terminate the server process"
msgstr ""

#: of tvm.rpc.client.TrackerSession:6
msgid "addr"
msgstr ""

#: of tvm.rpc.client.TrackerSession:-1
msgid "tuple"
msgstr ""

#: of tvm.rpc.client.TrackerSession:6
msgid "The address tuple"
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
msgid ":py:obj:`close <tvm.rpc.TrackerSession.close>`\\ \\(\\)"
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1
#: tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
msgid "Close the tracker connection."
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
msgid ""
":py:obj:`request <tvm.rpc.TrackerSession.request>`\\ \\(key\\[\\, "
"priority\\, session\\_timeout\\, ...\\]\\)"
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
#: tvm.rpc.client.TrackerSession.request:1
msgid "Request a new connection from the tracker."
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
msgid ""
":py:obj:`request_and_run <tvm.rpc.TrackerSession.request_and_run>`\\ "
"\\(key\\, func\\[\\, priority\\, ...\\]\\)"
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
#: tvm.rpc.client.TrackerSession.request_and_run:1
msgid "Request a resource from tracker and run the func."
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
msgid ":py:obj:`summary <tvm.rpc.TrackerSession.summary>`\\ \\(\\)"
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
#: tvm.rpc.client.TrackerSession.summary:1
msgid "Get the summary dict of the tracker."
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
msgid ":py:obj:`text_summary <tvm.rpc.TrackerSession.text_summary>`\\ \\(\\)"
msgstr ""

#: of tvm.rpc.client.TrackerSession.close:1:<autosummary>:1
#: tvm.rpc.client.TrackerSession.text_summary:1
msgid "Get a text summary of the tracker."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:6
#: tvm.rpc.client.TrackerSession.request_and_run:9
msgid "The type key of the device."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:9
#: tvm.rpc.client.TrackerSession.request_and_run:15
msgid "priority"
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:9
#: tvm.rpc.client.TrackerSession.request_and_run:15
msgid "The priority of the request."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:14
#: tvm.rpc.client.TrackerSession.request_and_run:20 tvm.rpc.client.connect:17
msgid "session_timeout"
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:-1
#: tvm.rpc.client.TrackerSession.request_and_run:-1 tvm.rpc.client.connect:-1
msgid "float, optional"
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:12
#: tvm.rpc.client.TrackerSession.request_and_run:18
msgid ""
"The duration of the session, allows server to kill the connection when "
"duration is longer than this value. When duration is zero, it means the "
"request must always be kept alive."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:17
#: tvm.rpc.client.TrackerSession.request_and_run:22
msgid "max_retry"
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:17
msgid "Maximum number of times to retry before give up."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:21
msgid "session_constructor_args"
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:-1
msgid "list, optional"
msgstr ""

#: of tvm.rpc.client.TrackerSession.request:20 tvm.rpc.client.connect:20
msgid ""
"List of additional arguments to passed as the remote session constructor."
" The first element of the list is always a string specifying the name of "
"the session constructor, the following args are the positional args to "
"that function."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request_and_run:3
msgid ""
"This function safe-guard rare server node dropout during execution. In "
"such case, a new resource will be requested and func will be ran again."
msgstr ""

#: of tvm.rpc.client.TrackerSession.request_and_run:12
msgid "func"
msgstr ""

#: of tvm.rpc.client.TrackerSession.request_and_run:-1
msgid "function of session -> value"
msgstr ""

#: of tvm.rpc.client.TrackerSession.request_and_run:12
msgid "A stateless function"
msgstr ""

#: of tvm.rpc.client.TrackerSession.request_and_run:23
msgid "Maximum number of times to retry the function before give up."
msgstr ""

#: of tvm.rpc.client.connect:6 tvm.rpc.client.connect_tracker:6
msgid "url"
msgstr ""

#: of tvm.rpc.client.connect:6 tvm.rpc.client.connect_tracker:6
msgid "The url of the host"
msgstr ""

#: of tvm.rpc.client.connect:9 tvm.rpc.client.connect_tracker:9
msgid "The port to connect to"
msgstr ""

#: of tvm.rpc.client.connect:12
msgid "Additional key to match server"
msgstr ""

#: of tvm.rpc.client.connect:15
msgid ""
"The duration of the session in seconds, allows server to kill the "
"connection when duration is longer than this value. When duration is "
"zero, it means the request must always be kept alive."
msgstr ""

#: of tvm.rpc.client.connect:22
msgid "session_constructor_args: List"
msgstr ""

#: of tvm.rpc.client.connect:25
msgid "enable_logging: boolean"
msgstr ""

#: of tvm.rpc.client.connect:25
msgid "flag to enable/disable logging. Logging is disabled by default."
msgstr ""

#: of tvm.rpc.client.connect:30 tvm.rpc.client.connect_tracker:13
msgid "sess"
msgstr ""

#: of tvm.rpc.client.connect:-1
msgid "RPCSession"
msgstr ""

#: of tvm.rpc.client.connect:30
msgid "The connected session."
msgstr ""

#: of tvm.rpc.client.connect:34
msgid "Normal usage .. code-block:: python"
msgstr ""

#: of tvm.rpc.client.connect:37
msgid "client = rpc.connect(server_url, server_port, server_key)"
msgstr ""

#: of tvm.rpc.client.connect:39
msgid ""
"Session_constructor can be used to customize the session in the remote "
"The following code connects to a remote internal server via a proxy by "
"constructing another RPCClientSession on the proxy machine and use that "
"as the serving session of the proxy endpoint."
msgstr ""

#: of tvm.rpc.client.connect_tracker:-1
msgid "TrackerSession"
msgstr ""

#: of tvm.rpc.client.connect_tracker:14
msgid "The connected tracker session."
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:6
msgid "compile_func"
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:-1
msgid "Union[str, Callable[[str, str, Optional[str]], None]]"
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:6
msgid "The compilation function to decorate."
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:9
msgid "server"
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:9
msgid "The server type."
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:12
msgid "runtime"
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:12
msgid "The runtime library."
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:16
msgid "fcompile"
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:-1
msgid "function"
msgstr ""

#: of tvm.rpc.minrpc.with_minrpc:17
msgid "The return compilation."
msgstr ""

#~ msgid "Lightweight TVM RPC module."
#~ msgstr ""

#~ msgid ""
#~ "RPC enables connect to a remote "
#~ "server, upload and launch functions. "
#~ "This is useful to for cross-"
#~ "compile and remote testing, The compiler"
#~ " stack runs on local server, while"
#~ " we use RPC server to run on"
#~ " remote runtime which don't have a"
#~ " compiler available."
#~ msgstr ""

#~ msgid ""
#~ "The test program compiles the program"
#~ " on local server, upload and run "
#~ "remote RPC server, get the result "
#~ "back to verify correctness."
#~ msgstr ""

#~ msgid "**Classes:**"
#~ msgstr ""

#~ msgid ":py:obj:`LocalSession <tvm.rpc.LocalSession>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "RPCSession interface backed by local environment."
#~ msgstr ""

#~ msgid ":py:obj:`PopenSession <tvm.rpc.PopenSession>`\\ \\(binary\\)"
#~ msgstr ""

#~ msgid "RPCSession interface backed by popen."
#~ msgstr ""

#~ msgid ":py:obj:`RPCSession <tvm.rpc.RPCSession>`\\ \\(sess\\)"
#~ msgstr ""

#~ msgid "RPC Client session module"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Server <tvm.rpc.Server>`\\ \\(\\[host\\, "
#~ "port\\, port\\_end\\, is\\_proxy\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "Start RPC server on a separate process."
#~ msgstr ""

#~ msgid ":py:obj:`TrackerSession <tvm.rpc.TrackerSession>`\\ \\(addr\\)"
#~ msgstr ""

#~ msgid "Tracker client session."
#~ msgstr ""

#~ msgid "**Functions:**"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`connect <tvm.rpc.connect>`\\ \\(url\\, "
#~ "port\\[\\, key\\, session\\_timeout\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "Connect to RPC Server"
#~ msgstr ""

#~ msgid ":py:obj:`connect_tracker <tvm.rpc.connect_tracker>`\\ \\(url\\, port\\)"
#~ msgstr ""

#~ msgid "Connect to a RPC tracker"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`with_minrpc <tvm.rpc.with_minrpc>`\\ "
#~ "\\(compile\\_func\\[\\, server\\, runtime\\]\\)"
#~ msgstr ""

#~ msgid "Attach the compiler function with minrpc related options."
#~ msgstr ""

#~ msgid ""
#~ "This class can be used to "
#~ "implement functions that need to be "
#~ "ran both locally and remotely."
#~ msgstr ""

#~ msgid "参数"
#~ msgstr ""

#~ msgid "The binary to be executed."
#~ msgstr ""

#~ msgid "Do not directly create the obhect, call connect"
#~ msgstr ""

#~ msgid "**Methods:**"
#~ msgstr ""

#~ msgid ":py:obj:`cl <tvm.rpc.RPCSession.cl>`\\ \\(\\[dev\\_id\\]\\)"
#~ msgstr ""

#~ msgid "Construct OpenCL device."
#~ msgstr ""

#~ msgid ":py:obj:`cpu <tvm.rpc.RPCSession.cpu>`\\ \\(\\[dev\\_id\\]\\)"
#~ msgstr ""

#~ msgid "Construct CPU device."
#~ msgstr ""

#~ msgid ":py:obj:`cuda <tvm.rpc.RPCSession.cuda>`\\ \\(\\[dev\\_id\\]\\)"
#~ msgstr ""

#~ msgid "Construct CUDA GPU device."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`device <tvm.rpc.RPCSession.device>`\\ "
#~ "\\(dev\\_type\\[\\, dev\\_id\\]\\)"
#~ msgstr ""

#~ msgid "Construct a remote device."
#~ msgstr ""

#~ msgid ":py:obj:`download <tvm.rpc.RPCSession.download>`\\ \\(path\\)"
#~ msgstr ""

#~ msgid "Download file from remote temp folder."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`download_linked_module "
#~ "<tvm.rpc.RPCSession.download_linked_module>`\\ \\(path\\)"
#~ msgstr ""

#~ msgid "Link a module in the remote and download it."
#~ msgstr ""

#~ msgid ":py:obj:`ext_dev <tvm.rpc.RPCSession.ext_dev>`\\ \\(\\[dev\\_id\\]\\)"
#~ msgstr ""

#~ msgid "Construct extension device."
#~ msgstr ""

#~ msgid ":py:obj:`get_function <tvm.rpc.RPCSession.get_function>`\\ \\(name\\)"
#~ msgstr ""

#~ msgid "Get function from the session."
#~ msgstr ""

#~ msgid ":py:obj:`hexagon <tvm.rpc.RPCSession.hexagon>`\\ \\(\\[dev\\_id\\]\\)"
#~ msgstr ""

#~ msgid "Construct Hexagon device."
#~ msgstr ""

#~ msgid ":py:obj:`load_module <tvm.rpc.RPCSession.load_module>`\\ \\(path\\)"
#~ msgstr ""

#~ msgid "Load a remote module, the file need to be uploaded first."
#~ msgstr ""

#~ msgid ":py:obj:`metal <tvm.rpc.RPCSession.metal>`\\ \\(\\[dev\\_id\\]\\)"
#~ msgstr ""

#~ msgid "Construct Metal device."
#~ msgstr ""

#~ msgid ":py:obj:`remove <tvm.rpc.RPCSession.remove>`\\ \\(path\\)"
#~ msgstr ""

#~ msgid "Remove file from remote temp folder."
#~ msgstr ""

#~ msgid ":py:obj:`rocm <tvm.rpc.RPCSession.rocm>`\\ \\(\\[dev\\_id\\]\\)"
#~ msgstr ""

#~ msgid "Construct ROCm device."
#~ msgstr ""

#~ msgid ":py:obj:`system_lib <tvm.rpc.RPCSession.system_lib>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "Get system-wide library module."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`upload <tvm.rpc.RPCSession.upload>`\\ "
#~ "\\(data\\[\\, target\\]\\)"
#~ msgstr ""

#~ msgid "Upload file to remote runtime temp folder"
#~ msgstr ""

#~ msgid ":py:obj:`vulkan <tvm.rpc.RPCSession.vulkan>`\\ \\(\\[dev\\_id\\]\\)"
#~ msgstr ""

#~ msgid "Construct Vulkan device."
#~ msgstr ""

#~ msgid ":py:obj:`webgpu <tvm.rpc.RPCSession.webgpu>`\\ \\(\\[dev\\_id\\]\\)"
#~ msgstr ""

#~ msgid "Construct WebGPU device."
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid "**dev** -- The corresponding encoded remote device."
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid "The relative location to remote temp folder."
#~ msgstr ""

#~ msgid "**blob** -- The result blob from the file."
#~ msgstr ""

#~ msgid ""
#~ "This function can be helpful when "
#~ "a linker is not available on the"
#~ " local client."
#~ msgstr ""

#~ msgid "实际案例"
#~ msgstr ""

#~ msgid "The name of the function"
#~ msgstr ""

#~ msgid "**f** -- The result function."
#~ msgstr ""

#~ msgid "**m** -- The remote module containing remote function."
#~ msgstr ""

#~ msgid "**module** -- The system-wide library module."
#~ msgstr ""

#~ msgid ":obj:`tvm.runtime.system_lib`"
#~ msgstr ""

#~ msgid "The file name or binary in local to upload."
#~ msgstr ""

#~ msgid "The path in remote"
#~ msgstr ""

#~ msgid ""
#~ "This is a simple python implementation"
#~ " based on multi-processing. It is "
#~ "also possible to implement a similar "
#~ "C based server with TVM runtime "
#~ "which does not depend on the "
#~ "python."
#~ msgstr ""

#~ msgid "The host url of the server."
#~ msgstr ""

#~ msgid "The port to be bind to"
#~ msgstr ""

#~ msgid "The end port to search"
#~ msgstr ""

#~ msgid ""
#~ "Whether the address specified is a "
#~ "proxy. If this is true, the host"
#~ " and port actually corresponds to the"
#~ " address of the proxy server."
#~ msgstr ""

#~ msgid ""
#~ "The address of RPC Tracker in "
#~ "tuple(host, ip) format. If is not "
#~ "None, the server will register itself"
#~ " to the tracker."
#~ msgstr ""

#~ msgid "The key used to identify the device type in tracker."
#~ msgstr ""

#~ msgid "List of additional libraries to be loaded during execution."
#~ msgstr ""

#~ msgid "Custom IP Address to Report to RPC Tracker"
#~ msgstr ""

#~ msgid "Whether run this server in silent mode."
#~ msgstr ""

#~ msgid "Whether forbid fork in multiprocessing."
#~ msgstr ""

#~ msgid "Additional initialization function when starting the server."
#~ msgstr ""

#~ msgid ""
#~ "The RPC server only sees functions "
#~ "in the tvm namespace. To bring "
#~ "additional custom functions to the "
#~ "server env, you can use "
#~ "server_init_callback."
#~ msgstr ""

#~ msgid ":py:obj:`terminate <tvm.rpc.Server.terminate>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "Terminate the server process"
#~ msgstr ""

#~ msgid "The address tuple"
#~ msgstr ""

#~ msgid ":py:obj:`close <tvm.rpc.TrackerSession.close>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "Close the tracker connection."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`request <tvm.rpc.TrackerSession.request>`\\ "
#~ "\\(key\\[\\, priority\\, session\\_timeout\\, "
#~ "...\\]\\)"
#~ msgstr ""

#~ msgid "Request a new connection from the tracker."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`request_and_run "
#~ "<tvm.rpc.TrackerSession.request_and_run>`\\ \\(key\\, "
#~ "func\\[\\, priority\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "Request a resource from tracker and run the func."
#~ msgstr ""

#~ msgid ":py:obj:`summary <tvm.rpc.TrackerSession.summary>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "Get the summary dict of the tracker."
#~ msgstr ""

#~ msgid ":py:obj:`text_summary <tvm.rpc.TrackerSession.text_summary>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "Get a text summary of the tracker."
#~ msgstr ""

#~ msgid "The type key of the device."
#~ msgstr ""

#~ msgid "The priority of the request."
#~ msgstr ""

#~ msgid ""
#~ "The duration of the session, allows "
#~ "server to kill the connection when "
#~ "duration is longer than this value. "
#~ "When duration is zero, it means "
#~ "the request must always be kept "
#~ "alive."
#~ msgstr ""

#~ msgid "Maximum number of times to retry before give up."
#~ msgstr ""

#~ msgid ""
#~ "List of additional arguments to passed"
#~ " as the remote session constructor. "
#~ "The first element of the list is"
#~ " always a string specifying the name"
#~ " of the session constructor, the "
#~ "following args are the positional args"
#~ " to that function."
#~ msgstr ""

#~ msgid ""
#~ "This function safe-guard rare server "
#~ "node dropout during execution. In such"
#~ " case, a new resource will be "
#~ "requested and func will be ran "
#~ "again."
#~ msgstr ""

#~ msgid "A stateless function"
#~ msgstr ""

#~ msgid "Maximum number of times to retry the function before give up."
#~ msgstr ""

#~ msgid "The url of the host"
#~ msgstr ""

#~ msgid "The port to connect to"
#~ msgstr ""

#~ msgid "Additional key to match server"
#~ msgstr ""

#~ msgid ""
#~ "The duration of the session in "
#~ "seconds, allows server to kill the "
#~ "connection when duration is longer than"
#~ " this value. When duration is zero,"
#~ " it means the request must always "
#~ "be kept alive."
#~ msgstr ""

#~ msgid "**sess** -- The connected session."
#~ msgstr ""

#~ msgid "Normal usage .. code-block:: python"
#~ msgstr ""

#~ msgid "client = rpc.connect(server_url, server_port, server_key)"
#~ msgstr ""

#~ msgid ""
#~ "Session_constructor can be used to "
#~ "customize the session in the remote "
#~ "The following code connects to a "
#~ "remote internal server via a proxy "
#~ "by constructing another RPCClientSession on"
#~ " the proxy machine and use that "
#~ "as the serving session of the "
#~ "proxy endpoint."
#~ msgstr ""

#~ msgid "**sess** -- The connected tracker session."
#~ msgstr ""

#~ msgid "The compilation function to decorate."
#~ msgstr ""

#~ msgid "The server type."
#~ msgstr ""

#~ msgid "The runtime library."
#~ msgstr ""

#~ msgid "**fcompile** -- The return compilation."
#~ msgstr ""

