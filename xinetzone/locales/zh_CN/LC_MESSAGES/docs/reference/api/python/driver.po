# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-07-23 10:40+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../doc/docs/reference/api/python/driver.rst:19
msgid "tvm.driver"
msgstr ""

#: of tvm.driver:1
msgid "Namespace for driver APIs"
msgstr ""

#: of tvm.driver.build_module.compile:1
msgid "Compile an IRModule to a runtime executable."
msgstr ""

#: of tvm.driver.build_module.compile:3
msgid ""
"This function serves as a unified entry point for compiling both TIR and "
"Relax modules. It automatically detects the module type and routes to the"
" appropriate build function."
msgstr ""

#: ../../doc/docs/reference/api/python/driver.rst
msgid "参数"
msgstr ""

#: of tvm.driver.build_module.compile:6
msgid ""
"The input module to be compiled. Can be a PrimFunc or an IRModule "
"containing TIR or Relax functions."
msgstr ""

#: of tvm.driver.build_module.compile:9
msgid "The target platform to compile for."
msgstr ""

#: of tvm.driver.build_module.compile:11
msgid ""
"The compilation pipeline to use for Relax functions. Only used if the "
"module contains Relax functions."
msgstr ""

#: of tvm.driver.build_module.compile:14
msgid "The compilation pipeline to use for TIR functions."
msgstr ""

#: ../../doc/docs/reference/api/python/driver.rst
msgid "返回"
msgstr ""

#: of tvm.driver.build_module.compile:17
msgid "A runtime executable that can be loaded and executed."
msgstr ""

#: ../../doc/docs/reference/api/python/driver.rst
msgid "返回类型"
msgstr ""

#~ msgid "Lowering step before build into target."
#~ msgstr ""

#~ msgid "The TE schedule or TensorIR PrimFunc/IRModule to be built"
#~ msgstr ""

#~ msgid ""
#~ "The argument lists to the function "
#~ "for TE schedule.  It should be "
#~ "None if we want to lower TensorIR."
#~ msgstr ""

#~ msgid "The argument lists to the function for TE schedule."
#~ msgstr ""

#~ msgid "It should be None if we want to lower TensorIR."
#~ msgstr ""

#~ msgid "The name of the result function."
#~ msgstr ""

#~ msgid ""
#~ "Dictionary that maps the Tensor to "
#~ "Buffer which specified the data layout"
#~ " requirement of the function. By "
#~ "default, a new compact buffer is "
#~ "created for each tensor in the "
#~ "argument."
#~ msgstr ""

#~ msgid ""
#~ "Whether only output simple and compact"
#~ " statement, this will skip LoopPartition,"
#~ " api wrapper generation and Unrolling."
#~ msgstr ""

#~ msgid "**m** -- The result IRModule"
#~ msgstr ""

#~ msgid ""
#~ "Build a function with arguments as "
#~ "signature. Code will be generated for"
#~ " devices coupled with target information."
#~ msgstr ""

#~ msgid "The input to be built"
#~ msgstr ""

#~ msgid "The argument lists to the function."
#~ msgstr ""

#~ msgid "The target and option of the compilation."
#~ msgstr ""

#~ msgid ""
#~ "Host compilation target, if target is"
#~ " device. When TVM compiles device "
#~ "specific program such as CUDA, we "
#~ "also need host(CPU) side code to "
#~ "interact with the driver setup the "
#~ "dimensions and parameters correctly. "
#~ "target_host is used to specify the "
#~ "host side codegen target. By default,"
#~ " llvm is used if it is enabled,"
#~ " otherwise a stackvm interpreter is "
#~ "used."
#~ msgstr ""

#~ msgid "Runtime to generate artifacts for"
#~ msgstr ""

#~ msgid "The name of result function."
#~ msgstr ""

#~ msgid ""
#~ "Dictionary that maps the binding of "
#~ "symbolic buffer to Tensor. By default,"
#~ " a new buffer is created for "
#~ "each tensor in the argument."
#~ msgstr ""

#~ msgid "**ret** -- A module that combines both host and device code."
#~ msgstr ""

#~ msgid "示例"
#~ msgstr ""

#~ msgid ""
#~ "There are two typical example uses "
#~ "of this function depending on the "
#~ "type of the argument `inputs`: 1. "
#~ "it is an IRModule."
#~ msgstr ""

#~ msgid "it is a dict of compilation target to IRModule."
#~ msgstr ""

#~ msgid "See the note on :any:`tvm.target` on target string format."
#~ msgstr ""

#~ msgid "Namespace for driver APIs"
#~ msgstr ""

#~ msgid ""
#~ "Build a function with a signature, "
#~ "generating code for devices coupled with"
#~ " target information."
#~ msgstr ""

#~ msgid ""
#~ "This function is deprecated. Use "
#~ "`tvm.compile` or `tvm.tir.build` instead."
#~ msgstr ""

#~ msgid "参数"
#~ msgstr ""

#~ msgid "The input to be built."
#~ msgstr ""

#~ msgid "The target for compilation."
#~ msgstr ""

#~ msgid "The pipeline to use for compilation."
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid "A module combining both host and device code."
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

