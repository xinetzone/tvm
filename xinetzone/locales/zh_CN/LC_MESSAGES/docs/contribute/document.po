# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-07 11:03+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../../xin/docs/contribute/document.rst:21
msgid "Documentation"
msgstr ""

#: ../../../xin/docs/contribute/document.rst:27
msgid ""
"TVM documentation loosely follows the `formal documentation style "
"described by Divio <https://documentation.divio.com>`_. This system has "
"been chosen because it is a \"simple, comprehensive and nearly "
"universally-applicable scheme. It is proven in practice across a wide "
"variety of fields and applications.\""
msgstr ""

#: ../../../xin/docs/contribute/document.rst:32
msgid ""
"This document describes the organization of TVM documentation, and how to"
" write new documentation. See `docs/README.md "
"<https://github.com/apache/tvm/tree/main/docs#build-locally>`_ for "
"instructions on building the docs."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:37
msgid "The Four Document Types"
msgstr ""

#: ../../../xin/docs/contribute/document.rst:40
msgid "Introductory Tutorials"
msgstr ""

#: ../../../xin/docs/contribute/document.rst:42
msgid ""
"These are step by step guides to introduce new users to a project. An "
"introductory tutorial is designed to get a user engaged with the software"
" without necessarily explaining why the software works the way it does. "
"Those explanations can be saved for other document types. An introductory"
" tutorial focuses on a successful first experience. These are the most "
"important docs to turning newcomers into new users and developers. A "
"fully end-to-end tutorial — from installing TVM and supporting ML "
"software, to creating and training a model, to compiling to different "
"architectures — will give a new user the opportunity to use TVM in the "
"most efficient way possible. A tutorial teaches a beginner something they"
" need to know. This is in contrast with a how-to, which is meant to be an"
" answer to a question that a user with some experience would ask."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:55
msgid ""
"Tutorials need to be repeatable and reliable, because the lack of success"
" means a user will look for other solutions."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:59
msgid "How-to Guides"
msgstr ""

#: ../../../xin/docs/contribute/document.rst:61
msgid ""
"These are step by step guides on how to solve particular problems. The "
"user can ask meaningful questions, and the documents provide answers. An "
"examples of this type of document might be, \"how do I compile an "
"optimized model for ARM architecture?\" or \"how do I compile and "
"optimize a TensorFlow model?\" These documents should be open enough that"
" a user could see how to apply it to a new use case. Practical usability "
"is more important than completeness. The title should tell the user what "
"problem the how-to is solving."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:69
msgid ""
"How are tutorials different from how-tos? A tutorial is oriented towards "
"the new developer, and focuses on successfully introducing them to the "
"software and community. A how-to, in contrast, focuses on accomplishing a"
" specific task within the context of basic understanding. A tutorial "
"helps to on-board and assumes no prior knowledge. A how-to assumes "
"minimum knowledge, and is meant to guide someone to accomplish a specific"
" task."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:77
msgid "Reference"
msgstr ""

#: ../../../xin/docs/contribute/document.rst:79
msgid ""
"Reference documentation describes how the software is configured and "
"operated. APIs, key functions, commands, and interfaces are all "
"candidates for reference documentation. These are the technical manuals "
"that let users build their own interfaces and programs. They are "
"information oriented, focused on lists and descriptions. You can assume "
"that the audience has a grasp on how the software works and is looking "
"for specific answers to specific questions. Ideally, the reference "
"documentation should have the same structure as the code base and be "
"generated automatically as much as possible."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:89
msgid "Architecture Guides"
msgstr ""

#: ../../../xin/docs/contribute/document.rst:91
msgid ""
"Architecture Guides are explanations are background material on a topic. "
"These documents help to illuminate and understand the application "
"environment. Why are things the way they are? What were the design "
"decisions, what alternatives were considered, what are the RFCs "
"describing the existing system? This includes academic papers and links "
"to publications relevant to the software. Within these documents you can "
"explore contradictory and conflicting position, and help the reader make "
"sense of how and why the software was built the way it is. It's not the "
"place for how-tos and descriptions on how to accomplish tasks. They "
"instead focus on higher level concepts that help with the understanding "
"of the project. Generally these are written by the architects and "
"developers of the project, but can useful to help both users and "
"developers to have a deeper understanding of why the software works the "
"way it does, and how to contribute to it in ways that are consistent with"
" the underlying design principles."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:106
msgid "Special considerations for TVM"
msgstr ""

#: ../../../xin/docs/contribute/document.rst:108
msgid ""
"The TVM community has some special considerations that require deviation "
"from the simple docs style outlined by Divio. The first consideration is "
"that there is frequently overlap between the user and developer "
"communities. Many projects document the developer and user experience "
"with separate systems, but it is appropriate to consider both in this "
"system, with differentiations where appropriate. As a result the "
"tutorials and how-tos will be divided between \"User Guides\" that focus "
"on the user experience, and \"Developer Guides\" that focus on the "
"developer experience."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:117
msgid ""
"The next consideration is that there are special topics within the TVM "
"community that benefit from additional attention. These topics include, "
"but are not limited to, microTVM and VTA. Special \"Topic Guides\" can be"
" created to index existing material, and provide context on how to "
"navigate that material most effectively."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:123
msgid ""
"To facilitate newcomers, a special \"Getting Started\" section with "
"installation instructions, a overview of why to use TVM, and other first-"
"experience documents will be produced."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:129
msgid "Technical Details"
msgstr ""

#: ../../../xin/docs/contribute/document.rst:131
msgid ""
"We use the `Sphinx <http://sphinx-doc.org>`_ for the main documentation. "
"Sphinx supports both reStructuredText and markdown. When possible, we "
"encourage reStructuredText as it has richer features. Note that the "
"Python doc-string and tutorials allow you to embed reStructuredText "
"syntax."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:136
msgid ""
"See `docs/README.md <https://github.com/apache/tvm/tree/main/docs#build-"
"locally>`_ for instructions on building the docs."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:142
msgid "Python Reference Documentation"
msgstr ""

#: ../../../xin/docs/contribute/document.rst:144
msgid ""
"We use the `numpydoc <https://numpydoc.readthedocs.io/en/latest/>`_ "
"format to document the function and classes. The following snippet gives "
"an example docstring. We always document all the public functions, when "
"necessary, provide an usage example of the features we support (as shown "
"below)."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:179
msgid ""
"Be careful to leave blank lines between sections of your documents. In "
"the above case, there has to be a blank line before ``Parameters``, "
"``Returns`` and ``Examples`` in order for the doc to be built correctly. "
"To add a new function to the docs, we need to add the `sphinx.autodoc "
"<http://www.sphinx-doc.org/en/master/ext/autodoc.html>`_ rules to "
"`docs/reference/api/python "
"<https://github.com/apache/tvm/tree/main/docs/reference/api/python>`_). "
"You can refer to the existing files under this folder on how to add the "
"functions."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:189
msgid "C++ Reference Documentation"
msgstr ""

#: ../../../xin/docs/contribute/document.rst:191
msgid ""
"We use the doxygen format to document c++ functions. The following "
"snippet shows an example of c++ docstring."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:206
msgid ""
"Besides documenting function usages, we also highly recommend "
"contributors to add comments about code logics to improve readability."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:210
msgid "Sphinx Gallery How-Tos"
msgstr ""

#: ../../../xin/docs/contribute/document.rst:212
msgid ""
"We use `sphinx-gallery <https://sphinx-gallery.github.io/>`_ to build "
"many Python how-tos. You can find the source code under `gallery "
"<https://github.com/apache/tvm/tree/main/gallery>`_. One thing that worth"
" noting is that the comment blocks are written in reStructuredText "
"instead of markdown so be aware of the syntax."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:218
msgid ""
"The how-to code will run on our build server to generate the document "
"page. So we may have a restriction like not being able to access a remote"
" Raspberry Pi, in such case add a flag variable to the tutorial (e.g. "
"``use_rasp``) and allow users to easily switch to the real device by "
"changing one flag. Then use the existing environment to demonstrate the "
"usage."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:224
msgid ""
"If you add a new categorization of how-to, you will need to add "
"references to `conf.py "
"<https://github.com/apache/tvm/tree/main/docs/conf.py>`_ and the `how-to "
"index <https://github.com/apache/tvm/tree/main/docs/how-to/index.rst>`_"
msgstr ""

#: ../../../xin/docs/contribute/document.rst:229
msgid "Refer to Another Location in the Document"
msgstr ""

#: ../../../xin/docs/contribute/document.rst:230
msgid ""
"Please use sphinx's ``:ref:`` markup to refer to another location in the "
"same doc."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:242
msgid "Documents with Images / Figures"
msgstr ""

#: ../../../xin/docs/contribute/document.rst:243
msgid ""
"reStructuredText's `figure "
"<https://docutils.sourceforge.io/docs/ref/rst/directives.html#figure>`_ "
"and `image "
"<https://docutils.sourceforge.io/docs/ref/rst/directives.html#image>`_ "
"elements allow a document to include an image URL."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:247
msgid ""
"Image files created for TVM documentation should reside in the "
"`<https://github.com/tlc-pack/web-data>`_ repository, while the `.rst` "
"files *using* those images should reside in the main TVM repostitory "
"(`<https://github.com/apache/tvm>`_)."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:251
msgid ""
"This will require two Github Pull Requests, one for the image files and "
"another for the `.rst` files. Discussion between the contributor and "
"reviewers may be necessary to coordinate the review process."
msgstr ""

#: ../../../xin/docs/contribute/document.rst:254
msgid ""
"*IMPORTANT NOTE:* When using two Pull Requests as described above, please"
" merge the Pull Request in `<https://github.com/tlc-pack/web-data>`_ "
"*before* merging the Pull Request in `<https://github.com/apache/tvm>`_. "
"This helps ensure that all URL links in TVM's online documentation are "
"valid."
msgstr ""

#~ msgid ""
#~ "This document describes the organization "
#~ "of TVM documentation, and how to "
#~ "write new documentation."
#~ msgstr ""

#~ msgid ""
#~ "These are step by step guides to"
#~ " introduce new users to a project."
#~ " An introductory tutorial is designed "
#~ "to get a user engaged with the "
#~ "software without necessarily explaining why"
#~ " the software works the way it "
#~ "does. Those explanations can be saved"
#~ " for other document types. An "
#~ "introductory tutorial focuses on a "
#~ "successful first experience. These are "
#~ "the most important docs to turning "
#~ "newcomers into new users and developers."
#~ " A fully end-to-end tutorial&mdash;"
#~ " from installing TVM and supporting "
#~ "ML software, to creating and training"
#~ " a model, to compiling to different"
#~ " architectures&mdash;will give a new user"
#~ " the opportunity to use TVM in "
#~ "the most efficient way possible. A "
#~ "tutorial teaches a beginner something "
#~ "they need to know. This is in "
#~ "contrast with a how-to, which is"
#~ " meant to be an answer to a "
#~ "question that a user with some "
#~ "experience would ask."
#~ msgstr ""

#~ msgid ""
#~ "Architecture Guides are explanations are "
#~ "background material on a topic. These"
#~ " documents help to illuminate and "
#~ "understand the application environment. Why"
#~ " are things the way they are? "
#~ "What were the design decisions, what "
#~ "alternatives were considered, what are "
#~ "the RFCs describing the existing system?"
#~ " This includes academic papers and "
#~ "links to publications relevant to the"
#~ " software. Within these documents you "
#~ "can explore contradictory and conflicting "
#~ "position, and help the reader make "
#~ "sense of how and why the software"
#~ " was built the way it is. It's"
#~ " not the place for how-tos and"
#~ " descriptions on how to accomplish "
#~ "tasks. They instead focus on higher "
#~ "level concepts that help with the "
#~ "understanding of the project.  Generally "
#~ "these are written by the architects "
#~ "and developers of the project, but "
#~ "can useful to help both users and"
#~ " developers to have a deeper "
#~ "understanding of why the software works"
#~ " the way it does, and how to"
#~ " contribute to it in ways that "
#~ "are consistent with the underlying "
#~ "design principles."
#~ msgstr ""

#~ msgid ""
#~ "We use the `Sphinx <http://sphinx-"
#~ "doc.org>`_ for the main documentation. "
#~ "Sphinx support both the reStructuredText "
#~ "and markdown.  When possible, we "
#~ "encourage to use reStructuredText as it"
#~ " has richer features.  Note that the"
#~ " python doc-string and tutorials "
#~ "allow you to embed reStructuredText "
#~ "syntax."
#~ msgstr ""

#~ msgid ""
#~ "We use `numpydoc "
#~ "<https://numpydoc.readthedocs.io/en/latest/>`_ format to"
#~ " document the function and classes.  "
#~ "The following snippet gives an example"
#~ " docstring.  We always document all "
#~ "the public functions, when necessary, "
#~ "provide an usage example of the "
#~ "features we support(as shown below)."
#~ msgstr ""

#~ msgid ""
#~ "Be careful to leave blank lines "
#~ "between sections of your documents.  In"
#~ " the above case, there has to "
#~ "be a blank line before `Parameters`, "
#~ "`Returns` and `Examples` in order for"
#~ " the doc to be built correctly. "
#~ "To add a new function to the "
#~ "doc, we need to add the "
#~ "`sphinx.autodoc <http://www.sphinx-"
#~ "doc.org/en/master/ext/autodoc.html>`_ rules to the"
#~ " `docs/api/python "
#~ "<https://github.com/apache/tvm/tree/main/docs/api/python>`_). "
#~ "You can refer to the existing "
#~ "files under this folder on how to"
#~ " add the functions."
#~ msgstr ""

#~ msgid ""
#~ "We use the doxgen format to "
#~ "document c++ functions.  The following "
#~ "snippet shows an example of c++ "
#~ "docstring."
#~ msgstr ""

#~ msgid ""
#~ "We use the `sphinx-gallery <https"
#~ "://sphinx-gallery.github.io/>`_ to build many "
#~ "python how-tos.  You can find the"
#~ " source code under `gallery "
#~ "<https://github.com/apache/tvm/tree/main/gallery>`_ quite "
#~ "self explanatory. One thing that worth"
#~ " noting is that the comment blocks"
#~ " are written in reStructuredText instead"
#~ " of markdown so be aware of the"
#~ " syntax."
#~ msgstr ""

#~ msgid ""
#~ "The how-to code will run on "
#~ "our build server to generate the "
#~ "document page.  So we may have a"
#~ " restriction like not being able to"
#~ " access a remote Raspberry Pi, in "
#~ "such case add a flag variable to"
#~ " the tutorial (e.g. `use_rasp`) and "
#~ "allow users to easily switch to "
#~ "the real device by changing one "
#~ "flag. Then use the existing environment"
#~ " to demonstrate the usage."
#~ msgstr ""

#~ msgid ""
#~ "Please use sphinx's `:ref:` markup to"
#~ " refer to another location in the "
#~ "same doc."
#~ msgstr ""

#~ msgid "Write Documentation for TVM"
#~ msgstr ""

