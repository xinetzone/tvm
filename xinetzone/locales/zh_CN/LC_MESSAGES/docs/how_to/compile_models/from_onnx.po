# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-06-06 09:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:20002
msgid "编译 ONNX 模型"
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:20004
msgid "**作者**: [Joshua Z. Zhang](https://zhreshold.github.io/)"
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:20007
msgid "本文是使用 Relay 部署 ONNX 模型的入门教程。"
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:20009
msgid "安装一些包："
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:40002
msgid "或者直接访问 [ONNX 官方网站](https://github.com/onnx/onnx)。"
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:60002
msgid "加载预训练 ONNX 模型"
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:60004
msgid ""
"这里使用超分辨率模型 "
"[super_resolution_with_caffe2](http://pytorch.org/tutorials/advanced/super_resolution_with_caffe2.html)，并下载保存的"
" onnx 模型："
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:80002
msgid "加载测试图片"
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:80004
msgid ""
"该模型输入大小为 $224 \\times 224$ 的单个输入图像，并沿每个轴输出比输入大 $3$ 倍的缩放图像，即 $672 \\times "
"672$ 图像。重新缩放猫图像以适应这个输入形状，然后转换为 `YCbCr`。然后将超分辨率模型应用于亮度 (`Y`) 通道。"
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:100002
msgid "使用 relay 编译模型"
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:100004
msgid "通常，ONNX 模型将模型输入值与参数值混合在一起，输入名称为 `1`。此模型依赖于，您应该检查您的模型的文档，以确定完整的输入和参数名称空间。"
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:100006
msgid ""
"将 `shape` 字典传递给 {func}`~tvm.relay.frontend.from_onnx` 方法，告诉 `relay` 哪些 "
"ONNX 参数是输入，哪些是参数，并提供了输入大小的静态定义。"
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:120002
msgid "在 TVM 上执行"
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:140002
msgid "展示结果"
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:140004
msgid ""
"将输入图像和输出图像放在一起。亮度（luminance）通道 `Y` 是模型的输出。调整色度（chroma）通道 `Cb` 和 `Cr` "
"的大小，以匹配简单的双三次算法（bicubic algorithm）。然后将图像重新组合并转换回 `RGB`。"
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:160003
msgid ""
"默认情况下，ONNX 根据动态形状定义模型。ONNX "
"导入器在导入时保留这种动态性，而编译器试图在编译时将模型转换为静态形状。如果失败，模型中仍然可能有动态操作。并不是所有的 TVM "
"内核目前都支持动态形状，如果您在使用动态内核时遇到错误，请在 discuss.tvm.apache.org 上提交 issue。"
msgstr ""

#: ../../xin/docs/how_to/compile_models/from_onnx.ipynb:160005
msgid ""
"这个特定的模型是使用旧版本的 ONNX 构建的。在导入阶段，ONNX 导入器将运行 ONNX 验证器，这可能会抛出 `Mismatched "
"attribute type` 警告。因为 TVM 支持许多不同的 ONNX 版本，所以 Relay 模型仍然有效。"
msgstr ""

#~ msgid ":download:`Download Python source code: from_onnx.py <from_onnx.py>`"
#~ msgstr ""

#~ msgid ""
#~ ":download:`Download Jupyter notebook: "
#~ "from_onnx.ipynb <from_onnx.ipynb>`"
#~ msgstr ""

#~ msgid ""
#~ "`Gallery generated by Sphinx-Gallery "
#~ "<https://sphinx-gallery.github.io>`_"
#~ msgstr ""

#~ msgid ""
#~ "Click :ref:`here "
#~ "<sphx_glr_download_how_to_compile_models_from_onnx.py>` to "
#~ "download the full example code"
#~ msgstr ""

#~ msgid "**Author**: `Joshua Z. Zhang <https://zhreshold.github.io/>`_"
#~ msgstr ""

#~ msgid "Compile ONNX Models"
#~ msgstr ""

#~ msgid "**Author**: [Joshua Z. Zhang](https://zhreshold.github.io/)"
#~ msgstr ""

#~ msgid ""
#~ "This article is an introductory tutorial"
#~ " to deploy ONNX models with Relay."
#~ msgstr ""

#~ msgid "For us to begin with, ONNX package must be installed."
#~ msgstr ""

#~ msgid "A quick solution is to install protobuf compiler, and"
#~ msgstr ""

#~ msgid "or please refer to official site. https://github.com/onnx/onnx"
#~ msgstr ""

#~ msgid "Load pretrained ONNX model"
#~ msgstr ""

#~ msgid ""
#~ "The example super resolution model used"
#~ " here is exactly the same model "
#~ "in onnx tutorial "
#~ "http://pytorch.org/tutorials/advanced/super_resolution_with_caffe2.html"
#~ " we skip the pytorch model "
#~ "construction part, and download the "
#~ "saved onnx model"
#~ msgstr ""

#~ msgid "Load a test image"
#~ msgstr ""

#~ msgid ""
#~ "A single cat dominates the examples! "
#~ "This model takes a single input "
#~ "image of size 224x224 and outputs "
#~ "a scaled image that is 3x greater"
#~ " than the input along each axis, "
#~ "a 672x672 image. Re-scale the cat"
#~ " image to fit this input shape "
#~ "then convert to `YCbCr`. The super "
#~ "resolution model will then be applied"
#~ " to the luminance (`Y`) channel."
#~ msgstr ""

#~ msgid "Compile the model with relay"
#~ msgstr ""

#~ msgid ""
#~ "Typically ONNX models mix model input"
#~ " values with parameter values, with "
#~ "the input having the name `1`. "
#~ "This model dependent, and you should "
#~ "check with the documentation for your"
#~ " model to determine the full input"
#~ " and parameter name space."
#~ msgstr ""

#~ msgid ""
#~ "Passing in the shape dictionary to "
#~ "the `relay.frontend.from_onnx` method tells "
#~ "relay which ONNX parameters are inputs,"
#~ " and which are parameters, and "
#~ "provides a static definition of the "
#~ "input size."
#~ msgstr ""

#~ msgid "Execute on TVM"
#~ msgstr ""

#~ msgid "Display results"
#~ msgstr ""

#~ msgid ""
#~ "We put input and output image neck"
#~ " to neck. The luminance channel, `Y`"
#~ " is the output from the model. "
#~ "The chroma channels `Cb` and `Cr` "
#~ "are resized to match with a simple"
#~ " bicubic algorithm. The image is then"
#~ " recombined and converted back to "
#~ "`RGB`."
#~ msgstr ""

#~ msgid "Notes"
#~ msgstr ""

#~ msgid ""
#~ "By default, ONNX defines models in "
#~ "terms of dynamic shapes. The ONNX "
#~ "importer retains that dynamism upon "
#~ "import, and the compiler attempts to "
#~ "convert the model into a static "
#~ "shapes at compile time. If this "
#~ "fails, there may still be dynamic "
#~ "operations in the model. Not all "
#~ "TVM kernels currently support dynamic "
#~ "shapes, please file an issue on "
#~ "discuss.tvm.apache.org if you hit an "
#~ "error with dynamic kernels."
#~ msgstr ""

#~ msgid ""
#~ "This particular model was build using"
#~ " an older version of ONNX. During "
#~ "the import phase ONNX importer will "
#~ "run the ONNX verifier, which may "
#~ "throw a `Mismatched attribute type` "
#~ "warning. Because TVM supports a number"
#~ " of different ONNX versions, the "
#~ "Relay model will still be valid."
#~ msgstr ""

