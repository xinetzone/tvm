# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.9.dev282+gf54634c5d\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-10 19:41+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../../xin/docs/how_to/deploy/cpp_deploy.rst:19
msgid "使用 C++ API 部署 TVM Module"
msgstr ""

#: ../../../xin/docs/how_to/deploy/cpp_deploy.rst:21
msgid ""
"`apps/howto_deploy "
"<https://github.com/apache/tvm/tree/main/apps/howto_deploy>`_ 中提供了如何部署 "
"TVM 模块的示例，可以使用以下命令运行该示例："
msgstr ""

#: ../../../xin/docs/how_to/deploy/cpp_deploy.rst:31
msgid "获取 TVM 运行时库"
msgstr ""

#: ../../../xin/docs/how_to/deploy/cpp_deploy.rst:33
msgid ""
"只需要链接到目标平台中的 TVM 运行时。TVM 提供了最小运行时，根据使用的模块数量，运行时的消耗大约在 300K 到 600K 之间。 "
"在大多数情况下，可以使用随 ``build`` 而来的 ``libtvm_runtime.so``。"
msgstr ""

#: ../../../xin/docs/how_to/deploy/cpp_deploy.rst:36
msgid ""
"如果您发现构建 ``libtvm_runtime`` 很困难， 请检出 `tvm_runtime_pack.cc "
"<https://github.com/apache/tvm/tree/main/apps/howto_deploy/tvm_runtime_pack.cc>`_。"
" 这是在一个文件中提供 TVM 运行时的示例。 您可以使用构建系统编译此文件，并将其包含到项目中。"
msgstr ""

#: ../../../xin/docs/how_to/deploy/cpp_deploy.rst:41
msgid ""
"你也可以签出 `apps <https://github.com/apache/tvm/tree/main/apps/>`_，例如在 iOS, "
"Android 和其他平台上用 TVM 构建的应用程序。"
msgstr ""

#: ../../../xin/docs/how_to/deploy/cpp_deploy.rst:44
msgid "动态库 vs. 系统模块"
msgstr ""

#: ../../../xin/docs/how_to/deploy/cpp_deploy.rst:46
msgid ""
"TVM 提供了两种使用编译库的方法。 您可以签出 `prepare_test_libs.py "
"<https://github.com/apache/tvm/tree/main/apps/howto_deploy/prepare_test_libs.py>`_"
" 关于如何生成库 和 `cpp_deploy.cc "
"<https://github.com/apache/tvm/tree/main/apps/howto_deploy/cpp_deploy.cc>`_"
" 关于如何使用它们。"
msgstr ""

#: ../../../xin/docs/how_to/deploy/cpp_deploy.rst:50
msgid "将库存储为共享库，并将库动态加载到项目中。"
msgstr ""

#: ../../../xin/docs/how_to/deploy/cpp_deploy.rst:51
msgid "以系统模块（module）模式将编译后的库捆绑到项目中。"
msgstr ""

#: ../../../xin/docs/how_to/deploy/cpp_deploy.rst:53
msgid "动态加载更加灵活，可以动态加载新模块。系统模块是更 ``static`` 的方法。可以在禁止动态库加载的地方使用系统模块。"
msgstr ""

#~ msgid "Deploy TVM Module using C++ API"
#~ msgstr ""

#~ msgid ""
#~ "We provide an example on how to"
#~ " deploy TVM modules in `apps/howto_deploy"
#~ " <https://github.com/apache/tvm/tree/main/apps/howto_deploy>`_"
#~ msgstr ""

#~ msgid "To run the example, you can use the following command"
#~ msgstr ""

#~ msgid "Get TVM Runtime Library"
#~ msgstr ""

#~ msgid ""
#~ "The only thing we need is to "
#~ "link to a TVM runtime in your "
#~ "target platform. TVM provides a minimum"
#~ " runtime, which costs around 300K to"
#~ " 600K depending on how much modules"
#~ " we use. In most cases, we can"
#~ " use ``libtvm_runtime.so`` that comes with"
#~ " the build."
#~ msgstr ""

#~ msgid ""
#~ "If somehow you find it is hard "
#~ "to build ``libtvm_runtime``, checkout "
#~ "`tvm_runtime_pack.cc "
#~ "<https://github.com/apache/tvm/tree/main/apps/howto_deploy/tvm_runtime_pack.cc>`_."
#~ " It is an example all in one"
#~ " file that gives you TVM runtime. "
#~ "You can compile this file using "
#~ "your build system and include this "
#~ "into your project."
#~ msgstr ""

#~ msgid ""
#~ "You can also checkout `apps "
#~ "<https://github.com/apache/tvm/tree/main/apps/>`_ for "
#~ "example applications build with TVM on"
#~ " iOS, Android and others."
#~ msgstr ""

#~ msgid "Dynamic Library vs. System Module"
#~ msgstr ""

#~ msgid ""
#~ "TVM provides two ways to use the"
#~ " compiled library. You can checkout "
#~ "`prepare_test_libs.py "
#~ "<https://github.com/apache/tvm/tree/main/apps/howto_deploy/prepare_test_libs.py>`_"
#~ " on how to generate the library "
#~ "and `cpp_deploy.cc "
#~ "<https://github.com/apache/tvm/tree/main/apps/howto_deploy/cpp_deploy.cc>`_"
#~ " on how to use them."
#~ msgstr ""

#~ msgid ""
#~ "Store library as a shared library "
#~ "and dynamically load the library into"
#~ " your project."
#~ msgstr ""

#~ msgid "Bundle the compiled library into your project in system module mode."
#~ msgstr ""

#~ msgid ""
#~ "Dynamic loading is more flexible and "
#~ "can load new modules on the fly."
#~ " System module is a more ``static``"
#~ " approach.  We can use system module"
#~ " in places where dynamic library "
#~ "loading is banned."
#~ msgstr ""

