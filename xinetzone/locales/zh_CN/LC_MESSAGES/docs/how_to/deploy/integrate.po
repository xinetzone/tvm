# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020 - 2021, Apache Software Foundation
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm 0.9.dev282+gf54634c5d\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-06-10 19:41+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../../xin/docs/how_to/deploy/integrate.rst:19
msgid "集成 TVM 到你的项目"
msgstr ""

#: ../../../xin/docs/how_to/deploy/integrate.rst:21
msgid "TVM 的运行时被设计为轻量级和可移植的。有几种方法可以将 TVM 集成到项目中。"
msgstr ""

#: ../../../xin/docs/how_to/deploy/integrate.rst:23
msgid "本文介绍了将 TVM 集成为 JIT 编译器以在系统上生成函数的可能方法。"
msgstr ""

#: ../../../xin/docs/how_to/deploy/integrate.rst:26
msgid "支持 DLPack"
msgstr ""

#: ../../../xin/docs/how_to/deploy/integrate.rst:28
msgid "TVM 生成的函数遵循 PackedFunc 协议。它是可以接受位置参数的函数，包括标准类型，如浮点数、整数、字符串。"
msgstr ""

#: ../../../xin/docs/how_to/deploy/integrate.rst:30
msgid ""
"PackedFunc 接受 `DLPack <https://github.com/dmlc/dlpack>`_  协议的 DLTensor "
"指针。所以你唯一需要解决的事情就是创建对应的 DLTensor 对象。"
msgstr ""

#: ../../../xin/docs/how_to/deploy/integrate.rst:33
msgid "集成用户定义的 C++ Array"
msgstr ""

#: ../../../xin/docs/how_to/deploy/integrate.rst:35
msgid "在 C++ 中唯一要做的事情就是将数组转换为 DLTensor，并将其地址作为 ``DLTensor*`` 传递给生成的函数。"
msgstr ""

#: ../../../xin/docs/how_to/deploy/integrate.rst:38
msgid "集成用户定义的 Python Array"
msgstr ""

#: ../../../xin/docs/how_to/deploy/integrate.rst:40
msgid "假设你有 python 对象 ``MyArray``。你需要做三件事"
msgstr ""

#: ../../../xin/docs/how_to/deploy/integrate.rst:42
msgid "添加 ``_tvm_tcode`` 字段到返回 ``tvm.TypeCode.ARRAY_HANDLE`` 的数组中"
msgstr ""

#: ../../../xin/docs/how_to/deploy/integrate.rst:43
msgid "支持在对象中使用 ``_tvm_handle`` 属性，该属性以 Python 整数形式返回 `DLTensor` 的地址"
msgstr ""

#: ../../../xin/docs/how_to/deploy/integrate.rst:44
msgid "通过 ``tvm.register_extension`` 注册这个类"
msgstr ""

#~ msgid "Integrate TVM into Your Project"
#~ msgstr ""

#~ msgid ""
#~ "TVM's runtime is designed to be "
#~ "lightweight and portable. There are "
#~ "several ways you can integrate TVM "
#~ "into your project."
#~ msgstr ""

#~ msgid ""
#~ "This article introduces possible ways to"
#~ " integrate TVM as a JIT compiler "
#~ "to generate functions on your system."
#~ msgstr ""

#~ msgid "DLPack Support"
#~ msgstr ""

#~ msgid ""
#~ "TVM's generated function follows the "
#~ "PackedFunc convention. It is a function"
#~ " that can take positional arguments "
#~ "including standard types such as float,"
#~ " integer, string. The PackedFunc takes "
#~ "DLTensor pointer in `DLPack "
#~ "<https://github.com/dmlc/dlpack>`_ convention. So "
#~ "the only thing you need to solve"
#~ " is to create a corresponding "
#~ "DLTensor object."
#~ msgstr ""

#~ msgid "Integrate User Defined C++ Array"
#~ msgstr ""

#~ msgid ""
#~ "The only thing we have to do "
#~ "in C++ is to convert your array"
#~ " to DLTensor and pass in its "
#~ "address as ``DLTensor*`` to the "
#~ "generated function."
#~ msgstr ""

#~ msgid "Integrate User Defined Python Array"
#~ msgstr ""

#~ msgid ""
#~ "Assume you have a python object "
#~ "``MyArray``. There are three things that"
#~ " you need to do"
#~ msgstr ""

#~ msgid ""
#~ "Add ``_tvm_tcode`` field to your array"
#~ " which returns ``tvm.TypeCode.ARRAY_HANDLE``"
#~ msgstr ""

#~ msgid ""
#~ "Support ``_tvm_handle`` property in your "
#~ "object, which returns the address of "
#~ "DLTensor in python integer"
#~ msgstr ""

#~ msgid "Register this class by ``tvm.register_extension``"
#~ msgstr ""

