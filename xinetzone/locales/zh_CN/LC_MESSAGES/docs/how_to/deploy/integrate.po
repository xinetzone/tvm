# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the tvm package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: tvm doc\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-10-09 21:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: zh_CN\n"
"Language-Team: zh_CN <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.15.0\n"

#: ../../doc/docs/how_to/deploy/integrate.rst:19
msgid "Integrate TVM into Your Project"
msgstr "将 TVM 集成到您的项目中"

#: ../../doc/docs/how_to/deploy/integrate.rst:21
msgid ""
"TVM's runtime is designed to be lightweight and portable. There are "
"several ways you can integrate TVM into your project."
msgstr ""
"TVM 运行时设计为轻量且可移植的。有几种方法可以将 TVM 集成到您的项目中。"

#: ../../doc/docs/how_to/deploy/integrate.rst:24
msgid ""
"This article introduces possible ways to integrate TVM as a JIT compiler "
"to generate functions on your system."
msgstr ""
"本文介绍了将 TVM 作为 JIT 编译器集成到您的系统中以生成函数的几种可能方法。"

#: ../../doc/docs/how_to/deploy/integrate.rst:29
msgid "DLPack Support"
msgstr "DLPack 支持"

#: ../../doc/docs/how_to/deploy/integrate.rst:31
msgid ""
"TVM's generated function follows the PackedFunc convention. It is a "
"function that can take positional arguments including standard types such"
" as float, integer, string. The PackedFunc takes DLTensor pointer in "
"`DLPack <https://github.com/dmlc/dlpack>`_ convention. So the only thing "
"you need to solve is to create a corresponding DLTensor object."
msgstr ""
"TVM 生成的函数遵循 PackedFunc 的约定。它是一种可以接受位置参数的函数，这些参数包括诸如浮点数、整数、字符串等标准类型。"
"PackedFunc 采用 `DLPack <https://github.com/dmlc/dlpack>`_ 约定中的 DLTensor 指针。因此，您唯一需要解决的问题是创建相应的 DLTensor 对象。"

#: ../../doc/docs/how_to/deploy/integrate.rst:40
msgid "Integrate User Defined C++ Array"
msgstr "集成用户定义的 C++ 数组"

#: ../../doc/docs/how_to/deploy/integrate.rst:42
msgid ""
"The only thing we have to do in C++ is to convert your array to DLTensor "
"and pass in its address as ``DLTensor*`` to the generated function."
msgstr ""
"在 C++ 中唯一需要做的，就是将您的数组转换为 DLTensor，并将其地址作为 ``DLTensor*`` 传递给生成的函数。"

#: ../../doc/docs/how_to/deploy/integrate.rst:47
msgid "Integrate User Defined Python Array"
msgstr "集成用户定义的 Python 数组"

#: ../../doc/docs/how_to/deploy/integrate.rst:49
msgid ""
"Assume you have a python object ``MyArray``. There are three things that "
"you need to do"
msgstr ""
"假设您有 Python 对象 ``MyArray``。您需要做以下三件事："

#: ../../doc/docs/how_to/deploy/integrate.rst:51
msgid ""
"Add ``_tvm_tcode`` field to your array which returns "
"``tvm.TypeCode.ARRAY_HANDLE``"
msgstr ""
"在您的数组中添加 ``_tvm_tcode`` 字段，该字段返回 ``tvm.TypeCode.ARRAY_HANDLE``。"

#: ../../doc/docs/how_to/deploy/integrate.rst:52
msgid ""
"Support ``_tvm_handle`` property in your object, which returns the "
"address of DLTensor in python integer"
msgstr ""
"在您的对象中支持 ``_tvm_handle`` 属性，该属性返回 DLTensor 的地址，以 Python 整数的形式表示。"

#: ../../doc/docs/how_to/deploy/integrate.rst:53
msgid "Register this class by ``tvm.register_extension``"
msgstr "通过 ``tvm.register_extension`` 注册这个类。"

