# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-09 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:10002
msgid "如何使用 TVM Pass Infra"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:10004
msgid "**原作者**: [Zhi Chen](https://github.com/zhiics)"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:10006
msgid ""
"随着在 Relay/tir 中优化 pass 数量的增加，手动执行它们并维护它们的依赖关系变得非常棘手。因此，TVM 引入了 "
"infrastructure 来管理优化 pass，并使其适用于 TVM 堆栈中 IR 的不同层。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:10008
msgid ""
"Relay/tir 程序的优化可以应用在不同的粒度上，即函数级 "
"{py:class}`tvm.relay.transform.FunctionPass`/{py:class}`tvm.tir.transform.PrimFuncPass`"
" 和模块级 {py:class}`tvm.transform.ModulePass`。或者用户可以依赖于 "
"{py:class}`tvm.transform.Sequential` 在 Relay/tir 程序上应用 pass 序列，其中 pass "
"之间的依赖性可以由 `pass infra` 解析。有关每种 pass 的详细信息，请参阅 {ref}`pass-infra`。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:10010
msgid "本教程主要演示开发人员如何使用 pass infra 执行某种优化，并为 Relay 程序创建优化管道。同样的方法也可以用于 tir。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:30002
msgid "创建 Relay 程序示例"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:30004
msgid "首先，为创建简单的 Relay 程序。本教程中的示例将使用这个程序进行各种优化。类似地，用户可以编写 tir 原语函数并应用 tir passes。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:50002
msgid "优化程序"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:50004
msgid "现在要优化程序。Relay 具有许多优化功能。选择其中一些应用到这个示例程序中。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:50006
msgid "有多种方法来优化 Relay 程序。下面将分别提供它们的示例。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:50008
msgid "手动应用优化 passes"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:50010
msgid "创建 Relay 模块，它包含一个或多个用于优化的 Relay 函数。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:70002
msgid "可以对模块应用常量折叠。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:70004
msgid "`fold_const` 是不带任何参数的回调函数。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:90002
msgid "对给定的模块调用 pass。注意，常量折叠传递在函数级工作。也就是说，模块中的每个函数都将被优化应用。用户不需要手动遍历各个函数来应用此传递。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:110002
msgid "以类似的方式应用更多的优化。例如，可以消除  `z` 和 `z1` 使用的常见表达式。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:130002
msgid "一些优化，如融合，也是参数化的。例如，opt 级别 0 将不允许算子融合在一起。用户可以通过 `fuse_opt_level` 来启用它。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:150002
msgid "使用 Sequential 来应用 Passes 序列"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:150004
msgid ""
"像上面那样应用 pass 实际上是很乏味的，它可能需要用户更好地理解它们之间的依赖关系。例如，fusion 目前在 let "
"绑定上不能很好地工作。因此，如果在融合之前应用  "
"{py:func}`relay.transform.ToANormalForm`，将无法融合可融合的算子，因为此 pass 为每个表达式生成 "
"let 绑定，以规范化 Relay 程序。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:150006
msgid ""
"因此，Relay 提供了 {py:class}`tvm.transform.Sequential`，通过指定每个 pass 所需的 passes "
"并将它们打包为一个整体来执行，从而使开发人员不必明确地处理这些问题。例如，现在可以使用 sequential 样式应用相同的 "
"pass，如下所示。{py:class}`tvm.transform.Sequential` 与 "
"[torch.nn.sequential](https://pytorch.org/docs/stable/nn.html#torch.nn.Sequential)"
" 和 "
"[mxnet.gluon.block](https://mxnet.apache.org/api/python/docs/_modules/mxnet/gluon/block.html)"
" 类似。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:150008
msgid ""
"例如，`torch.nn.sequential` 用于包含 PyTorch 模块序列，这些模块将被添加以构建网络。它主要关注网络层。相反，pass"
" infra 中的 {py:class}`tvm.transform.Sequential` 作用于优化 pass。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:150010
msgid "下面通过 {py:class}`tvm.transform.Sequential` 执行一些传递："
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:170002
msgid ""
"从变换后的 Relay 程序中，可以看到仍然有两个相同的加法运算。这是因为实际上并没有执行 "
"``EliminateCommonSubexpr``。原因是在 {py:class}`tvm.transform.Sequential` "
"下，默认只执行优化级别小于或等于 2 的传递。然而，pass infra 为用户提供了配置接口，以定制他们想要执行的优化级别。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:190002
msgid "现在可以看到，两个相同的加法项中只有一个被保留了。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:190004
msgid ""
"此外，用户可以使用 `disabled_pass` 配置有选择地禁用一些传递，这类似于通用编译器（如 Clang 和 GCC）使用的 `-fno-"
"xxx` 选项。例如，可以如下所示禁用 `EliminateCommonSubexpr`。打印的模块将再次显示两个相同的加法运算。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:210002
msgid "使用 Python 装饰器实现 Pass"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:210004
msgid ""
"下一个示例演示了如何使用 Python 装饰器借助 pass infra 编排定制的优化管道。这个功能大大简化了 pass "
"的实现。例如，用户可以简单地定义装饰类来进行函数级优化，如下面的示例所示。`transform_function` 包装类，用 `c` "
"的倍数替换所有常量。稍后，将访问给定模块中的每个函数，并在调用自定义传递时替换函数中的每个常量。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:230002
msgid "调试 Pass"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:230004
msgid ""
"TVM 为用户提供了即插即用风格（plug-and-play）的调试传递，它通过特殊的传递（ ``PrintIR`` ） "
"转储（dump）整个模块的 IR，在完成某个传递后打印 IR。对 sequential 传递示例稍加修改的版本如下所示，以便为 "
"``FoldConstant`` 优化启用 IR 转储。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:250002
msgid ""
"通过在 ``FoldConstant`` 之后插入 ``PrintIR``，当 ``FoldConstant`` 完成时，pass infra "
"将转储模块 IR。用户可以在想要调试的任何 pass 之后插入它，以查看优化效果。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:250005
msgid ""
"有一个更灵活的调试机制。可以实现 ``PassInstrument`` 类来执行任意代码，不仅在每次传递之前和/或之后，还可以在进入/退出 "
"``PassContext`` 时执行。查看 {ref}`pass_instrument_cpp_backend` 了解更多信息。"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:250007
msgid ""
"这里使用 {py:func}`tvm.instrument.pass_instrument` 装饰器，实现 PassInsturment 类在每次"
" Pass 执行前打印 IR："
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:270002
msgid "小结"
msgstr ""

#: ../../xin/docs/how_to/extend_tvm/use_pass_infra.ipynb:270004
msgid ""
"本教程介绍了如何使用 pass infra 更方便地在 TVM 中编写和调用 pass。本文还讨论了调用 pass 的不同方法。使用 "
"{py:class}`tvm.transform.Sequential` "
"可以很大程度上帮助用户简化处理多个优化传递及其依赖关系的工作。此外，还提供了示例来说明如何使用 ``PrintIR`` 和跟踪调试 pass。"
msgstr ""

#~ msgid ""
#~ ":download:`Download Python source code: "
#~ "use_pass_infra.py <use_pass_infra.py>`"
#~ msgstr ""

#~ msgid ""
#~ ":download:`Download Jupyter notebook: "
#~ "use_pass_infra.ipynb <use_pass_infra.ipynb>`"
#~ msgstr ""

#~ msgid ""
#~ "`Gallery generated by Sphinx-Gallery "
#~ "<https://sphinx-gallery.github.io>`_"
#~ msgstr ""

#~ msgid ""
#~ "Click :ref:`here "
#~ "<sphx_glr_download_how_to_extend_tvm_use_pass_infra.py>` to "
#~ "download the full example code"
#~ msgstr ""

#~ msgid "How to Use TVM Pass Infra"
#~ msgstr ""

#~ msgid "**Author**: `Zhi Chen <https://github.com/zhiics>`_"
#~ msgstr ""

#~ msgid ""
#~ "As the number of optimization passes "
#~ "increases in Relay/tir, it becomes "
#~ "intractable to execute them and maintain"
#~ " their dependencies manually. Therefore, we"
#~ " have introduced an infrastructure to "
#~ "manage the optimization passes and make"
#~ " it applicable to different layers of"
#~ " the IR in the TVM stack."
#~ msgstr ""

#~ msgid ""
#~ "The optimizations of a Relay/tir program"
#~ " could be applied at various "
#~ "granularity, namely function-level and "
#~ "module-level using "
#~ ":py:class:`tvm.relay.transform.FunctionPass`/ "
#~ ":py:class:`tvm.tir.transform.PrimFuncPass` and "
#~ ":py:class:`tvm.transform.ModulePass` respectively. Or "
#~ "users can rely on "
#~ ":py:class:`tvm.transform.Sequential` to apply a "
#~ "sequence of passes on a Relay/tir "
#~ "program where the dependencies between "
#~ "passes can be resolved by the pass"
#~ " infra. For more details about each"
#~ " type of these passes, please refer"
#~ " to the :ref:`pass-infra`"
#~ msgstr ""

#~ msgid ""
#~ "This tutorial mainly demostrates how "
#~ "developers can use the pass infra "
#~ "to perform a certain optimization and"
#~ " create an optimization pipeline for "
#~ "a Relay program. The same approach "
#~ "can be used for tir as well."
#~ msgstr ""

#~ msgid "Create An Example Relay Program"
#~ msgstr ""

#~ msgid ""
#~ "First of all, we create a simple"
#~ " Relay program for the tutorial. This"
#~ " program will be used by various "
#~ "optimizations of the examples in this"
#~ " tutorial. Similarly, users can write "
#~ "a tir primitive function and apply "
#~ "the tir passes."
#~ msgstr ""

#~ msgid "Optimize the Program"
#~ msgstr ""

#~ msgid ""
#~ "Now we would like to optimize the"
#~ " program. Relay features a host of"
#~ " optimizations. We will select some "
#~ "of them to apply on this example"
#~ " program."
#~ msgstr ""

#~ msgid ""
#~ "There are multiple ways to optimize "
#~ "a Relay program. Below we will "
#~ "provide examples for each of them."
#~ msgstr ""

#~ msgid "Manually Apply Optimization Passes"
#~ msgstr ""

#~ msgid ""
#~ "More optimizations can be applied in "
#~ "the similar manner. For instance, we "
#~ "can eliminate the common expressions "
#~ "that used by `z` and `z1`."
#~ msgstr ""

#~ msgid ""
#~ "Some optimizations, such as fusion, are"
#~ " parameteric as well. For example, "
#~ "opt level 0 will not allow "
#~ "operators to be fused together. Users"
#~ " can pass the `fuse_opt_level` to "
#~ "enable this."
#~ msgstr ""

#~ msgid "Use Sequential to Apply a Sequence of Passes"
#~ msgstr ""

#~ msgid ""
#~ "Applying passes as above is actually "
#~ "tedious and it may require users "
#~ "to have better understanding about the"
#~ " dependencies between them. For example,"
#~ " fusion currently doesn't work well "
#~ "on let bindings. Therefore, we would "
#~ "not be able to fuse operators that"
#~ " were fusable if "
#~ ":py:func:`relay.transform.ToANormalForm` is applied "
#~ "before fusion, as this pass generates"
#~ " let bindings for each expression to"
#~ " canonicalize a Relay program."
#~ msgstr ""

#~ msgid ""
#~ "Relay, hence, provides "
#~ ":py:class:`tvm.transform.Sequential` to alleviate "
#~ "developers from handling these issues "
#~ "explicitly by specifying the required "
#~ "passes of each pass and packing "
#~ "them as a whole to execute. For"
#~ " example, the same passes can now "
#~ "be applied using the sequential style"
#~ " as the following. "
#~ ":py:class:`tvm.transform.Sequential` is similiar to"
#~ " `torch.nn.sequential "
#~ "<https://pytorch.org/docs/stable/nn.html#torch.nn.Sequential>`_ "
#~ "and `mxnet.gluon.block "
#~ "<https://mxnet.apache.org/api/python/docs/_modules/mxnet/gluon/block.html>`_."
#~ " For example, `torch.nn.sequential` is used"
#~ " to contain a sequence of PyTorch "
#~ "`Modules` that will be added to "
#~ "build a network. It focuses on the"
#~ " network layers. Instead, the "
#~ ":py:class:`tvm.transform.Sequential` in our pass "
#~ "infra works on the optimizing pass."
#~ msgstr ""

#~ msgid ""
#~ "From the transformed Relay program, we"
#~ " can see that there are still "
#~ "two identical addition operations. This "
#~ "is because ``EliminateCommonSubexpr`` was not"
#~ " actually performed. The reason is "
#~ "because only the passes that have "
#~ "optimization level less or equal to "
#~ "2 will be executed by default "
#~ "under :py:class:`tvm.transform.Sequential`. The pass"
#~ " infra, however, provides a configuration"
#~ " interface for users to customize the"
#~ " optimization level that they want to"
#~ " execute."
#~ msgstr ""

#~ msgid "Now we can see that only one of the two identical additions is kept."
#~ msgstr ""

#~ msgid ""
#~ "In addition, users can selectively "
#~ "disable some passes using the "
#~ "`disabled_pass` config, which is similar "
#~ "to the `-fno-xxx` option used the"
#~ " general purpose compilers, such as "
#~ "Clang and GCC. For example, we can"
#~ " disable EliminateCommonSubexpr as following. "
#~ "The printed module will again show "
#~ "two identical addition operations."
#~ msgstr ""

#~ msgid "Implement a Pass Using Python Decorator"
#~ msgstr ""

#~ msgid ""
#~ "The next example illustrates how we "
#~ "can orchestrate a customized optimization "
#~ "pipeline through the pass infra using"
#~ " Python decorators. This functionality "
#~ "greatly eases the implementation of "
#~ "passes. For example, users can simply"
#~ " define a decorated class to do "
#~ "function-level optimizations as the "
#~ "following example shows. `transform_function` "
#~ "wraps a class to replace all "
#~ "constants with a multiple of `c`. "
#~ "Later on, each function in a given"
#~ " module will be visited and each "
#~ "constant in the function will be "
#~ "replaced when we invoke the customized"
#~ " pass."
#~ msgstr ""

#~ msgid "Debug a Pass"
#~ msgstr ""

#~ msgid ""
#~ "TVM provides users a plug-and-play"
#~ " style debugging pass that print the"
#~ " IR after a certain pass is "
#~ "done through a special pass "
#~ "(``PrintIR``) to dump the IR of "
#~ "the whole module. A slightly modified"
#~ " version of the sequential pass "
#~ "example could be like the following "
#~ "to enable IR dumping for "
#~ "``FoldConstant`` optimization."
#~ msgstr ""

#~ msgid ""
#~ "By inserting the ``PrintIR`` pass after"
#~ " ``FoldConstant``, the pass infra will "
#~ "dump out the module IR when "
#~ "``FoldConstant`` is done. Users can plug"
#~ " in this pass after any pass "
#~ "they want to debug for viewing the"
#~ " optimization effect."
#~ msgstr ""

#~ msgid ""
#~ "There is a more flexible debugging "
#~ "mechanism. One can implement a "
#~ "``PassInstrument`` class to execute arbitrary"
#~ " code not only before and/or after"
#~ " each pass but also at "
#~ "entering/exiting ``PassContext``. See "
#~ ":ref:`pass_instrument_cpp_backend` for more details."
#~ msgstr ""

#~ msgid ""
#~ "Here we use "
#~ ":py::func`tvm.instrument.pass_instrument` decorator to "
#~ "implement a PassInsturment class printing "
#~ "IR before execution of each passes:"
#~ msgstr ""

#~ msgid "Summary"
#~ msgstr ""

#~ msgid ""
#~ "This tutorial has covered how we "
#~ "can write and invoke passes in TVM"
#~ " more conveniently using the pass "
#~ "infra. Different ways of invoking a "
#~ "pass are also disucssed. Using "
#~ ":py:class:`tvm.transform.Sequential` can largely "
#~ "help users to ease the work of "
#~ "handling multiple optimization passes and "
#~ "their dependencies. In addition, an "
#~ "example is provided to illustrate how"
#~ " we can debug a pass using the"
#~ " ``PrintIR`` and tracing."
#~ msgstr ""

