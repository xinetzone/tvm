# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-09 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:20004
msgid "Auto-scheduling a Convolution Layer for GPU"
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:20005
msgid ""
"**Author**: [Lianmin Zheng](https://github.com/merrymercy),             "
"[Chengfan Jia](https://github.com/jcf94/)"
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:20007
msgid "This is a tutorial on how to use the auto-scheduler for GPUs."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:20009
msgid ""
"Different from the template-based `autotvm <tutorials-autotvm-sec>` which"
" relies on manual templates to define the search space, the auto-"
"scheduler does not require any templates. Users only need to write the "
"computation declaration without any schedule commands or templates. The "
"auto-scheduler can automatically generate a large search space and find a"
" good schedule in the space."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:20015
msgid "We use a convolution layer as an example in this tutorial."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:20017
msgid ""
"Note that this tutorial will not run on Windows or recent versions of "
"macOS. To get it to run, you will need to wrap the body of this tutorial "
"in a :code:`if __name__ == \"__main__\":` block."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:40002
msgid "Define the computation"
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:40003
msgid ""
"To begin with, let us define the computation of a convolution layer. The "
"function should return the list of input/output tensors. From these "
"tensors, the auto-scheduler can get the whole computational graph."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:60002
msgid "Create the search task"
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:60003
msgid "We then create a search task for the last convolution layer in the resnet."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:80002
msgid ""
"Next, we set parameters for the auto-scheduler. These parameters mainly "
"specify how we do the measurement during the search."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:80005
msgid ""
":code:`measure_ctx` launches a different process for measurement to "
"provide isolation. It can protect the main process from GPU crashes "
"during measurement and avoid other runtime conflicts."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:80008
msgid ""
":code:`min_repeat_ms` defines the minimum duration of one \"repeat\" in "
"every measurement. This can warmup the GPU, which is necessary to get "
"accurate measurement results. Typically, we recommend a value >= 300 ms."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:80011
msgid ""
":code:`num_measure_trials` is the number of measurement trials we can use"
" during the search. We only make 10 trials in this tutorial for a fast "
"demonstration. In practice, 1000 is a good value for the search to "
"converge. You can do more trials according to your time budget."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:80014
msgid ""
"In addition, we use :code:`RecordToFile` to dump measurement records into"
" a file `conv2d.json`. The measurement records can be used to query the "
"history best, resume the search, and do more analyses later."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:80017
msgid ""
"see :any:`auto_scheduler.TuningOptions`, "
":any:`auto_scheduler.LocalRPCMeasureContext` for more parameters."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:100002
msgid "Run the search"
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:100003
msgid ""
"Now we get all inputs ready. Pretty simple, isn't it? We can kick off the"
" search and let the auto-scheduler do its magic. After some measurement "
"trials, we can load the best schedule from the log file and apply it."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:120002
msgid ""
"We can lower the schedule to see the IR after auto-scheduling. The auto-"
"scheduler correctly performs optimizations including multi-level tiling, "
"cooperative fetching, unrolling and operator fusion."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:140002
msgid "Check correctness and evaluate performance"
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:140003
msgid "We build the binary and check its correctness and performance."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:160002
msgid "Using the record file"
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:160003
msgid ""
"During the search, all measurement records are dumped into the record "
"file \"conv2d.json\". The measurement records can be used to re-apply "
"search results, resume the search, and perform other analyses."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:170002
msgid ""
"Here is an example where we load the best schedule from a file, print the"
" equivalent python schedule API and CUDA source code. They can be used "
"for debugging and learning the behavior of the auto-scheduler."
msgstr ""

#: ../../xin/docs/how_to/tune_with_autoscheduler/tune_conv2d_layer_cuda.ipynb:190002
msgid ""
"A more complicated example is to resume the search. In this case, we need"
" to create the search policy and cost model by ourselves and resume the "
"status of search policy and cost model with the log file. In the example "
"below we resume the status and do more 5 trials."
msgstr ""

#~ msgid ""
#~ ":download:`Download Python source code: "
#~ "tune_conv2d_layer_cuda.py <tune_conv2d_layer_cuda.py>`"
#~ msgstr ""

#~ msgid ""
#~ ":download:`Download Jupyter notebook: "
#~ "tune_conv2d_layer_cuda.ipynb <tune_conv2d_layer_cuda.ipynb>`"
#~ msgstr ""

#~ msgid ""
#~ "`Gallery generated by Sphinx-Gallery "
#~ "<https://sphinx-gallery.github.io>`_"
#~ msgstr ""

#~ msgid ""
#~ "Click :ref:`here "
#~ "<sphx_glr_download_how_to_tune_with_autoscheduler_tune_conv2d_layer_cuda.py>`"
#~ " to download the full example code"
#~ msgstr ""

#~ msgid ""
#~ "**Author**: `Lianmin Zheng "
#~ "<https://github.com/merrymercy>`_,             `Chengfan "
#~ "Jia <https://github.com/jcf94/>`_"
#~ msgstr ""

#~ msgid ""
#~ "Different from the template-based "
#~ ":ref:`autotvm <tutorials-autotvm-sec>` which"
#~ " relies on manual templates to define"
#~ " the search space, the auto-scheduler"
#~ " does not require any templates. "
#~ "Users only need to write the "
#~ "computation declaration without any schedule"
#~ " commands or templates. The auto-"
#~ "scheduler can automatically generate a "
#~ "large search space and find a good"
#~ " schedule in the space."
#~ msgstr ""

#~ msgid ""
#~ ":code:`measure_ctx` launches a different "
#~ "process for measurement to provide "
#~ "isolation. It can protect the master "
#~ "process from GPU crashes during "
#~ "measurement and avoid other runtime "
#~ "conflicts."
#~ msgstr ""

