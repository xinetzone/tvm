# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-13 15:37+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../notebook/docs/arch/debugger.rst:20
msgid "Debugger"
msgstr "调试器"

#: ../../notebook/docs/arch/debugger.rst:22
msgid ""
"TVM Debugger is an interface for debugging TVM's computation graph "
"execution. It helps to provide access to graph structures and tensor "
"values at the TVM runtime."
msgstr "TVM 调试器是调试 TVM 计算图执行的接口。它有助于在 TVM 运行时提供对图结构和张量值的访问。"

#: ../../notebook/docs/arch/debugger.rst:26
msgid "Debug Exchange Format"
msgstr "调试交换格式"

#: ../../notebook/docs/arch/debugger.rst:29
msgid "1. Computational Graph"
msgstr "1. 计算图"

#: ../../notebook/docs/arch/debugger.rst:30
msgid ""
"The optimized graph build by relay in json serialized format is dumped as"
" it is. This contains the whole information about the graph. The UX can "
"either use this graph directly or transform this graph to the format UX "
"can understand."
msgstr ""
"通过 relay 以 json 序列化格式构建的优化计算图被转储。它包含了关于图的全部信息。UX 可以直接使用这个图，也可以将这个图转换成 UX "
"可以理解的格式。"

#: ../../notebook/docs/arch/debugger.rst:35
msgid "The Graph JSON format is explained below"
msgstr "下面将解释 Graph JSON 格式："

#: ../../notebook/docs/arch/debugger.rst:37
msgid ""
"1. ``nodes`` Nodes are either placeholders or computational nodes in "
"json. The nodes are stored as a list. A node contains the below "
"information"
msgstr "1. ``nodes`` 节点可以是占位符或计算节点。节点以列表形式存储。节点包含以下信息："

#: ../../notebook/docs/arch/debugger.rst:41
msgid ""
"``op`` - operation type, ``null`` means it is a "
"placeholder/variable/input node and``tvm_op`` means this node can be "
"executed"
msgstr "``op`` - 运算类型，``null`` 表示它是占位符/变量/输入节点，而 ``tvm_op`` 表示这个节点可以被执行。"

#: ../../notebook/docs/arch/debugger.rst:42
msgid "``name`` - Name of the node"
msgstr "``name`` - 节点名称"

#: ../../notebook/docs/arch/debugger.rst:43
msgid ""
"``inputs`` - Position of the inputs for this operation, Inputs is a list "
"of tuples with (nodeid, index, version). (Optional)"
msgstr "``inputs`` - 此运算的输入位置，输入是元组列表，每个元组包含 (nodeid, index, version)。(可选)"

#: ../../notebook/docs/arch/debugger.rst:44
msgid ""
"``attrs`` - Attributes of the node which contains the following "
"information"
msgstr "``attrs`` - 节点的属性，包含以下信息："

#: ../../notebook/docs/arch/debugger.rst:46
msgid "``flatten_data`` - Whether this data need to be flattened before execution"
msgstr "``flatten_data`` - 执行前是否需要展平此数据"

#: ../../notebook/docs/arch/debugger.rst:47
msgid ""
"``func_name`` - Fused function name, corresponds to the symbol in the lib"
" generated by relay compilation process."
msgstr "``func_name`` - 融合后的函数名称，对应于由 relay 编译过程生成的库中的符号。"

#: ../../notebook/docs/arch/debugger.rst:48
msgid "``num_inputs`` - Number of inputs for this node"
msgstr "``num_inputs`` - 此节点的输入数量"

#: ../../notebook/docs/arch/debugger.rst:49
msgid "``num_outputs`` - Number of outputs this node produces"
msgstr "``num_outputs`` - 此节点产生的输出数量"

#: ../../notebook/docs/arch/debugger.rst:51
msgid ""
"2. ``arg_nodes`` arg_nodes is a list of indices of nodes which is "
"placeholder/variable/input or constant/param to the graph."
msgstr "2. ``arg_nodes`` arg_nodes 是节点索引列表，这些节点可以是占位符/变量/输入，或者是计算图的常量/参数。"

#: ../../notebook/docs/arch/debugger.rst:54
msgid "3. ``heads`` heads is a list of entries as the output of the graph."
msgstr "3. ``heads`` heads 是计算图的输出的项目列表。"

#: ../../notebook/docs/arch/debugger.rst:57
msgid ""
"4. ``node_row_ptr`` node\\_row\\_ptr stores the history of forward path, "
"so you can skip constructing the entire graph in inference tasks."
msgstr "4. ``node_row_ptr`` node\\_row\\_ptr 存储了前向路径的历史记录，因此你可以在推理任务中跳过构建整个图。"

#: ../../notebook/docs/arch/debugger.rst:60
msgid ""
"5. ``attrs`` attrs can contain version numbers or similar helpful "
"information."
msgstr "5. ``attrs`` attrs 可以包含版本号或类似的有用信息。"

#: ../../notebook/docs/arch/debugger.rst:63
msgid "``storage_id`` - Memory slot id for each node in the storage layout."
msgstr "``storage_id`` - 存储布局中每个节点的内存插槽ID。"

#: ../../notebook/docs/arch/debugger.rst:64
msgid "``dtype`` - Datatype of each node (enum value)."
msgstr "``dtype`` - 每个节点的数据类型（枚举值）。"

#: ../../notebook/docs/arch/debugger.rst:65
msgid "``dltype`` - Datatype of each node in order."
msgstr "``dltype`` - 按顺序的每个节点的数据类型。"

#: ../../notebook/docs/arch/debugger.rst:66
msgid "``shape`` - Shape of each node k order."
msgstr "``shape`` - 每个节点 k 阶的形状。"

#: ../../notebook/docs/arch/debugger.rst:67
msgid "``device_index`` - Device assignment for each entry in the graph."
msgstr "``device_index`` - 图中每个条目的设备分配。"

#: ../../notebook/docs/arch/debugger.rst:69
msgid "Example of dumped graph:"
msgstr "转储图的示例："

#: ../../notebook/docs/arch/debugger.rst:109
#, fuzzy
msgid "2. Tensor dumping"
msgstr "2. Tensor 转储"

#: ../../notebook/docs/arch/debugger.rst:111
msgid ""
"The tensor received after execution is in ``tvm.ndarray`` type. All the "
"tensors will be saved as binary bytes in serialized format.  The result "
"binary bytes can be loaded by the API \"load_params\"."
msgstr ""
"执行后收到的张量在 ``tvm.ndarray`` 类型中所有的张量将以二进制字节的序列化格式保存。结果二进制字节可以通过 API "
"\"load_params\" 加载。"

#: ../../notebook/docs/arch/debugger.rst:115
msgid "Example of loading the parameters"
msgstr "加载参数的示例"

#: ../../notebook/docs/arch/debugger.rst:126
msgid "How to use Debugger?"
msgstr "如果使用 Debugger？"

#: ../../notebook/docs/arch/debugger.rst:128
msgid "In ``config.cmake`` set the ``USE_PROFILER`` flag to ``ON``"
msgstr "在 ``config.cmake`` 中设置 ``USE_PROFILER`` 为 ``ON``"

#: ../../notebook/docs/arch/debugger.rst:135
msgid "Do 'make' tvm, so that it will make the ``libtvm_runtime.so``"
msgstr "执行 `make tvm`，这样它就会生成 ``libtvm_runtime.so``"

#: ../../notebook/docs/arch/debugger.rst:137
msgid ""
"In frontend script file instead of ``from tvm.contrib import "
"graph_executor`` import the ``GraphModuleDebug`` ``from "
"tvm.contrib.debugger.debug_executor import GraphModuleDebug``"
msgstr ""
"在前端脚本中替换 ``from tvm.contrib import graph_executor`` 导入为 ``from "
"tvm.contrib.debugger.debug_executor import GraphModuleDebug``"

#: ../../notebook/docs/arch/debugger.rst:160
msgid ""
"If network previously was exported to external library using "
"``lib.export_library(\"network.so\")``"
msgstr "如果网络之前已经使用 ``lib.export_library(\"network.so\")`` 导出到外部库，那么可以使用以下代码导入该库："

#: ../../notebook/docs/arch/debugger.rst:159
msgid ""
"like shared object file/dynamic linked library, the initialization of "
"debug runtime will be slightly different"
msgstr "与共享对象文件/动态链接库类似，初始化调试运行时会有一些不同。"

#: ../../notebook/docs/arch/debugger.rst:174
msgid ""
"The outputs are dumped to a temporary folder in ``/tmp`` folder or the "
"folder specified while creating the runtime."
msgstr "输出会转储到 ``/tmp`` 文件夹中的临时文件夹，或者在创建运行时时指定的文件夹。"

#: ../../notebook/docs/arch/debugger.rst:179
msgid "Sample Output"
msgstr "输出示例"

#: ../../notebook/docs/arch/debugger.rst:181
msgid "The below is the an example output of the debugger."
msgstr "下面是调试器的输出示例："

#~ msgid "::"
#~ msgstr ""

#~ msgid "with open(path_params, \"rb\") as fi:"
#~ msgstr ""

#~ msgid "loaded_params = bytearray(fi.read())"
#~ msgstr ""

#~ msgid "module.load_params(loaded_params)"
#~ msgstr ""

