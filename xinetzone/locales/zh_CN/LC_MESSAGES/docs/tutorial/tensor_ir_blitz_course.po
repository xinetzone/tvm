# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-09 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:10003
msgid "TensorIR 的突击课程"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:10005
msgid "**作者**: [Siyuan Feng](https://github.com/Hzfengsy)"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:10007
msgid "TensorIR 是用于深度学习程序的特定域语言，有两个广泛的目的："
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:10009
msgid "在各种硬件后端进行程序变换和优化的实现。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:10010
msgid "用于自动张量化程序优化的抽象。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:30002
msgid "IRModule"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:30004
msgid "IRModule 是 TVM 的中心数据结构，它包含深度学习程序。它是 IR 变换和模型构建的基本关注对象。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:30010
msgid ""
"这是 IRModule 的生命周期（life cycle），它可以从 TVMScript 创建。TensorIR "
"调度原语（primitive）和传递（pass）是变换 IRModule 的两种主要方式。另外，对 IRModule "
"进行一系列的变换也是可以接受的。请注意，可以在 **任何** 阶段向 TVMScript 打印 IRModule。在所有变换和优化完成后，可以将 "
"IRModule 构建为可运行的模块，以部署在目标设备上。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:30012
msgid "基于 TensorIR 和 IRModule 的设计，能够创建新的编程方式："
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:30014
msgid "用 TVMScript 写基于 Python-AST 语法的程序。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:30015
msgid "用 python api 变换和优化程序。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:30016
msgid "通过命令式的变换 API，交互式地检查和尝试性能。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:30018
msgid "创建 IRModule"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:30020
msgid ""
"IRModule 可以通过编写 TVMScript 来创建，TVMScript 是 TVM IR 的可圆润化（round-"
"trippable）的语法。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:30022
msgid ""
"与通过 [张量表达式](tutorial-tensor-expr-get-started) 创建计算表达式不同，TensorIR 允许用户通过 "
"TVMScript（嵌入式 python AST 的语言）来编程。这种新方法使得编写复杂的程序并进一步调度和优化它成为可能。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:50002
msgid "此外，还可以使用张量表达式 DSL 来编写简单的算子，并将其转换为 IRModule。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:70002
msgid "构建和运行 IRModule"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:70004
msgid "我们可以将 IRModule 构建为具有特定目标后端的可运行模块。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:90002
msgid "准备好输入 array 和输出 array，然后运行该模块。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:110002
msgid "转换 IRModule"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:110004
msgid ""
"IRModule 是程序优化的中心数据结构，它可以通过 `Schedule` "
"进行转换。调度包含多个原语方法，以交互式地转换程序。每个原语都以某些方式改造程序，以带来额外的性能优化。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:110008
msgid ""
"上面的图片是优化张量程序的典型工作流程。首先，需要在由 TVMScript 或 Tensor Expression 创建的初始 IRModule "
"上创建调度。然后，一连串的调度原语将有助于提高性能。最后，我们可以将其降低并构建为可运行的模块。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:110010
msgid "这里只演示了非常简单的变换。首先，在输入的 `ir_module` 上创建调度。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:130002
msgid "将该循环分为 3 个循环，并打印结果。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:150002
msgid "也可以重新调度循环的顺序。现在将循环 `i_2` 移到 `i_1` 的外面。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:170002
msgid "转化为 GPU 程序"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:170004
msgid "如果想在 GPU 上部署模型，线程绑定是必要的。幸运的是，也可以使用原语并做增量变换。"
msgstr ""

#: ../../xin/docs/tutorial/tensor_ir_blitz_course.ipynb:190002
msgid "绑定线程后，现在用 `cuda` 后端构建 IRModule。"
msgstr ""

#~ msgid "TensorIR 是一种用于深度学习程序的特定域语言，有两个广泛的目的："
#~ msgstr ""

#~ msgid "一个在各种硬件后端进行程序转换和优化的实现。"
#~ msgstr ""

#~ msgid "一个用于自动张量化程序优化的抽象。"
#~ msgstr ""

#~ msgid ""
#~ "这是一个 IRModule 的生命周期（life cycle），它可以从 TVMScript"
#~ " 创建。TensorIR 调度原语（primitive）和传递（pass）是转换 IRModule "
#~ "的两种主要方式。另外，对一个 IRModule 进行一系列的转换也是可以接受的。请注意，我们可以在 "
#~ "**任何** 阶段向 TVMScript 打印一个 "
#~ "IRModule。在所有转换和优化完成后，我们可以将 IRModule 构建为可运行的模块，以部署在目标设备上。"
#~ msgstr ""

#~ msgid "基于 TensorIR 和 IRModule 的设计，我们能够创建一个新的编程方式："
#~ msgstr ""

#~ msgid "用 TVMScript 写一个基于 Python-AST 语法的程序。"
#~ msgstr ""

#~ msgid "用 python api 转换和优化一个程序。"
#~ msgstr ""

#~ msgid "通过一个命令式的转换 API，交互式地检查和尝试性能。"
#~ msgstr ""

#~ msgid ""
#~ "IRModule 可以通过编写 TVMScript 来创建，TVMScript 是 "
#~ "TVM IR 的一种可圆润化（round-trippable）的语法。"
#~ msgstr ""

#~ msgid ""
#~ "与通过 [张量表达式](tutorial-tensor-expr-get-"
#~ "started) 创建计算表达式不同，TensorIR 允许用户通过 TVMScript（一种嵌入"
#~ " python AST 的语言）来编程。这种新方法使得编写复杂的程序并进一步调度和优化它成为可能。"
#~ msgstr ""

#~ msgid "此外，我们还可以使用张量表达式 DSL 来编写简单的运算符，并将其转换为 IRModule。"
#~ msgstr ""

#~ msgid ""
#~ "IRModule 是程序优化的中心数据结构，它可以通过 `Schedule` "
#~ "进行转换。一个调度包含多个原语方法，以交互式地转换程序。每个原语都以某些方式改造程序，以带来额外的性能优化。"
#~ msgstr ""

#~ msgid ""
#~ "上面的图片是优化张量程序的典型工作流程。首先，我们需要在由 TVMScript 或 Tensor "
#~ "Expression 创建的初始 IRModule "
#~ "上创建一个调度。然后，一连串的调度原语将有助于提高性能。最后，我们可以将其降低并构建为一个可运行的模块。"
#~ msgstr ""

#~ msgid "这里我们只演示了一个非常简单的转换。首先，我们在输入的 `ir_module` 上创建调度。"
#~ msgstr ""

#~ msgid "我们也可以重新调度循环的顺序。现在我们将循环 `i_2` 移到 `i_1` 的外面。"
#~ msgstr ""

#~ msgid "如果我们想在 GPU 上部署模型，线程绑定是必要的。幸运的是，我们也可以使用原语并做增量转换。"
#~ msgstr ""

