# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-09 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../xin/docs/how_to/work_with_microtvm/micro_aot.ipynb:20004
msgid "microTVM Host-Driven AoT"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_aot.ipynb:20005
msgid ""
"**Authors**: [Mehrdad Hessar](https://github.com/mehrdadh), [Alan "
"MacDonald](https://github.com/alanmacd)"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_aot.ipynb:20009
msgid ""
"This tutorial is showcasing microTVM host-driven AoT compilation with a "
"TFLite model. AoTExecutor reduces the overhead of parsing graph at "
"runtime  compared to GraphExecutor. Also, we can have better memory "
"management using ahead  of time compilation. This tutorial can be "
"executed on a x86 CPU using C runtime (CRT) or on Zephyr platform on a "
"microcontroller/board supported by Zephyr."
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_aot.ipynb:40002
msgid "Import a TFLite model"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_aot.ipynb:40004
msgid ""
"To begin with, download and import a Keyword Spotting TFLite model. This "
"model is originally from [MLPerf Tiny "
"repository](https://github.com/mlcommons/tiny). To test this model, we "
"use samples from [KWS dataset provided by "
"Google](https://ai.googleblog.com/2017/08/launching-speech-commands-"
"dataset.html)."
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_aot.ipynb:40008
msgid ""
"**Note:** By default this tutorial runs on x86 CPU using CRT, if you "
"would like to run on Zephyr platform you need to export "
"`TVM_MICRO_USE_HW` environment variable."
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_aot.ipynb:60002
msgid "Defining the target"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_aot.ipynb:60004
msgid ""
"Now we need to define the target, runtime and executor. In this tutorial,"
" we focused on using AOT host driven executor. We use the host micro "
"target which is for running a model on x86 CPU using CRT runtime or "
"running a model with Zephyr platform on qemu_x86 simulator board. In the "
"case of a physical microcontroller, we get the target model for the "
"physical board (E.g. nucleo_l4r5zi) and pass it to "
"`tvm.target.target.micro` to create a full micro target."
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_aot.ipynb:80002
msgid "Compile the model"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_aot.ipynb:80004
msgid "Now, we compile the model for the target:"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_aot.ipynb:100002
msgid "Create a microTVM project"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_aot.ipynb:100004
msgid ""
"Now that we have the compiled model as an IRModule, we need to create a "
"firmware project to use the compiled model with microTVM. To do this, we "
"use Project API. We have defined CRT and Zephyr microTVM template "
"projects which are used for x86 CPU and Zephyr boards respectively."
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_aot.ipynb:120002
msgid "Build, flash and execute the model"
msgstr ""

#: ../../xin/docs/how_to/work_with_microtvm/micro_aot.ipynb:120003
msgid ""
"Next, we build the microTVM project and flash it. Flash step is specific "
"to physical microcontrollers and it is skipped if it is simulating a "
"microcontroller via the host main.cc or if a Zephyr emulated board is "
"selected as the target. Next, we define the labels for the model output "
"and execute the model with a sample with expected value of 6 (label: "
"left)."
msgstr ""

