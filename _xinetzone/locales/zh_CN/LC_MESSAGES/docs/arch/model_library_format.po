# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-09 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../xin/docs/arch/model_library_format.rst:21
msgid "Model 库格式"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:24
msgid "关于 Model 库格式"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:26
msgid ""
"传统上，TVM 将生成的库导出为动态共享对象（Dynamic Shared Objects，如 dll （Windows）或 .so "
"（linux））。 通过使用 ``libtvm_runtime.so`` "
"将这些库加载到可执行文件中，可以使用这些库执行推断。这个过程对传统操作系统提供的服务有很大的依赖。"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:29
msgid ""
"对于部署到非传统平台（例如那些缺乏传统操作系统），TVM 提供了另一种输出格式，模型库格式（Model Library "
"Format）。最初，microTVM 项目是这种格式的主要用例。 如果它在其他用例中变得有用（特别是，如果可以模型库格式导出 BYOC "
"工件），它可以用作通用的 TVM 导出格式。模型库格式是 tarball，包含 TVM 编译器输出的每个部分的文件。"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:33
msgid "可以输出什么？"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:35
msgid "在撰写本文时，导出仅限于使用  ``tvm.relay.build`` 构建的完整模型。"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:38
msgid "直接布局"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:40
msgid "Model Library Format 包含在 tarball 中。所有路径都相对于 tarball 的根目录："
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:42
msgid "``/`` - Root of the tarball"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:44
msgid "``codegen`` - Root directory for all generated device code"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:46
msgid "(see `codegen`_ section)"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:48
msgid ""
"``executor-config/`` - Configuration for the executor which drives model "
"inference"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:50
msgid "``graph/`` - Root directory containing configuration for the GraphExecutor"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:52
msgid "``graph.json`` - GraphExecutor JSON configuration"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:54
msgid "``metadata.json`` - Machine-parseable metadata for this model"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:56
msgid "``parameters/`` - Root directory where simplified parameters are placed"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:58
msgid ""
"``<model_name>.params`` - Parameters for the model tvm.relay._save_params"
" format"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:60
msgid "``src/`` - Root directory for all source code consumed by TVM"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:62
msgid "``relay.txt`` - Relay source code for the generated model"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:65
msgid "子目录的描述"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:70
msgid "``codegen``"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:72
msgid ""
"All TVM-generated code is placed in this directory. At the time of "
"writing, there is 1 file per Module in the generated Module tree, though "
"this restriction may change in the future. Files in this directory should"
" have filenames of the form "
"``<target>/(lib|src)/<unique_name>.<format>``."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:76
msgid "These components are described below:"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:78
msgid ""
"``<target>`` - Identifies the TVM target on which the code should run. "
"Currently, only ``host`` is supported."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:80
msgid ""
"``<unique_name>`` - A unique slug identifying this file. Currently "
"``lib<n>``, with ``<n>>`` an auto-incrementing integer."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:82
msgid ""
"``<format>`` - Suffix identifying the filename format. Currently ``c`` or"
" ``o``."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:84
msgid "An example directory tree for a CPU-only model is shown below:"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:86
msgid "``codegen/`` - Codegen directory"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:88
msgid "``host/`` - Generated code for ``target_host``"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:90
msgid "``lib/`` - Generated binary object files"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:92
msgid "``lib0.o`` - LLVM module (if ``llvm`` target is used)"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:93
msgid "``lib1.o`` - LLVM CRT Metadata Module (if ``llvm`` target is used)"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:95
msgid "``src/`` - Generated C source"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:97
msgid "``lib0.c`` - C module (if ``c`` target is used)"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:98
msgid "``lib1.c`` - C CRT Metadata module (if ``c`` target is used)"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:101
msgid "``executor-config``"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:103
msgid ""
"Contains machine-parsable configuration for executors which can drive "
"model inference. Currently, only the GraphExecutor produces configuration"
" for this directory, in ``graph/graph.json``. This file should be read in"
" and the resulting string supplied to the ``GraphExecutor()`` constructor"
" for parsing."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:109
msgid "``parameters``"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:111
msgid ""
"Contains machine-parseable parameters. A variety of formats may be "
"provided, but at present, only the format produced by "
"``tvm.relay._save_params`` is supplied. When building with "
"``tvm.relay.build``,  the ``name`` parameter is considered to be the "
"model name. A single file is created in this directory "
"``<model_name>.json``."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:117
msgid "``src``"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:119
msgid ""
"Contains source code parsed by TVM. Currently, just the Relay source code"
" is created in ``src/relay.txt``."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:123
msgid "Metadata"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:125
msgid ""
"Machine-parseable metadata is placed in a file ``metadata.json`` at the "
"root of the tarball. Metadata is a dictionary with these keys:"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:128
#, python-format
msgid ""
"``export_datetime``: Timestamp when this Model Library Format was "
"generated, in `strftime <https://docs.python.org/3/library/datetime.html"
"#strftime-strptime-behavior>`_ format ``\"%Y-%M-%d %H:%M:%SZ\",``."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:131
msgid ""
"``memory``: A summary of the memory usage of each generated function. "
"Documented in `Memory Usage Summary`_."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:133
msgid ""
"``model_name``: The name of this model (e.g. the ``name`` parameter "
"supplied to ``tvm.relay.build``)."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:135
msgid ""
"``executors``: A list of executors supported by this model. Currently, "
"this list is always ``[\"graph\"]``."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:137
msgid ""
"``target``: A dictionary mapping ``device_type`` (the underlying integer,"
" as a string) to the sub-target which describes that relay backend used "
"for that ``device_type``."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:139
msgid ""
"``version``: A numeric version number that identifies the format used in "
"this Model Library Format. This number is incremented when the metadata "
"structure or on-disk structure changes. This document reflects version "
"``5``."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:144
msgid "Memory Usage Summary"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:146
msgid "A dictionary with these sub-keys:"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:148
msgid ""
"``\"main\"``: ``list[MainFunctionWorkspaceUsage]``. A list summarizing "
"memory usage for each workspace used by the main function and all sub-"
"functions invoked."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:150
msgid ""
"``\"operator_functions\"``: ``map[string, "
"list[FunctionWorkspaceUsage]]``. Maps operator function name to a list "
"summarizing memory usage for each workpace used by the function."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:153
msgid "A ``MainFunctionWorkspaceUsage`` is a dict with these keys:"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:155
#: ../../xin/docs/arch/model_library_format.rst:164
msgid ""
"``\"device\"``: ``int``. The ``device_type`` associated with this "
"workspace."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:156
msgid ""
"``\"workspace_size_bytes\"``: ``int``. Number of bytes needed in this "
"workspace by this function and all sub-functions invoked."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:158
msgid ""
"``\"constants_size_bytes\"``: ``int``. Size of the constants used by the "
"main function."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:159
msgid ""
"``\"io_size_bytes\"``: ``int``. Sum of the sizes of the buffers used from"
" this workspace by this function and sub-functions."
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:162
msgid "A ``FunctionWorkspaceUsage`` is a dict with these keys:"
msgstr ""

#: ../../xin/docs/arch/model_library_format.rst:165
msgid ""
"``\"workspace_size_bytes\"``: ``int``. Number of bytes needed in this "
"workspace by this function."
msgstr ""

#~ msgid "Model Library Format"
#~ msgstr ""

#~ msgid "About Model Library Format"
#~ msgstr ""

#~ msgid ""
#~ "TVM traditionally exports generated libraries"
#~ " as Dynamic Shared Objects (e.g. DLLs"
#~ " (Windows) or .so (linux)). Inferences "
#~ "can be performed using those libraries"
#~ " by loading them into an executable"
#~ " using ``libtvm_runtime.so``. This process "
#~ "is very dependent on services provided"
#~ " by traditional OS."
#~ msgstr ""

#~ msgid ""
#~ "For deployment to unconventional platforms "
#~ "(e.g. those lacking traditional OS), TVM"
#~ " provides another output format, Model "
#~ "Library Format. Initially, the microTVM "
#~ "project is the primary use case "
#~ "for this format. Should it become "
#~ "useful in other use cases (and in"
#~ " particular, should it become possible "
#~ "to export BYOC artifacts in Model "
#~ "Library Format), it could be used "
#~ "as a general-purpose TVM export "
#~ "format.  Model Library Format is a "
#~ "tarball containing a file for each "
#~ "piece of the TVM compiler output."
#~ msgstr ""

#~ msgid "What can be Exported?"
#~ msgstr ""

#~ msgid ""
#~ "At the time of writing, export is"
#~ " limited to full models built with"
#~ " ``tvm.relay.build``."
#~ msgstr ""

#~ msgid "Directory Layout"
#~ msgstr ""

#~ msgid ""
#~ "Model Library Format is contained within"
#~ " a tarball. All paths are relative"
#~ " to the root of the tarball:"
#~ msgstr ""

#~ msgid "Description of Sub-directories"
#~ msgstr ""

