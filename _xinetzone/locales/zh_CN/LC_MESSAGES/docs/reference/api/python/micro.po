# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-03-31 18:33+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../docs/reference/api/python/micro.rst:19
msgid "tvm.micro"
msgstr ""

#~ msgid "MicroTVM module for bare-metal backends"
#~ msgstr ""

#~ msgid "**Classes:**"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`AutoTvmModuleLoader <tvm.micro.AutoTvmModuleLoader>`\\"
#~ " \\(template\\_project\\_dir\\[\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "MicroTVM AutoTVM Module Loader"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`GeneratedProject <tvm.micro.GeneratedProject>`\\ "
#~ "\\(api\\_client\\, options\\)"
#~ msgstr ""

#~ msgid ""
#~ "Defines a glue interface to interact "
#~ "with a generated project through the "
#~ "API server."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`Session <tvm.micro.Session>`\\ "
#~ "\\(\\[transport\\_context\\_manager\\, ...\\]\\)"
#~ msgstr ""

#~ msgid "MicroTVM Device Session"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`TemplateProject <tvm.micro.TemplateProject>`\\ "
#~ "\\(api\\_client\\)"
#~ msgstr ""

#~ msgid ""
#~ "Defines a glue interface to interact "
#~ "with a template project through the "
#~ "API Server."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`TransportLogger <tvm.micro.TransportLogger>`\\ "
#~ "\\(name\\, child\\[\\, logger\\, level\\]\\)"
#~ msgstr ""

#~ msgid ""
#~ "Wraps a Transport implementation and "
#~ "logs traffic to the Python logging "
#~ "infrastructure."
#~ msgstr ""

#~ msgid "**Exceptions:**"
#~ msgstr ""

#~ msgid ":py:obj:`SessionTerminatedError <tvm.micro.SessionTerminatedError>`\\"
#~ msgstr ""

#~ msgid ""
#~ "Raised when a transport read operationd"
#~ " discovers that the remote session is"
#~ " terminated."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`UnsupportedInModelLibraryFormatError "
#~ "<tvm.micro.UnsupportedInModelLibraryFormatError>`\\"
#~ msgstr ""

#~ msgid ""
#~ "Raised when export_model_library_format does "
#~ "not support the given Module tree."
#~ msgstr ""

#~ msgid "**Functions:**"
#~ msgstr ""

#~ msgid ":py:obj:`autotvm_build_func <tvm.micro.autotvm_build_func>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "A dummy build function which causes "
#~ "autotvm to use a different export "
#~ "format."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`create_local_debug_executor "
#~ "<tvm.micro.create_local_debug_executor>`\\ "
#~ "\\(graph\\_json\\_str\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "Create a local debug runtime driving "
#~ "execution on the remote CPU device "
#~ "given."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`create_local_graph_executor "
#~ "<tvm.micro.create_local_graph_executor>`\\ "
#~ "\\(graph\\_json\\_str\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "Create a local graph executor driving"
#~ " execution on the remote CPU device"
#~ " given."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`export_model_library_format "
#~ "<tvm.micro.export_model_library_format>`\\ \\(mod\\, "
#~ "file\\_name\\)"
#~ msgstr ""

#~ msgid "Export the build artifact in Model Library Format."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`generate_project <tvm.micro.generate_project>`\\ "
#~ "\\(template\\_project\\_dir\\, ...\\)"
#~ msgstr ""

#~ msgid ""
#~ "Generate a project for an embedded "
#~ "platform that contains the given model."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`get_microtvm_template_projects "
#~ "<tvm.micro.get_microtvm_template_projects>`\\ \\(platform\\)"
#~ msgstr ""

#~ msgid "Find microTVM template project directory for specific platform."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`get_standalone_crt_dir "
#~ "<tvm.micro.get_standalone_crt_dir>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "Find the standalone_crt directory."
#~ msgstr ""

#~ msgid "参数"
#~ msgstr ""

#~ msgid "project template path"
#~ msgstr ""

#~ msgid "project generation option"
#~ msgstr ""

#~ msgid ""
#~ "configuration for this session (as "
#~ "generated by `tvm.micro.device.host.default_config()`, "
#~ "for example)"
#~ msgstr ""

#~ msgid "示例"
#~ msgstr ""

#~ msgid "**Methods:**"
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`generate_project "
#~ "<tvm.micro.TemplateProject.generate_project>`\\ "
#~ "\\(graph\\_executor\\_factory\\, ...\\)"
#~ msgstr ""

#~ msgid "Generate a project given GraphRuntimeFactory."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`generate_project_from_mlf "
#~ "<tvm.micro.TemplateProject.generate_project_from_mlf>`\\ "
#~ "\\(...\\)"
#~ msgstr ""

#~ msgid "Generate a project from MLF file."
#~ msgstr ""

#~ msgid ":py:obj:`close <tvm.micro.TransportLogger.close>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "Release resources associated with this transport."
#~ msgstr ""

#~ msgid ":py:obj:`open <tvm.micro.TransportLogger.open>`\\ \\(\\)"
#~ msgstr ""

#~ msgid ""
#~ "Open any resources needed to send "
#~ "and receive RPC protocol data for "
#~ "a single session."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`read <tvm.micro.TransportLogger.read>`\\ \\(n\\,"
#~ " timeout\\_sec\\)"
#~ msgstr ""

#~ msgid "Read up to n bytes from the transport."
#~ msgstr ""

#~ msgid ":py:obj:`timeouts <tvm.micro.TransportLogger.timeouts>`\\ \\(\\)"
#~ msgstr ""

#~ msgid "Return TransportTimeouts suitable for use with this transport."
#~ msgstr ""

#~ msgid ""
#~ ":py:obj:`write <tvm.micro.TransportLogger.write>`\\ "
#~ "\\(data\\, timeout\\_sec\\)"
#~ msgstr ""

#~ msgid "Write data to the transport channel."
#~ msgstr ""

#~ msgid "Maximum number of bytes to read from the transport."
#~ msgstr ""

#~ msgid ""
#~ "Number of seconds to wait for all"
#~ " `n` bytes to be received before "
#~ "timing out. The transport can wait "
#~ "additional time to account for transport"
#~ " latency or bandwidth limitations based "
#~ "on the selected configuration and number"
#~ " of bytes being received. If "
#~ "timeout_sec is 0, read should attempt"
#~ " to service the request in a "
#~ "non-blocking fashion. If timeout_sec is "
#~ "None, read should block until at "
#~ "least 1 byte of data can be "
#~ "returned."
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid ""
#~ "Data read from the channel. Less "
#~ "than `n` bytes may be returned, "
#~ "but 0 bytes should never be "
#~ "returned. If returning less than `n` "
#~ "bytes, the full timeout_sec, plus any"
#~ " internally-added timeout, should be "
#~ "waited. If a timeout or transport "
#~ "error occurs, an exception should be "
#~ "raised rather than simply returning "
#~ "empty bytes."
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid "引发"
#~ msgstr ""

#~ msgid ""
#~ "When the transport layer determines that"
#~ " the transport can no longer send "
#~ "or receive     data due to an "
#~ "underlying I/O problem (i.e. file "
#~ "descriptor closed, cable removed, etc)."
#~ msgstr ""

#~ msgid "When `timeout_sec` elapses without receiving any data."
#~ msgstr ""

#~ msgid "See the TransportTimeouts documentation in python/tvm/micro/session.py."
#~ msgstr ""

#~ msgid "The data to write over the channel."
#~ msgstr ""

#~ msgid ""
#~ "Number of seconds to wait for at"
#~ " least one byte to be written "
#~ "before timing out. The transport can "
#~ "wait additional time to account for "
#~ "transport latency or bandwidth limitations "
#~ "based on the selected configuration and"
#~ " number of bytes being received. If"
#~ " timeout_sec is 0, write should "
#~ "attempt to service the request in "
#~ "a non-blocking fashion. If timeout_sec"
#~ " is None, write should block until"
#~ " at least 1 byte of data can"
#~ " be returned."
#~ msgstr ""

#~ msgid ""
#~ "The number of bytes written to the"
#~ " underlying channel. This can be less"
#~ " than the length of `data`, but "
#~ "cannot be 0 (raise an exception "
#~ "instead)."
#~ msgstr ""

#~ msgid "A string containing the graph representation."
#~ msgstr ""

#~ msgid "The remote module containing functions in graph_json_str."
#~ msgstr ""

#~ msgid "The remote CPU execution device."
#~ msgstr ""

#~ msgid "If given, passed as dump_root= to GraphModuleDebug."
#~ msgstr ""

#~ msgid "A local graph executor instance that executes on the remote device."
#~ msgstr ""

#~ msgid ""
#~ "This function creates a .tar archive "
#~ "containing the build artifacts in a "
#~ "standardized layout. It's intended to "
#~ "allow downstream automation to build TVM"
#~ " artifacts against the C runtime."
#~ msgstr ""

#~ msgid "The return value of tvm.build or tvm.relay.build."
#~ msgstr ""

#~ msgid "Path to the .tar archive to generate."
#~ msgstr ""

#~ msgid "**file_name** -- The path to the generated .tar archive."
#~ msgstr ""

#~ msgid "Path to a template project containing a microTVM Project API server."
#~ msgstr ""

#~ msgid "Path to a directory to be created and filled with the built project."
#~ msgstr ""

#~ msgid ""
#~ "A runtime.Module exportable as Model "
#~ "Library Format. The value returned from"
#~ " tvm.relay.build or tvm.build."
#~ msgstr ""

#~ msgid ""
#~ "If given, Project API options given "
#~ "to the microTVM API server found "
#~ "in both template_project_path and "
#~ "generated_project_path."
#~ msgstr ""

#~ msgid ""
#~ "A class that wraps the generated "
#~ "project and which can be used to"
#~ " further interact with it."
#~ msgstr ""

#~ msgid "Platform type which should be defined in MicroTVMTemplateProject."
#~ msgstr ""

#~ msgid "Path to template project directory for platform."
#~ msgstr ""

#~ msgid ""
#~ "Though the C runtime source lives "
#~ "in the tvm tree, it is intended"
#~ " to be distributed with any binary"
#~ " build of TVM. This source tree "
#~ "is intended to be integrated into "
#~ "user projects to run models targeted "
#~ "with --runtime=c."
#~ msgstr ""

#~ msgid "The path to the standalone_crt"
#~ msgstr ""

