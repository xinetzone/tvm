# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-09 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../xin/docs/contribute/ci.rst:21
msgid "Using TVM's CI"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:26
msgid ""
"TVM primarily uses Jenkins for running Linux continuous integration (CI) "
"tests on `branches <https://ci.tlcpack.ai/job/tvm/>`_ `pull requests "
"<https://ci.tlcpack.ai/job/tvm/view/change-requests/>`_ through a build "
"configuration specified in a `Jenkinsfile "
"<https://github.com/apache/tvm/blob/main/Jenkinsfile>`_. Jenkins is the "
"only CI step that is codified to block merging. TVM is also tested "
"minimally against Windows and MacOS using GitHub Actions."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:33
msgid ""
"This page describes how contributors and committers can use TVM's CI to "
"verify their code. You can read more about the design of TVM CI in the "
"`tlc-pack/ci <https://github.com/tlc-pack/ci>`_ repo."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:37
msgid "For Contributors"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:39
msgid ""
"A standard CI run looks something like this viewed in `Jenkins' BlueOcean"
" viewer "
"<https://ci.tlcpack.ai/blue/organizations/jenkins/tvm/activity>`_. CI "
"runs usually take a couple hours to complete and pull requests (PRs) "
"cannot be merged before CI has successfully completed. To diagnose "
"failing steps, click through to the failing pipeline stage then to the "
"failing step to see the output logs."
msgstr ""

msgid "The Jenkins UI for a CI run"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:50
msgid "Debugging Failures"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:52
msgid ""
"When CI fails for some reason, there are several methods to diagnose the "
"issue."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:55
msgid "Jenkins Logs"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:60
msgid ""
"The first place to look for a failure is in the CI logs, follow the red "
"Xs on the failing job to view the logs. Note:"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:63
msgid ""
"Jenkins does not display the full log by default, at the top of the log "
"viewer is a button \"Show complete log\" which will take you to a "
"plaintext version of the log"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:65
msgid ""
"|pytest|_ failures are summarized at the bottom of the log but you will "
"likely need to scroll up to view the actual failure."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:69
msgid "Reproduce Failures"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:71
msgid ""
"Most TVM Python tests run under |pytest|_ and can be run as described in "
":ref:`pr-testing`."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:75
msgid "Reporting Issues"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:77
msgid ""
"Issues with CI should be `reported on GitHub "
"<https://github.com/apache/tvm/issues/new?assignees=&labels=&template=ci-"
"problem.md&title=%5BCI+Problem%5D+>`_ with a link to the relevant jobs, "
"commits, or PRs."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:83
msgid "For Maintainers"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:85
msgid "This section discusses processes ran by TVM Maintainers."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:89
msgid "Procedures for Keeping CI Green"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:91
msgid "This section talks about common procedures used to keep CI passing."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:94
msgid "Broken CI due to Simultaneous Merge"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:96
msgid ""
"Developers rely on the TVM CI to get signal on their PRs before merging."
"  Occasionally, two different PRs can pass CI individually but break "
"``main`` when both land.  This in turn causes an error to show up on an "
"unrelated PR that is based on the broken commit(s). Broken commits can be"
" identified `through GitHub "
"<https://github.com/apache/tvm/commits/main>`_ via the commit status icon"
" or via `Jenkins "
"<https://ci.tlcpack.ai/blue/organizations/jenkins/tvm/activity?branch=main>`_."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:102
msgid ""
"In these situations it is ultimately the responsibility of the TVM "
"Committer who merged the PR to fix CI (others are encouraged to help). "
"Typical responses to this situation are: 1. revert the offending commit "
"2. submit a forward fix to address the issue."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:107
msgid ""
"It is up to the committer and commit author which option to choose. A "
"broken CI affects all TVM developers and should be fixed as soon as "
"possible, while a revert may be especially painful for the author of the "
"offending PR when that PR is large."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:113
msgid "Dealing with Flakiness"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:115
msgid ""
"If you notice a failure on your PR that seems unrelated to your change, "
"you should search [recent GitHub issues related to flaky "
"tests](https://github.com/apache/tvm/issues?q=is%3Aissue+%5BCI+Problem%5D+Flaky+>)"
" and [file a new "
"issue](https://github.com/apache/tvm/issues/new?assignees=&labels=&template"
"=ci-problem.md&title=%5BCI+Problem%5D+>) if you don't see any reports of "
"the failure. If a certain test or class of tests affects several PRs or "
"commits on `main` with flaky failures, the test should be disabled via "
"[pytest's @xfail "
"decorator](https://docs.pytest.org/en/6.2.x/skipping.html#xfail-mark-"
"test-functions-as-expected-to-fail) with "
"[`strict=False`](https://docs.pytest.org/en/6.2.x/skipping.html#strict-"
"parameter) and the relevant issue linked in the disabling PR."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:129
msgid "Then submit a PR as usual"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:142
msgid "Skipping CI"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:144
msgid ""
"For reverts and trivial forward fixes, adding ``[skip ci]`` to the "
"revert's PR title will cause CI to shortcut and only run lint. Committers"
" should take care that they only merge CI-skipped PRs to fix a failure on"
" ``main`` and not in cases where the submitter wants to shortcut CI to "
"merge a change faster. The PR title is checked when the build is first "
"run (specifically during the lint step, so changes after that has run do "
"not affect CI and will require the job to be re-triggered by another "
"``git push``)."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:168
msgid "Docker Images"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:170
msgid ""
"Each CI job runs most of its work inside a Docker container, built from "
"files in the `docker/ <https://github.com/apache/tvm/tree/main/docker>`_ "
"folder."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:175
msgid "Updating a Docker Image Tag"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:177
msgid ""
"To update a tag, a new image needs to be built and uploaded to Docker "
"Hub, then the image tags in  `docker-images.ini "
"<https://github.com/apache/tvm/tree/main/ci/jenkins/docker-images.ini>`_ "
"need to be updated to match the image tags on Docker Hub."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:181
msgid ""
"Docker images are built automatically nightly via the `docker-images-ci "
"<https://ci.tlcpack.ai/job/docker-images-ci/>`_, which uploads the built "
"images to https://hub.docker.com/u/tlcpackstaging once they have passed "
"CI. Post-merge CI runs on ``main`` build Docker images ad-hoc and upload "
"them to the ``tlcpackstaging`` Docker Hub account as well. There is an "
"auto-promotion process for ``tlcpackstaging`` Docker images to be moved "
"to the ``tlcpack`` account. This means that image tags from "
"``tlcpackstaging`` can be used in CI and they will be automatically moved"
" to ``tlcpack`` after a successful post-merge CI run on ``main``. So the "
"steps to update the image are:"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:190
msgid ""
"Merge a PR that changes the Dockerfiles under ``docker/`` or scripts in "
"``docker/install``."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:191
msgid "Do either of:"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:193
msgid ""
"Wait for the post-merge CI build from the PR to complete and upload the "
"newly built image to the `tlcpackstaging "
"<https://hub.docker.com/u/tlcpackstaging>`_ Docker Hub."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:194
msgid ""
"Wait for the nightly Docker image build to complete and upload the newly "
"built image to the `tlcpackstaging "
"<https://hub.docker.com/u/tlcpackstaging>`_ Docker Hub."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:196
msgid ""
"Find the newly uploaded image tag on the `tlcpackstaging "
"<https://hub.docker.com/u/tlcpackstaging>`_ Docker Hub, for example "
"``20221208-070144-22ff38dff`` and update the tag in ``ci/jenkins/docker-"
"images.ini`` to use the tlcpackstaging tag but under the tlcpack account,"
" e.g. ``tlcpack/ci-arm:20221208-070144-22ff38dff``. Send in a PR with "
"these changes and wait for it to run through CI to ensure the new images "
"are valid."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:197
msgid ""
"Merge the ``docker-images.ini`` update PR. Once post-merge CI finishes "
"running on ``main`` the ``tlcpackstaging`` tag will be re-uploaded to "
"``tlcpack`` automatically."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:200
msgid "Adding a New Docker Image"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:202
msgid ""
"New docker images can be added to test TVM on a variety of platforms. "
"Here are the steps for adding a new CI image:"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:205
msgid ""
"Define the ``docker/Dockerfile.ci_foo`` and associated scripts in "
"``docker/install``. Create a PR containing only these changes (no "
"``Jenkinsfile`` changes)."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:207
msgid "Example: https://github.com/apache/tvm/pull/12230/files"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:209
msgid ""
"A committer verifies the image builds locally and then reviews/approves "
"this PR."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:210
msgid ""
"A committer creates the ci-foo repos in https://hub.docker.com/u/tlcpack "
"and https://hub.docker.com/u/tlcpackstaging."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:211
msgid ""
"Create a PR to create an ECR repo for the image in tlcpack/ci: "
"https://github.com/tlc-pack/ci/pull/46/files"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:212
msgid ""
"A committer creates and gets merged a PR to add the image to the "
"``Jenkinsfile``"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:214
msgid "Example: https://github.com/apache/tvm/pull/12369/files."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:216
msgid ""
"**NOTE**: The PR must be opened from a branch in apache/tvm, not from a "
"branch in a forked repo."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:218
msgid ""
"A committer adds this image to the daily docker rebuild/validation run in"
" tlcpack."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:220
msgid "Example: https://github.com/tlc-pack/tlcpack/pull/131"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:224
msgid "``ci-docker-staging``"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:226
msgid ""
"The `ci-docker-staging <https://github.com/apache/tvm/tree/ci-docker-"
"staging>`_ branch is typically used to test updates to Docker images and "
"``Jenkinsfile`` changes. When running a build for a normal PR from a "
"forked repository, Jenkins uses the code from the PR except for the "
"``Jenkinsfile`` itself, which comes from the base branch. When branches "
"are built, the ``Jenkinsfile`` in the branch is used, so a committer with"
" write access must push PRs to a branch in apache/tvm to properly test "
"``Jenkinsfile`` changes. If your PR makes changes to the ``Jenkinsfile``,"
" make sure to @ a `committer "
"<https://github.com/apache/tvm/tree/main/CONTRIBUTORS.md>`_ and ask them "
"to push your PR as a branch to test the changes."
msgstr ""

#: ../../xin/docs/contribute/ci.rst:238
msgid "CI Monitoring Rotation"
msgstr ""

#: ../../xin/docs/contribute/ci.rst:240
msgid ""
"Some tests are also flaky and occasionally fail for reasons unrelated to "
"the PR. The `CI monitoring rotation <https://github.com/apache/tvm/wiki"
"/CI-Monitoring-Runbook>`_ watches for these failures and disables tests "
"as necessary. It is the responsibility of those who wrote the test to "
"ultimately fix and re-enable the test."
msgstr ""

#~ msgid ""
#~ "For reverts and trivial forward fixes,"
#~ " adding ``[skip ci]`` to the revert's"
#~ " commit message will cause CI to "
#~ "shortcut and only run lint. Committers"
#~ " should take care that they only "
#~ "merge CI-skipped PRs to fix a "
#~ "failure on ``main`` and not in "
#~ "cases where the submitter wants to "
#~ "shortcut CI to merge a change "
#~ "faster."
#~ msgstr ""

#~ msgid ""
#~ "Most TVM Python tests run under "
#~ "|pytest|_ and can be run as "
#~ "described in :ref:`pr-testing`. For a"
#~ " closer environment to the one than"
#~ " runs in CI you can run the "
#~ "docker images directly, build TVM, and"
#~ " execute tests inside the container. "
#~ "See :ref:`docker_images` for details."
#~ msgstr ""

#~ msgid "Keeping CI Green"
#~ msgstr ""

#~ msgid ""
#~ "Developers rely on the TVM CI to"
#~ " get signal on their PRs before "
#~ "merging. Occasionally breakages slip through"
#~ " and break ``main``, which in turn"
#~ " causes the same error to show "
#~ "up on an PR that is based on"
#~ " the broken commit(s). Broken commits "
#~ "can be identified `through GitHub "
#~ "<https://github.com/apache/tvm/commits/main>`_ via the "
#~ "commit status icon or via `Jenkins "
#~ "<https://ci.tlcpack.ai/blue/organizations/jenkins/tvm/activity?branch=main>`_."
#~ " In these situations it is possible"
#~ " to either revert the offending "
#~ "commit or submit a forward fix to"
#~ " address the issue. It is up to"
#~ " the committer and commit author "
#~ "which option to choose, keeping in "
#~ "mind that a broken CI affects all"
#~ " TVM developers and should be fixed"
#~ " as soon as possible."
#~ msgstr ""

#~ msgid "Skip CI for Reverts"
#~ msgstr ""

#~ msgid ""
#~ "For reverts and trivial forward fixes,"
#~ " adding ``[skip ci]`` to the revert's"
#~ " PR title will cause CI to "
#~ "shortcut and only run lint. Committers"
#~ " should take care that they only "
#~ "merge CI-skipped PRs to fix a "
#~ "failure on ``main`` and not in "
#~ "cases where the submitter wants to "
#~ "shortcut CI to merge a change "
#~ "faster. The PR title is checked "
#~ "when the build is first run "
#~ "(specifically during the lint step, so"
#~ " changes after that has run do "
#~ "not affect CI and will require the"
#~ " job to be re-triggered by "
#~ "another ``git push``)."
#~ msgstr ""

#~ msgid "Handling Flaky Failures"
#~ msgstr ""

#~ msgid ""
#~ "If you notice a failure on your"
#~ " PR that seems unrelated to your "
#~ "change, you should search `recent GitHub"
#~ " issues related to flaky tests "
#~ "<https://github.com/apache/tvm/issues?q=is%3Aissue+%5BCI+Problem%5D+Flaky+>`_"
#~ " and `file a new issue "
#~ "<https://github.com/apache/tvm/issues/new?assignees=&labels=&template"
#~ "=ci-problem.md&title=%5BCI+Problem%5D+>`_ if you "
#~ "don't see any reports of the "
#~ "failure. If a certain test or "
#~ "class of tests affects several PRs "
#~ "or commits on ``main`` with flaky "
#~ "failures, the test should be disabled"
#~ " via |pytest's @xfail decorator|_ with "
#~ "|strict=True|_ and the relevant issue "
#~ "linked in the disabling PR."
#~ msgstr ""

#~ msgid "``ci-docker-staging``"
#~ msgstr ""

#~ msgid ""
#~ "The `ci-docker-staging "
#~ "<https://github.com/apache/tvm/tree/ci-docker-staging>`_"
#~ " branch is used to test updates "
#~ "to Docker images and ``Jenkinsfile`` "
#~ "changes. When running a build for "
#~ "a normal PR from a forked "
#~ "repository, Jenkins uses the code from"
#~ " the PR except for the "
#~ "``Jenkinsfile`` itself, which comes from "
#~ "the base branch. When branches are "
#~ "built, the ``Jenkinsfile`` in the branch"
#~ " is used, so a committer with "
#~ "write access must push PRs to a"
#~ " branch in apache/tvm to properly "
#~ "test ``Jenkinsfile`` changes. If your PR"
#~ " makes changes to the ``Jenkinsfile``, "
#~ "make sure to @ a `committer "
#~ "<https://github.com/apache/tvm/blob/main/CONTRIBUTORS.md>`_ and"
#~ " ask them to push your PR as"
#~ " a branch to test the changes."
#~ msgstr ""

#~ msgid "Docker Images"
#~ msgstr ""

#~ msgid ""
#~ "Each CI job runs most of its "
#~ "work inside a Docker container, built"
#~ " from files in the `docker/ "
#~ "<https://github.com/apache/tvm/tree/main/docker>`_ folder. "
#~ "These files are built nightly in "
#~ "Jenkins via the `docker-images-ci "
#~ "<https://ci.tlcpack.ai/job/docker-images-ci/>`_ job."
#~ " The images for these containers are"
#~ " hosted in the `tlcpack Docker Hub"
#~ " <https://hub.docker.com/u/tlcpack>`_ and referenced"
#~ " at the |top_of_the_Jenkinsfile|_. These "
#~ "can be inspected and run locally "
#~ "via standard Docker commands."
#~ msgstr ""

#~ msgid ""
#~ "``docker/bash.sh`` will automatically grab the"
#~ " latest image from the ``Jenkinsfile`` "
#~ "and help in mounting your current "
#~ "directory."
#~ msgstr ""

#~ msgid ""
#~ "TVM uses Jenkins for running Linux "
#~ "continuous integration (CI) tests on "
#~ "`branches <https://ci.tlcpack.ai/job/tvm/>`_ and "
#~ "`pull requests <https://ci.tlcpack.ai/job/tvm/view"
#~ "/change-requests/>`_ through a build "
#~ "configuration specified in a `Jenkinsfile "
#~ "<https://github.com/apache/tvm/blob/main/Jenkinsfile>`_. Non-"
#~ "critical jobs run in GitHub Actions "
#~ "for Windows and MacOS jobs."
#~ msgstr ""

#~ msgid ""
#~ "A standard CI run looks something "
#~ "like this viewed in `Jenkins' BlueOcean"
#~ " viewer "
#~ "<https://ci.tlcpack.ai/blue/organizations/jenkins/tvm/activity>`_. "
#~ "CI runs usually take several hours "
#~ "to complete and pull requests (PRs) "
#~ "cannot be merged before CI has "
#~ "successfully completed. To diagnose failing"
#~ " steps, click through to the failing"
#~ " pipeline stage then to the failing"
#~ " step to see the output logs."
#~ msgstr ""

