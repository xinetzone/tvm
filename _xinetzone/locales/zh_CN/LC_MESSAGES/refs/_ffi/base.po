# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-04-07 11:03+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.1\n"

#: ../../../xin/refs/_ffi/base.rst:3
msgid "``_ffi.base``"
msgstr ""

#: of tvm._ffi.base:1
msgid "Base library for TVM FFI."
msgstr ""

#: of tvm._ffi.base.TVMError:1
msgid "Default error thrown by TVM functions."
msgstr ""

#: of tvm._ffi.base.TVMError:3
msgid "TVMError will be raised if you do not give any error type specification,"
msgstr ""

#: of tvm._ffi.base._find_error_type:1
msgid "Find the error name given the first line of the error message."
msgstr ""

#: of tvm._ffi.base._find_error_type:6
msgid "line"
msgstr ""

#: of tvm._ffi.base.c_str:9
msgid "str"
msgstr ""

#: of tvm._ffi.base._find_error_type:6
msgid "The first line of error message."
msgstr ""

#: of tvm._ffi.base._find_error_type:10
msgid "name : str The error name"
msgstr ""

#: of tvm._ffi.base._load_lib:1
msgid "Load libary by searching possible path."
msgstr ""

#: of tvm._ffi.base._valid_error_name:1
msgid "Check whether name is a valid error name."
msgstr ""

#: of tvm._ffi.base.c2pyerror:1
msgid "Translate C API error message to python style."
msgstr ""

#: of tvm._ffi.base.c2pyerror:6 tvm._ffi.base.py2cerror:6
msgid "err_msg"
msgstr ""

#: of tvm._ffi.base.c2pyerror:6 tvm._ffi.base.py2cerror:6
msgid "The error message."
msgstr ""

#: of tvm._ffi.base.c2pyerror:11 tvm._ffi.base.py2cerror:10
msgid "new_msg"
msgstr ""

#: of tvm._ffi.base.c2pyerror:11 tvm._ffi.base.py2cerror:11
msgid "Translated message."
msgstr ""

#: of tvm._ffi.base.c2pyerror:13
msgid "err_type"
msgstr ""

#: of tvm._ffi.base.c2pyerror:14
msgid "Detected error type."
msgstr ""

#: of tvm._ffi.base.c_array:1
msgid "Create ctypes array from a python array"
msgstr ""

#: of tvm._ffi.base.c_array:6
msgid "ctype"
msgstr ""

#: of
msgid "ctypes data type"
msgstr ""

#: of tvm._ffi.base.c_array:6
msgid "data type of the array we want to convert to"
msgstr ""

#: of tvm._ffi.base.c_array:9
msgid "values"
msgstr ""

#: of
msgid "tuple or list"
msgstr ""

#: of tvm._ffi.base.c_array:9
msgid "data content"
msgstr ""

#: of tvm._ffi.base.c_array:13
msgid "out"
msgstr ""

#: of
msgid "ctypes array"
msgstr ""

#: of tvm._ffi.base.c_array:14
msgid "Created ctypes array"
msgstr ""

#: of tvm._ffi.base.c_str:1
msgid ""
"Create ctypes char * from a python string Parameters ---------- string : "
"string type"
msgstr ""

#: of tvm._ffi.base.c_str:5
msgid "python string"
msgstr ""

#: of
msgid "c_char_p"
msgstr ""

#: of tvm._ffi.base.c_str:10
msgid "A char pointer that can be passed to C API"
msgstr ""

#: of tvm._ffi.base.check_call:1
msgid "Check the return value of C API call"
msgstr ""

#: of tvm._ffi.base.check_call:3
msgid ""
"This function will raise exception when error occurs. Wrap every API call"
" with this function"
msgstr ""

#: of tvm._ffi.base.check_call:8
msgid "ret"
msgstr ""

#: of
msgid "int"
msgstr ""

#: of tvm._ffi.base.check_call:9
msgid "return value from API calls"
msgstr ""

#: of tvm._ffi.base.decorate:1
msgid "A wrapper call of decorator package, differs to call time"
msgstr ""

#: of tvm._ffi.base.decorate:6
msgid "func"
msgstr ""

#: of
msgid "function"
msgstr ""

#: of tvm._ffi.base.decorate:6
msgid "The original function"
msgstr ""

#: of tvm._ffi.base.decorate:8
msgid "fwrapped"
msgstr ""

#: of tvm._ffi.base.decorate:9
msgid "The wrapped function"
msgstr ""

#: of tvm._ffi.base.get_last_ffi_error:1
msgid "Create error object given result of TVMGetLastError."
msgstr ""

#: of tvm._ffi.base.get_last_ffi_error:5
msgid "err"
msgstr ""

#: of
msgid "object"
msgstr ""

#: of tvm._ffi.base.get_last_ffi_error:6
msgid "The error object based on the err_msg"
msgstr ""

#: of tvm._ffi.base.py2cerror:1
msgid "Translate python style error message to C style."
msgstr ""

#: of tvm._ffi.base.register_error:1
msgid "Register an error class so it can be recognized by the ffi error handler."
msgstr ""

#: of tvm._ffi.base.register_error:6
msgid "func_name"
msgstr ""

#: of
msgid "str or function or class"
msgstr ""

#: of tvm._ffi.base.register_error:6
msgid "The name of the error function."
msgstr ""

#: of tvm._ffi.base.register_error:9
msgid "cls"
msgstr ""

#: of tvm._ffi.base.register_error:9
msgid "The function to create the class"
msgstr ""

#: of tvm._ffi.base.register_error:14
msgid "fregister"
msgstr ""

#: of tvm._ffi.base.register_error:14
msgid "Register function if f is not specified."
msgstr ""

#~ msgid "`_ffi.base`"
#~ msgstr ""

#~ msgid "Base library for TVM FFI."
#~ msgstr "TVM FFI 的基础库。"

#~ msgid "Default error thrown by TVM functions."
#~ msgstr "由 TVM 函数抛出的默认错误。"

#~ msgid ""
#~ "TVMError will be raised if you do"
#~ " not give any error type "
#~ "specification,"
#~ msgstr "如果你没有给出任何错误类型的说明，TVMError 将被触发。"

#~ msgid "Translate C API error message to python style."
#~ msgstr "将 C 语言 API 错误信息翻译成 Python 风格。"

#~ msgid "参数"
#~ msgstr ""

#~ msgid "The error message."
#~ msgstr "错误信息。"

#~ msgid "返回"
#~ msgstr ""

#~ msgid ""
#~ "* **new_msg** (*str*) -- Translated "
#~ "message. * **err_type** (*str*) -- "
#~ "Detected error type."
#~ msgstr "* **new_msg** (*str*) -- 翻译的信息。**err_type** (*str*) -- 检测到的错误类型。"

#~ msgid "**new_msg** (*str*) -- Translated message."
#~ msgstr ""

#~ msgid "**err_type** (*str*) -- Detected error type."
#~ msgstr ""

#~ msgid "Create ctypes array from a python array"
#~ msgstr ""

#~ msgid "data type of the array we want to convert to"
#~ msgstr ""

#~ msgid "data content"
#~ msgstr ""

#~ msgid "**out** -- Created ctypes array"
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid ""
#~ "Create ctypes char * from a python"
#~ " string :param string: python string "
#~ ":type string: string type"
#~ msgstr ""

#~ msgid "**str** -- A char pointer that can be passed to C API"
#~ msgstr ""

#~ msgid "Check the return value of C API call"
#~ msgstr ""

#~ msgid ""
#~ "This function will raise exception when"
#~ " error occurs. Wrap every API call"
#~ " with this function"
#~ msgstr ""

#~ msgid "return value from API calls"
#~ msgstr ""

#~ msgid "A wrapper call of decorator package, differs to call time"
#~ msgstr ""

#~ msgid "The original function"
#~ msgstr ""

#~ msgid "The wrapped function"
#~ msgstr ""

#~ msgid "Create error object given result of TVMGetLastError."
#~ msgstr ""

#~ msgid "**err** -- The error object based on the err_msg"
#~ msgstr ""

#~ msgid "Translate python style error message to C style."
#~ msgstr ""

#~ msgid "**new_msg** -- Translated message."
#~ msgstr ""

#~ msgid ""
#~ "Register an error class so it can"
#~ " be recognized by the ffi error "
#~ "handler."
#~ msgstr ""

#~ msgid "The name of the error function."
#~ msgstr ""

#~ msgid "The function to create the class"
#~ msgstr ""

#~ msgid "**fregister** -- Register function if f is not specified."
#~ msgstr ""

#~ msgid "实际案例"
#~ msgstr ""

