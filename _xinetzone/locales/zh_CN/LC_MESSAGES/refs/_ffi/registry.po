# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2022, xinetzone
# This file is distributed under the same license as the TVM package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: TVM \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-02-09 00:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../xin/refs/_ffi/registry.rst:3
msgid "``_ffi.registry``"
msgstr ""

#: of tvm._ffi.registry:1
msgid "FFI registry to register function and objects."
msgstr ""

#: of tvm._ffi.registry._init_api:1
msgid "Initialize api for a given module name"
msgstr ""

#: of tvm._ffi.registry._init_api:4
msgid "namespace"
msgstr ""

#: of
msgid "str"
msgstr ""

#: of tvm._ffi.registry._init_api:4
msgid "The namespace of the source registry"
msgstr ""

#: of tvm._ffi.registry._init_api:6
msgid "target_module_name"
msgstr ""

#: of tvm._ffi.registry._init_api:7
msgid "The target module name if different from namespace"
msgstr ""

#: of tvm._ffi.registry.extract_ext_funcs:1
msgid "Extract the extension PackedFuncs from a C module."
msgstr ""

#: of tvm._ffi.registry.extract_ext_funcs:6
msgid "finit"
msgstr ""

#: of
msgid "ctypes function"
msgstr ""

#: of tvm._ffi.registry.extract_ext_funcs:6
msgid "a ctypes that takes signature of TVMExtensionDeclarer"
msgstr ""

#: of tvm._ffi.registry.extract_ext_funcs:10
msgid "fdict"
msgstr ""

#: of
msgid "dict of str to Function"
msgstr ""

#: of tvm._ffi.registry.extract_ext_funcs:11
msgid "The extracted functions"
msgstr ""

#: of tvm._ffi.registry.get_global_func:1
msgid "Get a global function by name"
msgstr ""

#: of tvm._ffi.registry.get_global_func:6
#: tvm._ffi.registry.remove_global_func:5
msgid "name"
msgstr ""

#: of tvm._ffi.registry.get_global_func:6
#: tvm._ffi.registry.remove_global_func:6
msgid "The name of the global function"
msgstr ""

#: of tvm._ffi.registry.get_global_func:9
msgid "allow_missing"
msgstr ""

#: of
msgid "bool"
msgstr ""

#: of tvm._ffi.registry.get_global_func:9
msgid "Whether allow missing function or raise an error."
msgstr ""

#: of tvm._ffi.registry.get_global_func:13
msgid "func"
msgstr ""

#: of
msgid "PackedFunc"
msgstr ""

#: of tvm._ffi.registry.get_global_func:14
msgid "The function to be returned, None if function is missing."
msgstr ""

#: of tvm._ffi.registry.get_object_type_index:1
msgid "Get type index of object type"
msgstr ""

#: of tvm._ffi.registry.get_object_type_index:6
#: tvm._ffi.registry.register_extension:9
#: tvm._ffi.registry.register_extension:29
msgid "cls"
msgstr ""

#: of
msgid "type"
msgstr ""

#: of tvm._ffi.registry.get_object_type_index:6
msgid "The object type to get type index for."
msgstr ""

#: of tvm._ffi.registry.get_object_type_index:10
msgid "type_index"
msgstr ""

#: of
msgid "Optional[int]"
msgstr ""

#: of tvm._ffi.registry.get_object_type_index:11
msgid "The type index, or None if type not found in the registry."
msgstr ""

#: of tvm._ffi.registry.list_global_func_names:1
msgid "Get list of global functions registered."
msgstr ""

#: of tvm._ffi.registry.list_global_func_names:5
msgid "names"
msgstr ""

#: of
msgid "list"
msgstr ""

#: of tvm._ffi.registry.list_global_func_names:6
msgid "List of global functions names."
msgstr ""

#: of tvm._ffi.registry.register_extension:1
msgid "Register a extension class to TVM."
msgstr ""

#: of tvm._ffi.registry.register_extension:3
msgid ""
"After the class is registered, the class will be able to directly pass as"
" Function argument generated by TVM."
msgstr ""

#: of
msgid "class"
msgstr ""

#: of tvm._ffi.registry.register_extension:9
msgid "The class object to be registered as extension."
msgstr ""

#: of tvm._ffi.registry.register_extension:12
msgid "fcreate"
msgstr ""

#: of
msgid "function, optional"
msgstr ""

#: of tvm._ffi.registry.register_extension:12
msgid "The creation function to create a class object given handle value."
msgstr ""

#: of tvm._ffi.registry.register_extension:16
msgid "The registered class is requires one property: _tvm_handle."
msgstr ""

#: of tvm._ffi.registry.register_extension:18
msgid ""
"If the registered class is a subclass of NDArray, it is required to have "
"a class attribute _array_type_code. Otherwise, it is required to have a "
"class attribute _tvm_tcode."
msgstr ""

#: of tvm._ffi.registry.register_extension:22
msgid "```_tvm_handle``` returns integer represents the address of the handle."
msgstr ""

#: of tvm._ffi.registry.register_extension:23
msgid ""
"```_tvm_tcode``` or ```_array_type_code``` gives integer represents type "
"code of the class."
msgstr ""

#: of tvm._ffi.registry.register_extension:29
msgid "The class being registered."
msgstr ""

#: of tvm._ffi.registry.register_extension:33
msgid ""
"The following code registers user defined class MyTensor to be DLTensor "
"compatible."
msgstr ""

#: of tvm._ffi.registry.register_func:1
msgid "Register global function"
msgstr ""

#: of tvm._ffi.registry.register_func:6
msgid "func_name"
msgstr ""

#: of
msgid "str or function"
msgstr ""

#: of tvm._ffi.registry.register_func:6
msgid "The function name"
msgstr ""

#: of tvm._ffi.registry.register_func:9
msgid "f"
msgstr ""

#: of tvm._ffi.registry.register_func:9
msgid "The function to be registered."
msgstr ""

#: of tvm._ffi.registry.register_func:12
msgid "override: boolean optional"
msgstr ""

#: of tvm._ffi.registry.register_func:12
msgid "Whether override existing entry."
msgstr ""

#: of tvm._ffi.registry.register_func:17
msgid "fregister"
msgstr ""

#: of
msgid "function"
msgstr ""

#: of tvm._ffi.registry.register_func:17
msgid "Register function if f is not specified."
msgstr ""

#: of tvm._ffi.registry.register_func:21
msgid ""
"The following code registers my_packed_func as global function. Note that"
" we simply get it back from global function table to invoke it from "
"python side. However, we can also invoke the same function from C++ "
"backend, or in the compiled TVM code."
msgstr ""

#: of tvm._ffi.registry.register_object:1
msgid "register object type."
msgstr ""

#: of tvm._ffi.registry.register_object:6
msgid "type_key"
msgstr ""

#: of
msgid "str or cls"
msgstr ""

#: of tvm._ffi.registry.register_object:6
msgid "The type key of the node"
msgstr ""

#: of tvm._ffi.registry.register_object:10
msgid "The following code registers MyObject using type key \"test.MyObject\""
msgstr ""

#: of tvm._ffi.registry.remove_global_func:1
msgid "Remove a global function by name"
msgstr ""

#~ msgid "`_ffi.registry`"
#~ msgstr ""

#~ msgid "FFI registry to register function and objects."
#~ msgstr ""

#~ msgid "Extract the extension PackedFuncs from a C module."
#~ msgstr ""

#~ msgid "参数"
#~ msgstr ""

#~ msgid "a ctypes that takes signature of TVMExtensionDeclarer"
#~ msgstr ""

#~ msgid "返回"
#~ msgstr ""

#~ msgid "**fdict** -- The extracted functions"
#~ msgstr ""

#~ msgid "返回类型"
#~ msgstr ""

#~ msgid "Get a global function by name"
#~ msgstr ""

#~ msgid "The name of the global function"
#~ msgstr ""

#~ msgid "Whether allow missing function or raise an error."
#~ msgstr ""

#~ msgid "**func** -- The function to be returned, None if function is missing."
#~ msgstr ""

#~ msgid "Get list of global functions registered."
#~ msgstr ""

#~ msgid "**names** -- List of global functions names."
#~ msgstr ""

#~ msgid "Register a extension class to TVM."
#~ msgstr ""

#~ msgid ""
#~ "After the class is registered, the "
#~ "class will be able to directly "
#~ "pass as Function argument generated by"
#~ " TVM."
#~ msgstr ""

#~ msgid "The class object to be registered as extension."
#~ msgstr ""

#~ msgid "The creation function to create a class object given handle value."
#~ msgstr ""

#~ msgid "The registered class is requires one property: _tvm_handle."
#~ msgstr ""

#~ msgid ""
#~ "If the registered class is a "
#~ "subclass of NDArray, it is required "
#~ "to have a class attribute "
#~ "_array_type_code. Otherwise, it is required"
#~ " to have a class attribute "
#~ "_tvm_tcode."
#~ msgstr ""

#~ msgid "```_tvm_handle``` returns integer represents the address of the handle."
#~ msgstr ""

#~ msgid ""
#~ "```_tvm_tcode``` or ```_array_type_code``` gives "
#~ "integer represents type code of the "
#~ "class."
#~ msgstr ""

#~ msgid "**cls** -- The class being registered."
#~ msgstr ""

#~ msgid "示例"
#~ msgstr ""

#~ msgid ""
#~ "The following code registers user "
#~ "defined class MyTensor to be DLTensor"
#~ " compatible."
#~ msgstr ""

#~ msgid "Register global function"
#~ msgstr ""

#~ msgid "The function name"
#~ msgstr ""

#~ msgid "The function to be registered."
#~ msgstr ""

#~ msgid "Whether override existing entry."
#~ msgstr ""

#~ msgid "**fregister** -- Register function if f is not specified."
#~ msgstr ""

#~ msgid "实际案例"
#~ msgstr ""

#~ msgid ""
#~ "The following code registers my_packed_func"
#~ " as global function. Note that we "
#~ "simply get it back from global "
#~ "function table to invoke it from "
#~ "python side. However, we can also "
#~ "invoke the same function from C++ "
#~ "backend, or in the compiled TVM "
#~ "code."
#~ msgstr ""

#~ msgid "register object type."
#~ msgstr ""

#~ msgid "The type key of the node"
#~ msgstr ""

#~ msgid "The following code registers MyObject using type key \"test.MyObject\""
#~ msgstr ""

#~ msgid "Remove a global function by name"
#~ msgstr ""

